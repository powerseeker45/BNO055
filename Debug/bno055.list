
bno055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080063a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  2400006c  0800640c  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002a0  0800640c  000082a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d6f2  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fb6  00000000  00000000  0001578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b98  00000000  00000000  00017748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008c5  00000000  00000000  000182e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032793  00000000  00000000  00018ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f655  00000000  00000000  0004b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d5b4  00000000  00000000  0005a98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00197f41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003688  00000000  00000000  00197f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  0019b60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005e88 	.word	0x08005e88

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08005e88 	.word	0x08005e88

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Check_Status>:
 *   @param  BNO_status_t structure that contains status information
 *           STresult, SYSError and SYSStatus
 *
 *   @retval None
 */
void Check_Status(BNO_Status_t *result){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af04      	add	r7, sp, #16
 80003b6:	6078      	str	r0, [r7, #4]
	     Bit 2 = Gyroscope self test
	     Bit 3 = MCU self test

	     0x0F = all good!
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, ST_RESULT_ADDR, 1, &value, 1, 100);
 80003b8:	2364      	movs	r3, #100	@ 0x64
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2301      	movs	r3, #1
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	f107 030e 	add.w	r3, r7, #14
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2301      	movs	r3, #1
 80003c8:	2236      	movs	r2, #54	@ 0x36
 80003ca:	2152      	movs	r1, #82	@ 0x52
 80003cc:	4827      	ldr	r0, [pc, #156]	@ (800046c <Check_Status+0xbc>)
 80003ce:	f001 ff11 	bl	80021f4 <HAL_I2C_Mem_Read>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <Check_Status+0x32>
	    printf("I2C Read Error: ST_RESULT_ADDR\n");
 80003dc:	4824      	ldr	r0, [pc, #144]	@ (8000470 <Check_Status+0xc0>)
 80003de:	f004 feef 	bl	80051c0 <puts>
	}
	HAL_Delay(50);
 80003e2:	2032      	movs	r0, #50	@ 0x32
 80003e4:	f001 fa2e 	bl	8001844 <HAL_Delay>
	result->STresult = value;
 80003e8:	7bba      	ldrb	r2, [r7, #14]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	701a      	strb	r2, [r3, #0]
	value=0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73bb      	strb	r3, [r7, #14]
	     3 = System Iniitalization
	     4 = Executing Self-Test
	     5 = Sensor fusio algorithm running
	     6 = System running without fusion algorithms
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_STATUS_ADDR, 1, &value, 1, 100);
 80003f2:	2364      	movs	r3, #100	@ 0x64
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	2301      	movs	r3, #1
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	f107 030e 	add.w	r3, r7, #14
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	2239      	movs	r2, #57	@ 0x39
 8000404:	2152      	movs	r1, #82	@ 0x52
 8000406:	4819      	ldr	r0, [pc, #100]	@ (800046c <Check_Status+0xbc>)
 8000408:	f001 fef4 	bl	80021f4 <HAL_I2C_Mem_Read>
 800040c:	4603      	mov	r3, r0
 800040e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <Check_Status+0x6c>
	    printf("I2C Read Error: SYS_STATUS_ADDR\n");
 8000416:	4817      	ldr	r0, [pc, #92]	@ (8000474 <Check_Status+0xc4>)
 8000418:	f004 fed2 	bl	80051c0 <puts>
	}
	HAL_Delay(50);
 800041c:	2032      	movs	r0, #50	@ 0x32
 800041e:	f001 fa11 	bl	8001844 <HAL_Delay>
	result->SYSStatus = value;
 8000422:	7bba      	ldrb	r2, [r7, #14]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	709a      	strb	r2, [r3, #2]
	value=0;
 8000428:	2300      	movs	r3, #0
 800042a:	73bb      	strb	r3, [r7, #14]
	     7 = BNO low power mode not available for selected operation mode
	     8 = Accelerometer power mode not available
	     9 = Fusion algorithm configuration error
	     A = Sensor configuration error
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_ERR_ADDR, 1, &value, 1, 100);
 800042c:	2364      	movs	r3, #100	@ 0x64
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	f107 030e 	add.w	r3, r7, #14
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	223a      	movs	r2, #58	@ 0x3a
 800043e:	2152      	movs	r1, #82	@ 0x52
 8000440:	480a      	ldr	r0, [pc, #40]	@ (800046c <Check_Status+0xbc>)
 8000442:	f001 fed7 	bl	80021f4 <HAL_I2C_Mem_Read>
 8000446:	4603      	mov	r3, r0
 8000448:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <Check_Status+0xa6>
	    printf("I2C Read Error: SYS_ERR_ADDR\n");
 8000450:	4809      	ldr	r0, [pc, #36]	@ (8000478 <Check_Status+0xc8>)
 8000452:	f004 feb5 	bl	80051c0 <puts>
	}
	HAL_Delay(50);
 8000456:	2032      	movs	r0, #50	@ 0x32
 8000458:	f001 f9f4 	bl	8001844 <HAL_Delay>
	result->SYSError = value;
 800045c:	7bba      	ldrb	r2, [r7, #14]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	705a      	strb	r2, [r3, #1]
}
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	24000088 	.word	0x24000088
 8000470:	08005ea0 	.word	0x08005ea0
 8000474:	08005ec0 	.word	0x08005ec0
 8000478:	08005ee0 	.word	0x08005ee0

0800047c <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000486:	2364      	movs	r3, #100	@ 0x64
 8000488:	9302      	str	r3, [sp, #8]
 800048a:	2301      	movs	r3, #1
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2207      	movs	r2, #7
 8000496:	2152      	movs	r1, #82	@ 0x52
 8000498:	4807      	ldr	r0, [pc, #28]	@ (80004b8 <SelectPage+0x3c>)
 800049a:	f001 fd97 	bl	8001fcc <HAL_I2C_Mem_Write>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <SelectPage+0x2e>
		printf("Register page replacement could not be set\n");
 80004a4:	4805      	ldr	r0, [pc, #20]	@ (80004bc <SelectPage+0x40>)
 80004a6:	f004 fe8b 	bl	80051c0 <puts>
	}
	HAL_Delay(50);
 80004aa:	2032      	movs	r0, #50	@ 0x32
 80004ac:	f001 f9ca 	bl	8001844 <HAL_Delay>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	24000088 	.word	0x24000088
 80004bc:	08005f00 	.word	0x08005f00

080004c0 <ResetBNO055>:
  *
  * @param  None
  *
  * @retval None
  */
void ResetBNO055(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af04      	add	r7, sp, #16

	uint8_t reset = 0x20;
 80004c6:	2320      	movs	r3, #32
 80004c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 80004ca:	2364      	movs	r3, #100	@ 0x64
 80004cc:	9302      	str	r3, [sp, #8]
 80004ce:	2301      	movs	r3, #1
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2301      	movs	r3, #1
 80004d8:	223f      	movs	r2, #63	@ 0x3f
 80004da:	2152      	movs	r1, #82	@ 0x52
 80004dc:	4812      	ldr	r0, [pc, #72]	@ (8000528 <ResetBNO055+0x68>)
 80004de:	f001 fd75 	bl	8001fcc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80004e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004e6:	f001 f9ad 	bl	8001844 <HAL_Delay>

	//Checking for is reset process done
	uint8_t chip_id=0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 80004ee:	2364      	movs	r3, #100	@ 0x64
 80004f0:	9302      	str	r3, [sp, #8]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	2200      	movs	r2, #0
 80004fe:	2152      	movs	r1, #82	@ 0x52
 8000500:	4809      	ldr	r0, [pc, #36]	@ (8000528 <ResetBNO055+0x68>)
 8000502:	f001 fe77 	bl	80021f4 <HAL_I2C_Mem_Read>

	//If value of id register is not equal to BNO055 chip id which is 0xA0, wait until equal to each other
	while(chip_id != BNO055_ID) {
 8000506:	e006      	b.n	8000516 <ResetBNO055+0x56>
		printf("BNO055-> Undefined chip id\n");
 8000508:	4808      	ldr	r0, [pc, #32]	@ (800052c <ResetBNO055+0x6c>)
 800050a:	f004 fe59 	bl	80051c0 <puts>
		HAL_Delay(500);
 800050e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000512:	f001 f997 	bl	8001844 <HAL_Delay>
	while(chip_id != BNO055_ID) {
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	2ba0      	cmp	r3, #160	@ 0xa0
 800051a:	d1f5      	bne.n	8000508 <ResetBNO055+0x48>
	}
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	24000088 	.word	0x24000088
 800052c:	08005f2c 	.word	0x08005f2c

08000530 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af04      	add	r7, sp, #16
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]


	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d050      	beq.n	80005e8 <ReadData+0xb8>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	2306      	movs	r3, #6
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	222e      	movs	r2, #46	@ 0x2e
 800055a:	2152      	movs	r1, #82	@ 0x52
 800055c:	48c0      	ldr	r0, [pc, #768]	@ (8000860 <ReadData+0x330>)
 800055e:	f001 fe49 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8000562:	7a7b      	ldrb	r3, [r7, #9]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b21a      	sxth	r2, r3
 8000568:	7a3b      	ldrb	r3, [r7, #8]
 800056a:	b21b      	sxth	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b21b      	sxth	r3, r3
 8000570:	ee07 3a90 	vmov	s15, r3
 8000574:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000578:	ed9f 5bb7 	vldr	d5, [pc, #732]	@ 8000858 <ReadData+0x328>
 800057c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000580:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	b21a      	sxth	r2, r3
 8000590:	7abb      	ldrb	r3, [r7, #10]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b21b      	sxth	r3, r3
 8000598:	ee07 3a90 	vmov	s15, r3
 800059c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005a0:	ed9f 5bad 	vldr	d5, [pc, #692]	@ 8000858 <ReadData+0x328>
 80005a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	021b      	lsls	r3, r3, #8
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	7b3b      	ldrb	r3, [r7, #12]
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b21b      	sxth	r3, r3
 80005c0:	ee07 3a90 	vmov	s15, r3
 80005c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005c8:	ed9f 5ba3 	vldr	d5, [pc, #652]	@ 8000858 <ReadData+0x328>
 80005cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	2208      	movs	r2, #8
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fecc 	bl	8005380 <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d06c      	beq.n	80006cc <ReadData+0x19c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2308      	movs	r3, #8
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2220      	movs	r2, #32
 8000606:	2152      	movs	r1, #82	@ 0x52
 8000608:	4895      	ldr	r0, [pc, #596]	@ (8000860 <ReadData+0x330>)
 800060a:	f001 fdf3 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 800060e:	7a7b      	ldrb	r3, [r7, #9]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	7a3b      	ldrb	r3, [r7, #8]
 8000616:	b21b      	sxth	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b21b      	sxth	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	da03      	bge.n	8000628 <ReadData+0xf8>
 8000620:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000624:	441a      	add	r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	139b      	asrs	r3, r3, #14
 800062a:	b21b      	sxth	r3, r3
 800062c:	ee07 3a90 	vmov	s15, r3
 8000630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	7abb      	ldrb	r3, [r7, #10]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21b      	sxth	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	da03      	bge.n	8000654 <ReadData+0x124>
 800064c:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000650:	441a      	add	r2, r3
 8000652:	4613      	mov	r3, r2
 8000654:	139b      	asrs	r3, r3, #14
 8000656:	b21b      	sxth	r3, r3
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	b21b      	sxth	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b21b      	sxth	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	da03      	bge.n	8000680 <ReadData+0x150>
 8000678:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800067c:	441a      	add	r2, r3
 800067e:	4613      	mov	r3, r2
 8000680:	139b      	asrs	r3, r3, #14
 8000682:	b21b      	sxth	r3, r3
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21a      	sxth	r2, r3
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b21b      	sxth	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da03      	bge.n	80006ac <ReadData+0x17c>
 80006a4:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80006a8:	441a      	add	r2, r3
 80006aa:	4613      	mov	r3, r2
 80006ac:	139b      	asrs	r3, r3, #14
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2208      	movs	r2, #8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fe5a 	bl	8005380 <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d050      	beq.n	8000778 <ReadData+0x248>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	2306      	movs	r3, #6
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	2228      	movs	r2, #40	@ 0x28
 80006ea:	2152      	movs	r1, #82	@ 0x52
 80006ec:	485c      	ldr	r0, [pc, #368]	@ (8000860 <ReadData+0x330>)
 80006ee:	f001 fd81 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 80006f2:	7a7b      	ldrb	r3, [r7, #9]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	7a3b      	ldrb	r3, [r7, #8]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000708:	ed9f 5b53 	vldr	d5, [pc, #332]	@ 8000858 <ReadData+0x328>
 800070c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000710:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	7abb      	ldrb	r3, [r7, #10]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21b      	sxth	r3, r3
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000730:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000858 <ReadData+0x328>
 8000734:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000738:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8000742:	7b7b      	ldrb	r3, [r7, #13]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	b21a      	sxth	r2, r3
 8000748:	7b3b      	ldrb	r3, [r7, #12]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000758:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8000858 <ReadData+0x328>
 800075c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000760:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2208      	movs	r2, #8
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fe04 	bl	8005380 <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	2b00      	cmp	r3, #0
 8000780:	d050      	beq.n	8000824 <ReadData+0x2f4>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	2306      	movs	r3, #6
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2214      	movs	r2, #20
 8000796:	2152      	movs	r1, #82	@ 0x52
 8000798:	4831      	ldr	r0, [pc, #196]	@ (8000860 <ReadData+0x330>)
 800079a:	f001 fd2b 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 800079e:	7a7b      	ldrb	r3, [r7, #9]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	7a3b      	ldrb	r3, [r7, #8]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007b4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80007b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	edc3 7a03 	vstr	s15, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7abb      	ldrb	r3, [r7, #10]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	ee07 3a90 	vmov	s15, r3
 80007d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007dc:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80007e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	edc3 7a04 	vstr	s15, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80007ee:	7b7b      	ldrb	r3, [r7, #13]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	7b3b      	ldrb	r3, [r7, #12]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000804:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000808:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800080c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	edc3 7a05 	vstr	s15, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2208      	movs	r2, #8
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fdae 	bl	8005380 <memset>
	    }
	    if (sensors & SENSOR_ACCEL) {
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	2b00      	cmp	r3, #0
 800082c:	d059      	beq.n	80008e2 <ReadData+0x3b2>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2306      	movs	r3, #6
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	2208      	movs	r2, #8
 8000842:	2152      	movs	r1, #82	@ 0x52
 8000844:	4806      	ldr	r0, [pc, #24]	@ (8000860 <ReadData+0x330>)
 8000846:	f001 fcd5 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 800084a:	7a7b      	ldrb	r3, [r7, #9]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	7a3b      	ldrb	r3, [r7, #8]
 8000852:	e007      	b.n	8000864 <ReadData+0x334>
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	40590000 	.word	0x40590000
 8000860:	24000088 	.word	0x24000088
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21b      	sxth	r3, r3
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000872:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8000a48 <ReadData+0x518>
 8000876:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800087a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	edc3 7a00 	vstr	s15, [r3]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800089a:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8000a48 <ReadData+0x518>
 800089e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	edc3 7a01 	vstr	s15, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	7b3b      	ldrb	r3, [r7, #12]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	ee07 3a90 	vmov	s15, r3
 80008be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008c2:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8000a48 <ReadData+0x518>
 80008c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	edc3 7a02 	vstr	s15, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2208      	movs	r2, #8
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 fd4f 	bl	8005380 <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d050      	beq.n	800098e <ReadData+0x45e>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2306      	movs	r3, #6
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	220e      	movs	r2, #14
 8000900:	2152      	movs	r1, #82	@ 0x52
 8000902:	4853      	ldr	r0, [pc, #332]	@ (8000a50 <ReadData+0x520>)
 8000904:	f001 fc76 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000908:	7a7b      	ldrb	r3, [r7, #9]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	7a3b      	ldrb	r3, [r7, #8]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800091e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000922:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edc3 7a06 	vstr	s15, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7abb      	ldrb	r3, [r7, #10]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000946:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800094a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800094e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	edc3 7a07 	vstr	s15, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000958:	7b7b      	ldrb	r3, [r7, #13]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	7b3b      	ldrb	r3, [r7, #12]
 8000960:	b21b      	sxth	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800096e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000972:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000976:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edc3 7a08 	vstr	s15, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2208      	movs	r2, #8
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fcf9 	bl	8005380 <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000994:	2b00      	cmp	r3, #0
 8000996:	d050      	beq.n	8000a3a <ReadData+0x50a>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2306      	movs	r3, #6
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	221a      	movs	r2, #26
 80009ac:	2152      	movs	r1, #82	@ 0x52
 80009ae:	4828      	ldr	r0, [pc, #160]	@ (8000a50 <ReadData+0x520>)
 80009b0:	f001 fc20 	bl	80021f4 <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80009b4:	7a7b      	ldrb	r3, [r7, #9]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	b21b      	sxth	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009ca:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80009ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80009dc:	7afb      	ldrb	r3, [r7, #11]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009f2:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80009f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000a04:	7b7b      	ldrb	r3, [r7, #13]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	7b3b      	ldrb	r3, [r7, #12]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a1a:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000a1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2208      	movs	r2, #8
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fca3 	bl	8005380 <memset>
	    }
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	f3af 8000 	nop.w
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	40590000 	.word	0x40590000
 8000a50:	24000088 	.word	0x24000088

08000a54 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fd0c 	bl	800047c <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 8000a64:	2364      	movs	r3, #100	@ 0x64
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	223d      	movs	r2, #61	@ 0x3d
 8000a74:	2152      	movs	r1, #82	@ 0x52
 8000a76:	480d      	ldr	r0, [pc, #52]	@ (8000aac <Set_Operation_Mode+0x58>)
 8000a78:	f001 faa8 	bl	8001fcc <HAL_I2C_Mem_Write>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <Set_Operation_Mode+0x36>
		printf("Operation mode could not be set!\n");
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <Set_Operation_Mode+0x5c>)
 8000a84:	f004 fb9c 	bl	80051c0 <puts>
 8000a88:	e002      	b.n	8000a90 <Set_Operation_Mode+0x3c>
	}
	else printf("Operation mode switching succeeded.\n");
 8000a8a:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <Set_Operation_Mode+0x60>)
 8000a8c:	f004 fb98 	bl	80051c0 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d103      	bne.n	8000a9e <Set_Operation_Mode+0x4a>
 8000a96:	2013      	movs	r0, #19
 8000a98:	f000 fed4 	bl	8001844 <HAL_Delay>

	else HAL_Delay(9);

}
 8000a9c:	e002      	b.n	8000aa4 <Set_Operation_Mode+0x50>
	else HAL_Delay(9);
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f000 fed0 	bl	8001844 <HAL_Delay>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24000088 	.word	0x24000088
 8000ab0:	08005f48 	.word	0x08005f48
 8000ab4:	08005f6c 	.word	0x08005f6c

08000ab8 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af04      	add	r7, sp, #16
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	223e      	movs	r2, #62	@ 0x3e
 8000ad2:	2152      	movs	r1, #82	@ 0x52
 8000ad4:	4809      	ldr	r0, [pc, #36]	@ (8000afc <SetPowerMODE+0x44>)
 8000ad6:	f001 fa79 	bl	8001fcc <HAL_I2C_Mem_Write>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 8000ae0:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <SetPowerMODE+0x48>)
 8000ae2:	f004 fb6d 	bl	80051c0 <puts>
 8000ae6:	e002      	b.n	8000aee <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 8000ae8:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <SetPowerMODE+0x4c>)
 8000aea:	f004 fb69 	bl	80051c0 <puts>
	}
	HAL_Delay(50);
 8000aee:	2032      	movs	r0, #50	@ 0x32
 8000af0:	f000 fea8 	bl	8001844 <HAL_Delay>

}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24000088 	.word	0x24000088
 8000b00:	08005f90 	.word	0x08005f90
 8000b04:	08005fb0 	.word	0x08005fb0

08000b08 <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8000b12:	2364      	movs	r3, #100	@ 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	223f      	movs	r2, #63	@ 0x3f
 8000b22:	2152      	movs	r1, #82	@ 0x52
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <Clock_Source+0x2c>)
 8000b26:	f001 fa51 	bl	8001fcc <HAL_I2C_Mem_Write>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000088 	.word	0x24000088

08000b38 <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af04      	add	r7, sp, #16
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8000b48:	2364      	movs	r3, #100	@ 0x64
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	2241      	movs	r2, #65	@ 0x41
 8000b58:	2152      	movs	r1, #82	@ 0x52
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <BNO055_Axis+0x54>)
 8000b5c:	f001 fa36 	bl	8001fcc <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000b60:	2014      	movs	r0, #20
 8000b62:	f000 fe6f 	bl	8001844 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 8000b66:	2364      	movs	r3, #100	@ 0x64
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	1dbb      	adds	r3, r7, #6
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2242      	movs	r2, #66	@ 0x42
 8000b76:	2152      	movs	r1, #82	@ 0x52
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <BNO055_Axis+0x54>)
 8000b7a:	f001 fa27 	bl	8001fcc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000b7e:	2064      	movs	r0, #100	@ 0x64
 8000b80:	f000 fe60 	bl	8001844 <HAL_Delay>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	24000088 	.word	0x24000088

08000b90 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af04      	add	r7, sp, #16
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8000b9a:	2364      	movs	r3, #100	@ 0x64
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2208      	movs	r2, #8
 8000baa:	2152      	movs	r1, #82	@ 0x52
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <SET_Accel_Range+0x30>)
 8000bae:	f001 fa0d 	bl	8001fcc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000bb2:	2064      	movs	r0, #100	@ 0x64
 8000bb4:	f000 fe46 	bl	8001844 <HAL_Delay>

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000088 	.word	0x24000088

08000bc4 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(BNO055_Init_t Init){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	463b      	mov	r3, r7
 8000bcc:	e883 0003 	stmia.w	r3, {r0, r1}

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff3f 	bl	8000a54 <Set_Operation_Mode>
	HAL_Delay(50);
 8000bd6:	2032      	movs	r0, #50	@ 0x32
 8000bd8:	f000 fe34 	bl	8001844 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fc4d 	bl	800047c <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffd3 	bl	8000b90 <SET_Accel_Range>
	HAL_Delay(50);
 8000bea:	2032      	movs	r0, #50	@ 0x32
 8000bec:	f000 fe2a 	bl	8001844 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fc43 	bl	800047c <SelectPage>
	HAL_Delay(50);
 8000bf6:	2032      	movs	r0, #50	@ 0x32
 8000bf8:	f000 fe24 	bl	8001844 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 8000bfc:	2364      	movs	r3, #100	@ 0x64
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	f107 030f 	add.w	r3, r7, #15
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2238      	movs	r2, #56	@ 0x38
 8000c0e:	2152      	movs	r1, #82	@ 0x52
 8000c10:	481e      	ldr	r0, [pc, #120]	@ (8000c8c <BNO055_Init+0xc8>)
 8000c12:	f001 faef 	bl	80021f4 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8000c16:	2032      	movs	r0, #50	@ 0x32
 8000c18:	f000 fe14 	bl	8001844 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <BNO055_Init+0x6c>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 8000c22:	797b      	ldrb	r3, [r7, #5]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff6f 	bl	8000b08 <Clock_Source>
		HAL_Delay(100);
 8000c2a:	2064      	movs	r0, #100	@ 0x64
 8000c2c:	f000 fe0a 	bl	8001844 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	78ba      	ldrb	r2, [r7, #2]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff7e 	bl	8000b38 <BNO055_Axis>
	HAL_Delay(100);
 8000c3c:	2064      	movs	r0, #100	@ 0x64
 8000c3e:	f000 fe01 	bl	8001844 <HAL_Delay>

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	223b      	movs	r2, #59	@ 0x3b
 8000c52:	2152      	movs	r1, #82	@ 0x52
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <BNO055_Init+0xc8>)
 8000c56:	f001 f9b9 	bl	8001fcc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f000 fdf2 	bl	8001844 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff28 	bl	8000ab8 <SetPowerMODE>
	HAL_Delay(100);
 8000c68:	2064      	movs	r0, #100	@ 0x64
 8000c6a:	f000 fdeb 	bl	8001844 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 8000c6e:	793b      	ldrb	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff feef 	bl	8000a54 <Set_Operation_Mode>
	HAL_Delay(100);
 8000c76:	2064      	movs	r0, #100	@ 0x64
 8000c78:	f000 fde4 	bl	8001844 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <BNO055_Init+0xcc>)
 8000c7e:	f004 fa9f 	bl	80051c0 <puts>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000088 	.word	0x24000088
 8000c90:	08005fd0 	.word	0x08005fd0

08000c94 <getCalibration>:
  * @param  None
  *
  * @retval Calib_status_t structure that contains
  *         the calibration status of accel, gyro, mag and system.
  */
void getCalibration(Calib_status_t *calib) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
    uint8_t calData;

    // Read calibration status register using I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, P_BNO055, CALIB_STAT_ADDR, 1, &calData, 1, HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	f107 030e 	add.w	r3, r7, #14
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	2235      	movs	r2, #53	@ 0x35
 8000cb0:	2152      	movs	r1, #82	@ 0x52
 8000cb2:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <getCalibration+0x74>)
 8000cb4:	f001 fa9e 	bl	80021f4 <HAL_I2C_Mem_Read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]

    // Check if read was successful
    if (status == HAL_OK) {
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d11b      	bne.n	8000cfa <getCalibration+0x66>

        // Extract calibration status values

        	calib->System= (calData >> 6) & 0x03;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	099b      	lsrs	r3, r3, #6
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	701a      	strb	r2, [r3, #0]


        	calib->Gyro = (calData >> 4) & 0x03;
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	705a      	strb	r2, [r3, #1]


        	calib->Acc = (calData >> 2) & 0x03;
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	709a      	strb	r2, [r3, #2]


        	calib->MAG = calData & 0x03;
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	70da      	strb	r2, [r3, #3]

    } else {
        printf("Failed to read calibration status register.\n");
    }
}
 8000cf8:	e002      	b.n	8000d00 <getCalibration+0x6c>
        printf("Failed to read calibration status register.\n");
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <getCalibration+0x78>)
 8000cfc:	f004 fa60 	bl	80051c0 <puts>
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24000088 	.word	0x24000088
 8000d0c:	08005ff8 	.word	0x08005ff8

08000d10 <getSensorOffsets>:
  * @param  22 byte long buffer to hold offset data
  *
  * @retval None
  *
  */
void getSensorOffsets(uint8_t *calibData) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]

        // Save the current mode
        uint8_t lastMode = getCurrentMode();
 8000d18:	f000 f8a2 	bl	8000e60 <getCurrentMode>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]

        // Switch to CONFIG mode
        Set_Operation_Mode(CONFIG_MODE);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe97 	bl	8000a54 <Set_Operation_Mode>
        printf("Switched to CONFIG mode.\n");
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <getSensorOffsets+0x50>)
 8000d28:	f004 fa4a 	bl	80051c0 <puts>

        // Read the offset registers
        HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, ACC_OFFSET_X_LSB_ADDR, 1, calibData, 22, 100);
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	2316      	movs	r3, #22
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2255      	movs	r2, #85	@ 0x55
 8000d3c:	2152      	movs	r1, #82	@ 0x52
 8000d3e:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <getSensorOffsets+0x54>)
 8000d40:	f001 fa58 	bl	80021f4 <HAL_I2C_Mem_Read>
        printf("Calibration data obtained.\n");
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <getSensorOffsets+0x58>)
 8000d46:	f004 fa3b 	bl	80051c0 <puts>

        // Restore the previous mode
        Set_Operation_Mode(lastMode);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe81 	bl	8000a54 <Set_Operation_Mode>
        printf("Restored to previous mode.\n");
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <getSensorOffsets+0x5c>)
 8000d54:	f004 fa34 	bl	80051c0 <puts>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08006024 	.word	0x08006024
 8000d64:	24000088 	.word	0x24000088
 8000d68:	08006040 	.word	0x08006040
 8000d6c:	0800605c 	.word	0x0800605c

08000d70 <isFullyCalibrated>:
  * @param  None
  *
  * @retval True of False
  *
  */
bool isFullyCalibrated(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
//    Calib_status_t calib ={0};
    Calib_status_t calib ={0};
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
    getCalibration(&calib);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff89 	bl	8000c94 <getCalibration>


    switch (getCurrentMode()) {
 8000d82:	f000 f86d 	bl	8000e60 <getCurrentMode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	2b09      	cmp	r3, #9
 8000d8c:	d852      	bhi.n	8000e34 <isFullyCalibrated+0xc4>
 8000d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <isFullyCalibrated+0x24>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000dbd 	.word	0x08000dbd
 8000d98:	08000dcb 	.word	0x08000dcb
 8000d9c:	08000dd9 	.word	0x08000dd9
 8000da0:	08000de7 	.word	0x08000de7
 8000da4:	08000e01 	.word	0x08000e01
 8000da8:	08000e1b 	.word	0x08000e1b
 8000dac:	08000e35 	.word	0x08000e35
 8000db0:	08000e01 	.word	0x08000e01
 8000db4:	08000de7 	.word	0x08000de7
 8000db8:	08000dd9 	.word	0x08000dd9
        case ACC_ONLY:
            return (calib.Acc == 3);
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	e046      	b.n	8000e58 <isFullyCalibrated+0xe8>
        case MAG_ONLY:
            return (calib.MAG == 3);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	e03f      	b.n	8000e58 <isFullyCalibrated+0xe8>
        case GYRO_ONLY:
        case M4G: /* No magnetometer calibration required. */
            return (calib.Gyro == 3);
 8000dd8:	797b      	ldrb	r3, [r7, #5]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	bf0c      	ite	eq
 8000dde:	2301      	moveq	r3, #1
 8000de0:	2300      	movne	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	e038      	b.n	8000e58 <isFullyCalibrated+0xe8>
        case ACC_MAG:
        case COMPASS:
            return (calib.Acc == 3 && calib.MAG == 3);
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d104      	bne.n	8000df6 <isFullyCalibrated+0x86>
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d101      	bne.n	8000df6 <isFullyCalibrated+0x86>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <isFullyCalibrated+0x88>
 8000df6:	2300      	movs	r3, #0
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	e02b      	b.n	8000e58 <isFullyCalibrated+0xe8>
        case ACC_GYRO:
        case IMU:
            return (calib.Acc == 3 && calib.Gyro == 3);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d104      	bne.n	8000e10 <isFullyCalibrated+0xa0>
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d101      	bne.n	8000e10 <isFullyCalibrated+0xa0>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <isFullyCalibrated+0xa2>
 8000e10:	2300      	movs	r3, #0
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	e01e      	b.n	8000e58 <isFullyCalibrated+0xe8>
        case MAG_GYRO:
            return (calib.MAG == 3 && calib.Gyro == 3);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d104      	bne.n	8000e2a <isFullyCalibrated+0xba>
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d101      	bne.n	8000e2a <isFullyCalibrated+0xba>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <isFullyCalibrated+0xbc>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	e011      	b.n	8000e58 <isFullyCalibrated+0xe8>
        default:
            return (calib.System == 3 && calib.Gyro == 3 && calib.Acc == 3 && calib.MAG == 3);
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d10a      	bne.n	8000e50 <isFullyCalibrated+0xe0>
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d107      	bne.n	8000e50 <isFullyCalibrated+0xe0>
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d104      	bne.n	8000e50 <isFullyCalibrated+0xe0>
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d101      	bne.n	8000e50 <isFullyCalibrated+0xe0>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <isFullyCalibrated+0xe2>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
    }
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <getCurrentMode>:
  * @param  None
  *
  * @retval Operating mode
  *
  */
Op_Modes_t getCurrentMode(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af04      	add	r7, sp, #16

	Op_Modes_t mode;

	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &mode, 1, 100);
 8000e66:	2364      	movs	r3, #100	@ 0x64
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	223d      	movs	r2, #61	@ 0x3d
 8000e76:	2152      	movs	r1, #82	@ 0x52
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <getCurrentMode+0x28>)
 8000e7a:	f001 f9bb 	bl	80021f4 <HAL_I2C_Mem_Read>

    return mode;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24000088 	.word	0x24000088

08000e8c <Calibrate_BNO055>:
  * @param  None
  *
  * @retval None
  *
  */
bool Calibrate_BNO055(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af02      	add	r7, sp, #8

		Calib_status_t calib={0};
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
        printf("Calibrating BNO055 sensor...\n");
 8000e96:	484e      	ldr	r0, [pc, #312]	@ (8000fd0 <Calibrate_BNO055+0x144>)
 8000e98:	f004 f992 	bl	80051c0 <puts>

        // Set operation mode to FUSION_MODE or appropriate mode for calibration
        Set_Operation_Mode(NDOF);
 8000e9c:	200c      	movs	r0, #12
 8000e9e:	f7ff fdd9 	bl	8000a54 <Set_Operation_Mode>
    	HAL_Delay(100);
 8000ea2:	2064      	movs	r0, #100	@ 0x64
 8000ea4:	f000 fcce 	bl	8001844 <HAL_Delay>
        // Gyroscope calibration
        printf("Calibrating gyroscope...\n");
 8000ea8:	484a      	ldr	r0, [pc, #296]	@ (8000fd4 <Calibrate_BNO055+0x148>)
 8000eaa:	f004 f989 	bl	80051c0 <puts>
        printf("Place the device in a single stable position\n");
 8000eae:	484a      	ldr	r0, [pc, #296]	@ (8000fd8 <Calibrate_BNO055+0x14c>)
 8000eb0:	f004 f986 	bl	80051c0 <puts>
        HAL_Delay(1000);  // Simulated gyroscope calibration time
 8000eb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb8:	f000 fcc4 	bl	8001844 <HAL_Delay>

        do {
            getCalibration(&calib);
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fee8 	bl	8000c94 <getCalibration>
        	HAL_Delay(500);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ec8:	f000 fcbc 	bl	8001844 <HAL_Delay>
		} while (calib.Gyro !=3);
 8000ecc:	787b      	ldrb	r3, [r7, #1]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d1f4      	bne.n	8000ebc <Calibrate_BNO055+0x30>
        printf("Gyroscope calibration complete.\n");
 8000ed2:	4842      	ldr	r0, [pc, #264]	@ (8000fdc <Calibrate_BNO055+0x150>)
 8000ed4:	f004 f974 	bl	80051c0 <puts>

        // Accelerometer calibration
        printf("Calibrating accelerometer...\n");
 8000ed8:	4841      	ldr	r0, [pc, #260]	@ (8000fe0 <Calibrate_BNO055+0x154>)
 8000eda:	f004 f971 	bl	80051c0 <puts>
        printf("Place the device in 6 different stable positions\n");
 8000ede:	4841      	ldr	r0, [pc, #260]	@ (8000fe4 <Calibrate_BNO055+0x158>)
 8000ee0:	f004 f96e 	bl	80051c0 <puts>
        for (int i = 0; i < 6; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	e00c      	b.n	8000f04 <Calibrate_BNO055+0x78>
            printf("Position %d\n", i + 1);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	483d      	ldr	r0, [pc, #244]	@ (8000fe8 <Calibrate_BNO055+0x15c>)
 8000ef2:	f004 f8fd 	bl	80050f0 <iprintf>
            HAL_Delay(1500);  // Simulated accelerometer calibration time
 8000ef6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000efa:	f000 fca3 	bl	8001844 <HAL_Delay>
        for (int i = 0; i < 6; i++) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3301      	adds	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	ddef      	ble.n	8000eea <Calibrate_BNO055+0x5e>
        }

        do {
            getCalibration(&calib);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fec1 	bl	8000c94 <getCalibration>
        	HAL_Delay(500);
 8000f12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f16:	f000 fc95 	bl	8001844 <HAL_Delay>
		} while (calib.Acc !=3);
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d1f4      	bne.n	8000f0a <Calibrate_BNO055+0x7e>
        printf("Accelerometer calibration complete.\n");
 8000f20:	4832      	ldr	r0, [pc, #200]	@ (8000fec <Calibrate_BNO055+0x160>)
 8000f22:	f004 f94d 	bl	80051c0 <puts>

        // Magnetometer calibration
        printf("Calibrating magnetometer...\n");
 8000f26:	4832      	ldr	r0, [pc, #200]	@ (8000ff0 <Calibrate_BNO055+0x164>)
 8000f28:	f004 f94a 	bl	80051c0 <puts>
        printf("Make some random movements\n");
 8000f2c:	4831      	ldr	r0, [pc, #196]	@ (8000ff4 <Calibrate_BNO055+0x168>)
 8000f2e:	f004 f947 	bl	80051c0 <puts>
        HAL_Delay(1000);  // Simulated gyroscope calibration time
 8000f32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f36:	f000 fc85 	bl	8001844 <HAL_Delay>

        do {
            getCalibration(&calib);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fea9 	bl	8000c94 <getCalibration>
        	HAL_Delay(500);
 8000f42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f46:	f000 fc7d 	bl	8001844 <HAL_Delay>
		} while (calib.MAG !=3);
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d1f4      	bne.n	8000f3a <Calibrate_BNO055+0xae>
        printf("Magnetometer calibration complete.\n");
 8000f50:	4829      	ldr	r0, [pc, #164]	@ (8000ff8 <Calibrate_BNO055+0x16c>)
 8000f52:	f004 f935 	bl	80051c0 <puts>

        // System calibration
        printf("Calibrating system...\n");
 8000f56:	4829      	ldr	r0, [pc, #164]	@ (8000ffc <Calibrate_BNO055+0x170>)
 8000f58:	f004 f932 	bl	80051c0 <puts>
        printf("Keep the device stationary until system calibration reaches level 3\n");
 8000f5c:	4828      	ldr	r0, [pc, #160]	@ (8001000 <Calibrate_BNO055+0x174>)
 8000f5e:	f004 f92f 	bl	80051c0 <puts>
        do {
            getCalibration(&calib);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe95 	bl	8000c94 <getCalibration>
        	HAL_Delay(500);
 8000f6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f6e:	f000 fc69 	bl	8001844 <HAL_Delay>
		} while (calib.System !=3);
 8000f72:	783b      	ldrb	r3, [r7, #0]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d1f4      	bne.n	8000f62 <Calibrate_BNO055+0xd6>
        HAL_Delay(500);
 8000f78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f7c:	f000 fc62 	bl	8001844 <HAL_Delay>

        // Check calibration status
        while(!isFullyCalibrated()) HAL_Delay(500);
 8000f80:	e003      	b.n	8000f8a <Calibrate_BNO055+0xfe>
 8000f82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f86:	f000 fc5d 	bl	8001844 <HAL_Delay>
 8000f8a:	f7ff fef1 	bl	8000d70 <isFullyCalibrated>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f3      	bne.n	8000f82 <Calibrate_BNO055+0xf6>
        printf("Sensor is fully calibrated.\n");
 8000f9a:	481a      	ldr	r0, [pc, #104]	@ (8001004 <Calibrate_BNO055+0x178>)
 8000f9c:	f004 f910 	bl	80051c0 <puts>

        printf("System: %d      Gyro: %d       Accel: %d       MAG: %d\n",calib.System,calib.Gyro , calib.Acc, calib.MAG);
 8000fa0:	783b      	ldrb	r3, [r7, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	4618      	mov	r0, r3
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4815      	ldr	r0, [pc, #84]	@ (8001008 <Calibrate_BNO055+0x17c>)
 8000fb4:	f004 f89c 	bl	80050f0 <iprintf>
        if(isFullyCalibrated()) return true;
 8000fb8:	f7ff feda 	bl	8000d70 <isFullyCalibrated>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <Calibrate_BNO055+0x13a>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <Calibrate_BNO055+0x13c>
        else return false;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080060b0 	.word	0x080060b0
 8000fd4:	080060d0 	.word	0x080060d0
 8000fd8:	080060ec 	.word	0x080060ec
 8000fdc:	0800611c 	.word	0x0800611c
 8000fe0:	0800613c 	.word	0x0800613c
 8000fe4:	0800615c 	.word	0x0800615c
 8000fe8:	08006190 	.word	0x08006190
 8000fec:	080061a0 	.word	0x080061a0
 8000ff0:	080061c4 	.word	0x080061c4
 8000ff4:	080061e0 	.word	0x080061e0
 8000ff8:	080061fc 	.word	0x080061fc
 8000ffc:	08006220 	.word	0x08006220
 8001000:	08006238 	.word	0x08006238
 8001004:	0800627c 	.word	0x0800627c
 8001008:	08006298 	.word	0x08006298

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001010:	f000 f92c 	bl	800126c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fb84 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f80e 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f8aa 	bl	8001174 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001020:	f000 f868 	bl	80010f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Init();
 8001024:	f000 f8d0 	bl	80011c8 <Sensor_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ReadData(&BNO055, SENSOR_EULER|SENSOR_ACCEL|SENSOR_GYRO);
 8001028:	2158      	movs	r1, #88	@ 0x58
 800102a:	4802      	ldr	r0, [pc, #8]	@ (8001034 <main+0x28>)
 800102c:	f7ff fa80 	bl	8000530 <ReadData>
 8001030:	e7fa      	b.n	8001028 <main+0x1c>
 8001032:	bf00      	nop
 8001034:	240000dc 	.word	0x240000dc

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09c      	sub	sp, #112	@ 0x70
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	224c      	movs	r2, #76	@ 0x4c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f99a 	bl	8005380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2220      	movs	r2, #32
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 f994 	bl	8005380 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001058:	2002      	movs	r0, #2
 800105a:	f001 fd3f 	bl	8002adc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <SystemClock_Config+0xb8>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <SystemClock_Config+0xb8>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <SystemClock_Config+0xb8>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800107e:	bf00      	nop
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <SystemClock_Config+0xb8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800108c:	d1f8      	bne.n	8001080 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108e:	2302      	movs	r3, #2
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001092:	2301      	movs	r3, #1
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001096:	2340      	movs	r3, #64	@ 0x40
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109a:	2300      	movs	r3, #0
 800109c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fd54 	bl	8002b50 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010ae:	f000 f909 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	233f      	movs	r3, #63	@ 0x3f
 80010b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c6:	2340      	movs	r3, #64	@ 0x40
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2101      	movs	r1, #1
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f914 	bl	8003304 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010e2:	f000 f8ef 	bl	80012c4 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3770      	adds	r7, #112	@ 0x70
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	58024800 	.word	0x58024800

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_I2C1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <MX_I2C1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <MX_I2C1_Init+0x7c>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_I2C1_Init+0x74>)
 800110c:	2201      	movs	r2, #1
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112e:	480e      	ldr	r0, [pc, #56]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001130:	f000 feb0 	bl	8001e94 <HAL_I2C_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800113a:	f000 f8c3 	bl	80012c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800113e:	2100      	movs	r1, #0
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001142:	f001 fc33 	bl	80029ac <HAL_I2CEx_ConfigAnalogFilter>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800114c:	f000 f8ba 	bl	80012c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_I2C1_Init+0x74>)
 8001154:	f001 fc75 	bl	8002a42 <HAL_I2CEx_ConfigDigitalFilter>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800115e:	f000 f8b1 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	24000088 	.word	0x24000088
 800116c:	40005400 	.word	0x40005400
 8001170:	00707cbb 	.word	0x00707cbb

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_GPIO_Init+0x50>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <MX_GPIO_Init+0x50>)
 8001182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_GPIO_Init+0x50>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_GPIO_Init+0x50>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <MX_GPIO_Init+0x50>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_GPIO_Init+0x50>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	58024400 	.word	0x58024400

080011c8 <Sensor_Init>:

/* USER CODE BEGIN 4 */
void Sensor_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
	BNO_Status_t Status = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2100      	movs	r1, #0
 80011d4:	460a      	mov	r2, r1
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	460a      	mov	r2, r1
 80011da:	709a      	strb	r2, [r3, #2]

	//Init structure definition section
	BNO055_Init_t BNO055_InitStruct = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f8c3 2003 	str.w	r2, [r3, #3]

	//Reset section
	ResetBNO055();
 80011e6:	f7ff f96b 	bl	80004c0 <ResetBNO055>

	/*============================ *BNO055 Initialization* ============================*/

	BNO055_InitStruct.ACC_Range = Range_16G;			//Range_X
 80011ea:	2303      	movs	r3, #3
 80011ec:	72bb      	strb	r3, [r7, #10]
	BNO055_InitStruct.Axis = DEFAULT_AXIS_REMAP;			//value will be entered by looking at the data sheet
 80011ee:	2324      	movs	r3, #36	@ 0x24
 80011f0:	717b      	strb	r3, [r7, #5]
	BNO055_InitStruct.Axis_sign = DEFAULT_AXIS_SIGN;		//value will be entered by looking at the data sheet
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
	BNO055_InitStruct.Clock_Source = CLOCK_EXTERNAL;		//CLOCK_EXTERNAL or CLOCK_INTERNAL
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	727b      	strb	r3, [r7, #9]
	BNO055_InitStruct.Mode = BNO055_NORMAL_MODE;			//BNO055_X_MODE   X:NORMAL, LOWPOWER, SUSPEND
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
	BNO055_InitStruct.OP_Modes = NDOF;
 80011fe:	230c      	movs	r3, #12
 8001200:	723b      	strb	r3, [r7, #8]
	BNO055_InitStruct.Unit_Sel = (UNIT_ORI_ANDROID | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2);
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	713b      	strb	r3, [r7, #4]
									//(UNIT_ORI_X | UNIT_TEMP_X | UNIT_EUL_X | UNIT_GYRO_X | UNIT_ACC_X)
	BNO055_Init(BNO055_InitStruct);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	e893 0003 	ldmia.w	r3, {r0, r1}
 800120c:	f7ff fcda 	bl	8000bc4 <BNO055_Init>
	 *to the registers. In this way, there is no need to calibrate the sensor every time it is powered on.
	 */
	//setSensorOffsets(OffsetDatas);

	/*-=-=-=-=-=-=Calibration Part-=-=-=-=-=-=*/
	if(Calibrate_BNO055())
 8001210:	f7ff fe3c 	bl	8000e8c <Calibrate_BNO055>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <Sensor_Init+0x5a>
	{
		getSensorOffsets(OffsetDatas);
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <Sensor_Init+0x90>)
 800121c:	f7ff fd78 	bl	8000d10 <getSensorOffsets>
 8001220:	e002      	b.n	8001228 <Sensor_Init+0x60>
		//Buzzer(200, 5);
	}
	else
	{
		printf("Sensor calibration failed.\nFailed to retrieve offset data\n");
 8001222:	480e      	ldr	r0, [pc, #56]	@ (800125c <Sensor_Init+0x94>)
 8001224:	f003 ffcc 	bl	80051c0 <puts>
	}

	Check_Status(&Status);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8bf 	bl	80003b0 <Check_Status>
	printf("Selftest Result: %d\t",Status.STresult);
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	4619      	mov	r1, r3
 8001236:	480a      	ldr	r0, [pc, #40]	@ (8001260 <Sensor_Init+0x98>)
 8001238:	f003 ff5a 	bl	80050f0 <iprintf>
	printf("System Status: %d\t",Status.SYSStatus);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	4619      	mov	r1, r3
 8001240:	4808      	ldr	r0, [pc, #32]	@ (8001264 <Sensor_Init+0x9c>)
 8001242:	f003 ff55 	bl	80050f0 <iprintf>
	printf("System Error: %d\n",Status.SYSError);
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	@ (8001268 <Sensor_Init+0xa0>)
 800124c:	f003 ff50 	bl	80050f0 <iprintf>

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	24000134 	.word	0x24000134
 800125c:	080062d0 	.word	0x080062d0
 8001260:	0800630c 	.word	0x0800630c
 8001264:	08006324 	.word	0x08006324
 8001268:	08006338 	.word	0x08006338

0800126c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800127e:	f000 fbe9 	bl	8001a54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001286:	2300      	movs	r3, #0
 8001288:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800128e:	231f      	movs	r3, #31
 8001290:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001292:	2387      	movs	r3, #135	@ 0x87
 8001294:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001296:	2300      	movs	r3, #0
 8001298:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800129a:	2300      	movs	r3, #0
 800129c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ae:	463b      	mov	r3, r7
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fc07 	bl	8001ac4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012b6:	2004      	movs	r0, #4
 80012b8:	f000 fbe4 	bl	8001a84 <HAL_MPU_Enable>

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <Error_Handler+0x8>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_MspInit+0x30>)
 80012d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012dc:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x30>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x30>)
 80012e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	58024400 	.word	0x58024400

08001304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0b8      	sub	sp, #224	@ 0xe0
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	22b8      	movs	r2, #184	@ 0xb8
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f82b 	bl	8005380 <memset>
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a26      	ldr	r2, [pc, #152]	@ (80013c8 <HAL_I2C_MspInit+0xc4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d145      	bne.n	80013c0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001334:	f04f 0208 	mov.w	r2, #8
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb0a 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001356:	f7ff ffb5 	bl	80012c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001360:	4a1a      	ldr	r2, [pc, #104]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001378:	23c0      	movs	r3, #192	@ 0xc0
 800137a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001390:	2304      	movs	r3, #4
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <HAL_I2C_MspInit+0xcc>)
 800139e:	f000 fbd1 	bl	8001b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a8:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 80013aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_I2C_MspInit+0xc8>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	37e0      	adds	r7, #224	@ 0xe0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020400 	.word	0x58020400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f9eb 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e00a      	b.n	800145a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001444:	f3af 8000 	nop.w
 8001448:	4601      	mov	r1, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbf0      	blt.n	8001444 <_read+0x12>
  }

  return len;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e009      	b.n	8001492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf1      	blt.n	800147e <_write+0x12>
  }
  return len;
 800149a:	687b      	ldr	r3, [r7, #4]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_close>:

int _close(int file)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014cc:	605a      	str	r2, [r3, #4]
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_isatty>:

int _isatty(int file)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f003 ff6e 	bl	800541c <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24050000 	.word	0x24050000
 800156c:	00000400 	.word	0x00000400
 8001570:	2400014c 	.word	0x2400014c
 8001574:	240002a0 	.word	0x240002a0

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800157c:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <SystemInit+0x100>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a3d      	ldr	r2, [pc, #244]	@ (8001678 <SystemInit+0x100>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158c:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <SystemInit+0x104>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	2b06      	cmp	r3, #6
 8001596:	d807      	bhi.n	80015a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <SystemInit+0x104>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	4a36      	ldr	r2, [pc, #216]	@ (800167c <SystemInit+0x104>)
 80015a2:	f043 0307 	orr.w	r3, r3, #7
 80015a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a8:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <SystemInit+0x108>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a34      	ldr	r2, [pc, #208]	@ (8001680 <SystemInit+0x108>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <SystemInit+0x108>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <SystemInit+0x108>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4930      	ldr	r1, [pc, #192]	@ (8001680 <SystemInit+0x108>)
 80015c0:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <SystemInit+0x10c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <SystemInit+0x104>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <SystemInit+0x104>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	4a28      	ldr	r2, [pc, #160]	@ (800167c <SystemInit+0x104>)
 80015dc:	f043 0307 	orr.w	r3, r3, #7
 80015e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <SystemInit+0x108>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <SystemInit+0x108>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ee:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <SystemInit+0x108>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <SystemInit+0x108>)
 80015f6:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <SystemInit+0x110>)
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <SystemInit+0x108>)
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <SystemInit+0x114>)
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <SystemInit+0x108>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <SystemInit+0x118>)
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <SystemInit+0x108>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <SystemInit+0x108>)
 800160e:	4a20      	ldr	r2, [pc, #128]	@ (8001690 <SystemInit+0x118>)
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <SystemInit+0x108>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <SystemInit+0x108>)
 800161a:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <SystemInit+0x118>)
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <SystemInit+0x108>)
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <SystemInit+0x108>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <SystemInit+0x108>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <SystemInit+0x108>)
 8001632:	2200      	movs	r2, #0
 8001634:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <SystemInit+0x108>)
 8001638:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800163c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d113      	bne.n	800166c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <SystemInit+0x108>)
 8001646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800164a:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <SystemInit+0x108>)
 800164c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001650:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <SystemInit+0x11c>)
 8001656:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800165a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <SystemInit+0x108>)
 800165e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <SystemInit+0x108>)
 8001664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001668:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	52002000 	.word	0x52002000
 8001680:	58024400 	.word	0x58024400
 8001684:	eaf6ed7f 	.word	0xeaf6ed7f
 8001688:	02020200 	.word	0x02020200
 800168c:	01ff0000 	.word	0x01ff0000
 8001690:	01010280 	.word	0x01010280
 8001694:	52004000 	.word	0x52004000

08001698 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <ExitRun0Mode+0x2c>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <ExitRun0Mode+0x2c>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016a8:	bf00      	nop
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <ExitRun0Mode+0x2c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f9      	beq.n	80016aa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	58024800 	.word	0x58024800

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001704 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016cc:	f7ff ffe4 	bl	8001698 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d0:	f7ff ff52 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f003 fe95 	bl	8005428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fc85 	bl	800100c <main>
  bx  lr
 8001702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001708:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800170c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001710:	080063a0 	.word	0x080063a0
  ldr r2, =_sbss
 8001714:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001718:	240002a0 	.word	0x240002a0

0800171c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC3_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f962 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800172c:	f001 ffa0 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8001730:	4602      	mov	r2, r0
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	4913      	ldr	r1, [pc, #76]	@ (800178c <HAL_Init+0x6c>)
 800173e:	5ccb      	ldrb	r3, [r1, r3]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_Init+0x68>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_Init+0x6c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_Init+0x70>)
 8001762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_Init+0x74>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f814 	bl	8001798 <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e002      	b.n	8001780 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177a:	f7ff fda9 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	0800634c 	.word	0x0800634c
 8001790:	24000004 	.word	0x24000004
 8001794:	24000000 	.word	0x24000000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_InitTick+0x60>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e021      	b.n	80017f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_InitTick+0x64>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_InitTick+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f939 	bl	8001a3a <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f911 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_InitTick+0x68>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2400000c 	.word	0x2400000c
 80017fc:	24000000 	.word	0x24000000
 8001800:	24000008 	.word	0x24000008

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2400000c 	.word	0x2400000c
 8001828:	24000150 	.word	0x24000150

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	24000150 	.word	0x24000150

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2400000c 	.word	0x2400000c

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	05fa0000 	.word	0x05fa0000

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff47 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff5e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffb2 	bl	80019ac <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a58:	f3bf 8f5f 	dmb	sy
}
 8001a5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_MPU_Disable+0x28>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <HAL_MPU_Disable+0x28>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a68:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_MPU_Disable+0x2c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	e000ed90 	.word	0xe000ed90

08001a84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_MPU_Enable+0x38>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_MPU_Enable+0x3c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_MPU_Enable+0x3c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa2:	f3bf 8f4f 	dsb	sy
}
 8001aa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aa8:	f3bf 8f6f 	isb	sy
}
 8001aac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed90 	.word	0xe000ed90
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ae0:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7adb      	ldrb	r3, [r3, #11]
 8001af2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a9b      	ldrb	r3, [r3, #10]
 8001afa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7b5b      	ldrb	r3, [r3, #13]
 8001b02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7b9b      	ldrb	r3, [r3, #14]
 8001b0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7bdb      	ldrb	r3, [r3, #15]
 8001b12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7a5b      	ldrb	r3, [r3, #9]
 8001b1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7a1b      	ldrb	r3, [r3, #8]
 8001b22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b30:	6113      	str	r3, [r2, #16]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed90 	.word	0xe000ed90

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b52:	4b86      	ldr	r3, [pc, #536]	@ (8001d6c <HAL_GPIO_Init+0x228>)
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b56:	e18c      	b.n	8001e72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 817e 	beq.w	8001e6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x44>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80d8 	beq.w	8001e6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_GPIO_Init+0x22c>)
 8001cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d70 <HAL_GPIO_Init+0x22c>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_GPIO_Init+0x22c>)
 8001cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_GPIO_Init+0x230>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_GPIO_Init+0x234>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d04a      	beq.n	8001d9c <HAL_GPIO_Init+0x258>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_GPIO_Init+0x238>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_GPIO_Init+0x23c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d025      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_GPIO_Init+0x240>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01f      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_GPIO_Init+0x244>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a18      	ldr	r2, [pc, #96]	@ (8001d8c <HAL_GPIO_Init+0x248>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <HAL_GPIO_Init+0x24c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a16      	ldr	r2, [pc, #88]	@ (8001d94 <HAL_GPIO_Init+0x250>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <HAL_GPIO_Init+0x254>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x206>
 8001d46:	2309      	movs	r3, #9
 8001d48:	e029      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	e027      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e025      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e023      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e021      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e01f      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e01d      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01b      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e019      	b.n	8001d9e <HAL_GPIO_Init+0x25a>
 8001d6a:	bf00      	nop
 8001d6c:	58000080 	.word	0x58000080
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	58020400 	.word	0x58020400
 8001d80:	58020800 	.word	0x58020800
 8001d84:	58020c00 	.word	0x58020c00
 8001d88:	58021000 	.word	0x58021000
 8001d8c:	58021400 	.word	0x58021400
 8001d90:	58021800 	.word	0x58021800
 8001d94:	58021c00 	.word	0x58021c00
 8001d98:	58022400 	.word	0x58022400
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dae:	4938      	ldr	r1, [pc, #224]	@ (8001e90 <HAL_GPIO_Init+0x34c>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f ae6b 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	58000400 	.word	0x58000400

08001e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e08b      	b.n	8001fbe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fa22 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	e006      	b.n	8001f1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d108      	bne.n	8001f36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	e007      	b.n	8001f46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_I2C_Init+0x134>)
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69d9      	ldr	r1, [r3, #28]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	02008000 	.word	0x02008000

08001fcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 80f9 	bne.w	80021e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_I2C_Mem_Write+0x34>
 8001ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ed      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Write+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0e6      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002022:	f7ff fc03 	bl	800182c <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fac3 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d1      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2221      	movs	r2, #33	@ 0x21
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	@ 0x40
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	893a      	ldrh	r2, [r7, #8]
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f9d3 	bl	8002428 <I2C_RequestMemoryWrite>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0a9      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2bff      	cmp	r3, #255	@ 0xff
 800209c:	d90e      	bls.n	80020bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	@ 0xff
 80020a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	2300      	movs	r3, #0
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fc47 	bl	8002948 <I2C_TransferConfig>
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fc36 	bl	8002948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fac6 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07b      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d034      	beq.n	8002194 <HAL_I2C_Mem_Write+0x1c8>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	2b00      	cmp	r3, #0
 8002130:	d130      	bne.n	8002194 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	2200      	movs	r2, #0
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fa3f 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e04d      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2bff      	cmp	r3, #255	@ 0xff
 8002154:	d90e      	bls.n	8002174 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	22ff      	movs	r2, #255	@ 0xff
 800215a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002160:	b2da      	uxtb	r2, r3
 8002162:	8979      	ldrh	r1, [r7, #10]
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fbeb 	bl	8002948 <I2C_TransferConfig>
 8002172:	e00f      	b.n	8002194 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002182:	b2da      	uxtb	r2, r3
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	2300      	movs	r3, #0
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fbda 	bl	8002948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d19e      	bne.n	80020dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 faac 	bl	8002700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e01a      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2220      	movs	r2, #32
 80021b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_I2C_Mem_Write+0x224>)
 80021c6:	400b      	ands	r3, r1
 80021c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	f040 80fd 	bne.w	8002416 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_I2C_Mem_Read+0x34>
 8002222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0f1      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Mem_Read+0x4e>
 800223e:	2302      	movs	r3, #2
 8002240:	e0ea      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224a:	f7ff faef 	bl	800182c <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2319      	movs	r3, #25
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f9af 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d5      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2222      	movs	r2, #34	@ 0x22
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a3a      	ldr	r2, [r7, #32]
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800228c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002294:	88f8      	ldrh	r0, [r7, #6]
 8002296:	893a      	ldrh	r2, [r7, #8]
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4603      	mov	r3, r0
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f913 	bl	80024d0 <I2C_RequestMemoryRead>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0ad      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2bff      	cmp	r3, #255	@ 0xff
 80022c4:	d90e      	bls.n	80022e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	@ 0xff
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	8979      	ldrh	r1, [r7, #10]
 80022d4:	4b52      	ldr	r3, [pc, #328]	@ (8002420 <HAL_I2C_Mem_Read+0x22c>)
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fb33 	bl	8002948 <I2C_TransferConfig>
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002420 <HAL_I2C_Mem_Read+0x22c>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fb22 	bl	8002948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	2200      	movs	r2, #0
 800230c:	2104      	movs	r1, #4
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f956 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07c      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d034      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x1d0>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d130      	bne.n	80023c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f927 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e04d      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2bff      	cmp	r3, #255	@ 0xff
 8002384:	d90e      	bls.n	80023a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	22ff      	movs	r2, #255	@ 0xff
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	8979      	ldrh	r1, [r7, #10]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fad3 	bl	8002948 <I2C_TransferConfig>
 80023a2:	e00f      	b.n	80023c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fac2 	bl	8002948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d19a      	bne.n	8002304 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f994 	bl	8002700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e01a      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2220      	movs	r2, #32
 80023e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_I2C_Mem_Read+0x230>)
 80023f6:	400b      	ands	r3, r1
 80023f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	80002400 	.word	0x80002400
 8002424:	fe00e800 	.word	0xfe00e800

08002428 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	813b      	strh	r3, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	8979      	ldrh	r1, [r7, #10]
 8002448:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <I2C_RequestMemoryWrite+0xa4>)
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fa79 	bl	8002948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f909 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e02c      	b.n	80024c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	629a      	str	r2, [r3, #40]	@ 0x28
 800247a:	e015      	b.n	80024a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800247c:	893b      	ldrh	r3, [r7, #8]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b29b      	uxth	r3, r3
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8ef 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e012      	b.n	80024c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f884 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	80002000 	.word	0x80002000

080024d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <I2C_RequestMemoryRead+0xa4>)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa26 	bl	8002948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f8b6 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e02c      	b.n	800256a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002516:	893b      	ldrh	r3, [r7, #8]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002520:	e015      	b.n	800254e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002522:	893b      	ldrh	r3, [r7, #8]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f89c 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e012      	b.n	800256a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002544:	893b      	ldrh	r3, [r7, #8]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f831 	bl	80025c0 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	80002000 	.word	0x80002000

08002578 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d103      	bne.n	8002596 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d007      	beq.n	80025b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	619a      	str	r2, [r3, #24]
  }
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d0:	e03b      	b.n	800264a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f8d6 	bl	8002788 <I2C_IsErrorOccurred>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e041      	b.n	800266a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d02d      	beq.n	800264a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f91d 	bl	800182c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnFlagUntilTimeout+0x44>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d122      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	429a      	cmp	r2, r3
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	429a      	cmp	r2, r3
 8002620:	d113      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	429a      	cmp	r2, r3
 8002666:	d0b4      	beq.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800267e:	e033      	b.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f87f 	bl	8002788 <I2C_IsErrorOccurred>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e031      	b.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d025      	beq.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269c:	f7ff f8c6 	bl	800182c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11a      	bne.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d013      	beq.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e007      	b.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d1c4      	bne.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	e02f      	b.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f838 	bl	8002788 <I2C_IsErrorOccurred>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e02d      	b.n	800277e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7ff f883 	bl	800182c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11a      	bne.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b20      	cmp	r3, #32
 8002744:	d013      	beq.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e007      	b.n	800277e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d1c8      	bne.n	800270e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d068      	beq.n	8002886 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2210      	movs	r2, #16
 80027ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027bc:	e049      	b.n	8002852 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d045      	beq.n	8002852 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027c6:	f7ff f831 	bl	800182c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <I2C_IsErrorOccurred+0x54>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13a      	bne.n	8002852 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fe:	d121      	bne.n	8002844 <I2C_IsErrorOccurred+0xbc>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002806:	d01d      	beq.n	8002844 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b20      	cmp	r3, #32
 800280c:	d01a      	beq.n	8002844 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800281c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800281e:	f7ff f805 	bl	800182c <HAL_GetTick>
 8002822:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002824:	e00e      	b.n	8002844 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002826:	f7ff f801 	bl	800182c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b19      	cmp	r3, #25
 8002832:	d907      	bls.n	8002844 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002842:	e006      	b.n	8002852 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d1e9      	bne.n	8002826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d003      	beq.n	8002868 <I2C_IsErrorOccurred+0xe0>
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0aa      	beq.n	80027be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fe3b 	bl	8002578 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <I2C_IsErrorOccurred+0x1bc>)
 800290e:	400b      	ands	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800293a:	4618      	mov	r0, r3
 800293c:	3728      	adds	r7, #40	@ 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	fe00e800 	.word	0xfe00e800

08002948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	4613      	mov	r3, r2
 8002958:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002960:	7a7b      	ldrb	r3, [r7, #9]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002968:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	4313      	orrs	r3, r2
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002976:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	0d5b      	lsrs	r3, r3, #21
 8002982:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <I2C_TransferConfig+0x60>)
 8002988:	430b      	orrs	r3, r1
 800298a:	43db      	mvns	r3, r3
 800298c:	ea02 0103 	and.w	r1, r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	03ff63ff 	.word	0x03ff63ff

080029ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d138      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e032      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d139      	bne.n	8002acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e033      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2224      	movs	r2, #36	@ 0x24
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00a      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af0:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01f      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e01d      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	490f      	ldr	r1, [pc, #60]	@ (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b16:	f7fe fe89 	bl	800182c <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b1e:	f7fe fe85 	bl	800182c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b2c:	d901      	bls.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58024800 	.word	0x58024800

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	@ 0x30
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e3c8      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b70:	4b88      	ldr	r3, [pc, #544]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b7a:	4b86      	ldr	r3, [pc, #536]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d007      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46>
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	2b18      	cmp	r3, #24
 8002b8a:	d110      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b7f      	ldr	r3, [pc, #508]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x12c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3a2      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x76>
 8002bb8:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a75      	ldr	r2, [pc, #468]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b71      	ldr	r3, [pc, #452]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b6e      	ldr	r3, [pc, #440]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6d      	ldr	r2, [pc, #436]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbc>
 8002bf2:	4b68      	ldr	r3, [pc, #416]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a67      	ldr	r2, [pc, #412]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b65      	ldr	r3, [pc, #404]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a64      	ldr	r2, [pc, #400]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	4b61      	ldr	r3, [pc, #388]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a60      	ldr	r2, [pc, #384]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b5e      	ldr	r3, [pc, #376]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fdfe 	bl	800182c <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fdfa 	bl	800182c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	@ 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e356      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c46:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe4>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fdea 	bl	800182c <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fde6 	bl	800182c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e342      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6e:	4b49      	ldr	r3, [pc, #292]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x10c>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 808c 	beq.w	8002da4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c96:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	2b18      	cmp	r3, #24
 8002ca6:	d137      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c8>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d132      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb2:	4b38      	ldr	r3, [pc, #224]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e314      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0219 	bic.w	r2, r3, #25
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	492f      	ldr	r1, [pc, #188]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fda6 	bl	800182c <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fda2 	bl	800182c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e2fe      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4920      	ldr	r1, [pc, #128]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d16:	e045      	b.n	8002da4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d026      	beq.n	8002d6e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d20:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 0219 	bic.w	r2, r3, #25
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4919      	ldr	r1, [pc, #100]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fd7b 	bl	800182c <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fd77 	bl	800182c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e2d3      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	490b      	ldr	r1, [pc, #44]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fd57 	bl	800182c <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe fd53 	bl	800182c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d903      	bls.n	8002d98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e2af      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
 8002d94:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d98:	4b96      	ldr	r3, [pc, #600]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d06a      	beq.n	8002e86 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db0:	4b90      	ldr	r3, [pc, #576]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002db8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dba:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x286>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b18      	cmp	r3, #24
 8002dca:	d11b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd6:	4b87      	ldr	r3, [pc, #540]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x29e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b80      	cmp	r3, #128	@ 0x80
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e282      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dee:	4b81      	ldr	r3, [pc, #516]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	497d      	ldr	r1, [pc, #500]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e0c:	4b79      	ldr	r3, [pc, #484]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a78      	ldr	r2, [pc, #480]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fd08 	bl	800182c <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e20:	f7fe fd04 	bl	800182c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e260      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e32:	4b70      	ldr	r3, [pc, #448]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4969      	ldr	r1, [pc, #420]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
 8002e52:	e018      	b.n	8002e86 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e54:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a66      	ldr	r2, [pc, #408]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fce4 	bl	800182c <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e68:	f7fe fce0 	bl	800182c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e23c      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b56      	ldr	r3, [pc, #344]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	4a55      	ldr	r2, [pc, #340]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fcc1 	bl	800182c <HAL_GetTick>
 8002eaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fcbd 	bl	800182c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e219      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x35e>
 8002ecc:	e018      	b.n	8002f00 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b49      	ldr	r3, [pc, #292]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe fca7 	bl	800182c <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fca3 	bl	800182c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1ff      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d036      	beq.n	8002f7a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d019      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f14:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a36      	ldr	r2, [pc, #216]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f20:	f7fe fc84 	bl	800182c <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f28:	f7fe fc80 	bl	800182c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1dc      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
 8002f46:	e018      	b.n	8002f7a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f54:	f7fe fc6a 	bl	800182c <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f5c:	f7fe fc66 	bl	800182c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1c2      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8086 	beq.w	8003094 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x4a8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_RCC_OscConfig+0x4a8>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f94:	f7fe fc4a 	bl	800182c <HAL_GetTick>
 8002f98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe fc46 	bl	800182c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1a2      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fae:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_RCC_OscConfig+0x4a8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x480>
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fce:	e032      	b.n	8003036 <HAL_RCC_OscConfig+0x4e6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4ac>
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a02      	ldr	r2, [pc, #8]	@ (8002ff4 <HAL_RCC_OscConfig+0x4a4>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	e021      	b.n	8003036 <HAL_RCC_OscConfig+0x4e6>
 8002ff2:	bf00      	nop
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	58024800 	.word	0x58024800
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x4ce>
 8003004:	4b83      	ldr	r3, [pc, #524]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003008:	4a82      	ldr	r2, [pc, #520]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003010:	4b80      	ldr	r3, [pc, #512]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a7f      	ldr	r2, [pc, #508]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x4e6>
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	@ 0x70
 800302a:	4b7a      	ldr	r3, [pc, #488]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a79      	ldr	r2, [pc, #484]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fbf5 	bl	800182c <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fbf1 	bl	800182c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e14b      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800305c:	4b6d      	ldr	r3, [pc, #436]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x4f6>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fe fbdf 	bl	800182c <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe fbdb 	bl	800182c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e135      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003088:	4b62      	ldr	r3, [pc, #392]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 812a 	beq.w	80032f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800309e:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030a6:	2b18      	cmp	r3, #24
 80030a8:	f000 80ba 	beq.w	8003220 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f040 8095 	bne.w	80031e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b57      	ldr	r3, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe fbb3 	bl	800182c <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fbaf 	bl	800182c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e10b      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003218 <HAL_RCC_OscConfig+0x6c8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	430a      	orrs	r2, r1
 80030fc:	4945      	ldr	r1, [pc, #276]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	628b      	str	r3, [r1, #40]	@ 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	3b01      	subs	r3, #1
 8003108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003110:	3b01      	subs	r3, #1
 8003112:	025b      	lsls	r3, r3, #9
 8003114:	b29b      	uxth	r3, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	3b01      	subs	r3, #1
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312a:	3b01      	subs	r3, #1
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003132:	4938      	ldr	r1, [pc, #224]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003138:	4b36      	ldr	r3, [pc, #216]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003144:	4b33      	ldr	r3, [pc, #204]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003148:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCC_OscConfig+0x6cc>)
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003150:	00d2      	lsls	r2, r2, #3
 8003152:	4930      	ldr	r1, [pc, #192]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003158:	4b2e      	ldr	r3, [pc, #184]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	f023 020c 	bic.w	r2, r3, #12
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	492b      	ldr	r1, [pc, #172]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800316a:	4b2a      	ldr	r3, [pc, #168]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f023 0202 	bic.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4927      	ldr	r1, [pc, #156]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800317c:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	4a24      	ldr	r2, [pc, #144]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003188:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800318e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800319e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fb38 	bl	800182c <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe fb34 	bl	800182c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e090      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x670>
 80031de:	e088      	b.n	80032f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fb1e 	bl	800182c <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fb1a 	bl	800182c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e076      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003206:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_RCC_OscConfig+0x6c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a4>
 8003212:	e06e      	b.n	80032f2 <HAL_RCC_OscConfig+0x7a2>
 8003214:	58024400 	.word	0x58024400
 8003218:	fffffc0c 	.word	0xfffffc0c
 800321c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003220:	4b36      	ldr	r3, [pc, #216]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003226:	4b35      	ldr	r3, [pc, #212]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	d031      	beq.n	8003298 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d12a      	bne.n	8003298 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d122      	bne.n	8003298 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d11a      	bne.n	8003298 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	0a5b      	lsrs	r3, r3, #9
 8003266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d111      	bne.n	8003298 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d108      	bne.n	8003298 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0e1b      	lsrs	r3, r3, #24
 800328a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e02b      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d01f      	beq.n	80032f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032b2:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032be:	f7fe fab5 	bl	800182c <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032c4:	bf00      	nop
 80032c6:	f7fe fab1 	bl	800182c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d0f9      	beq.n	80032c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_RCC_OscConfig+0x7b0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032de:	00d2      	lsls	r2, r2, #3
 80032e0:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_RCC_OscConfig+0x7ac>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3730      	adds	r7, #48	@ 0x30
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58024400 	.word	0x58024400
 8003300:	ffff0007 	.word	0xffff0007

08003304 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e19c      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b8a      	ldr	r3, [pc, #552]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b87      	ldr	r3, [pc, #540]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	4985      	ldr	r1, [pc, #532]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b83      	ldr	r3, [pc, #524]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e184      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	4b7b      	ldr	r3, [pc, #492]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003360:	429a      	cmp	r2, r3
 8003362:	d908      	bls.n	8003376 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	4975      	ldr	r1, [pc, #468]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003372:	4313      	orrs	r3, r2
 8003374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d010      	beq.n	80033a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	4b70      	ldr	r3, [pc, #448]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800338e:	429a      	cmp	r2, r3
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003392:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	496a      	ldr	r1, [pc, #424]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033c0:	4b61      	ldr	r3, [pc, #388]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	495e      	ldr	r1, [pc, #376]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	4b59      	ldr	r3, [pc, #356]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ee:	4b56      	ldr	r3, [pc, #344]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4953      	ldr	r1, [pc, #332]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b4d      	ldr	r3, [pc, #308]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	429a      	cmp	r2, r3
 800341a:	d908      	bls.n	800342e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b4a      	ldr	r3, [pc, #296]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f023 020f 	bic.w	r2, r3, #15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4947      	ldr	r1, [pc, #284]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 800342a:	4313      	orrs	r3, r2
 800342c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d055      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800343a:	4b43      	ldr	r3, [pc, #268]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4940      	ldr	r1, [pc, #256]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003448:	4313      	orrs	r3, r2
 800344a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d107      	bne.n	8003464 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003454:	4b3c      	ldr	r3, [pc, #240]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0f6      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346c:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d115      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0ea      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003484:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0de      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003494:	4b2c      	ldr	r3, [pc, #176]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0d6      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a4:	4b28      	ldr	r3, [pc, #160]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f023 0207 	bic.w	r2, r3, #7
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4925      	ldr	r1, [pc, #148]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fe f9b9 	bl	800182c <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fe f9b5 	bl	800182c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0be      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d1eb      	bne.n	80034be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	429a      	cmp	r2, r3
 8003500:	d208      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	490e      	ldr	r1, [pc, #56]	@ (8003548 <HAL_RCC_ClockConfig+0x244>)
 8003510:	4313      	orrs	r3, r2
 8003512:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d214      	bcs.n	800354c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 020f 	bic.w	r2, r3, #15
 800352a:	4906      	ldr	r1, [pc, #24]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_RCC_ClockConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e086      	b.n	8003652 <HAL_RCC_ClockConfig+0x34e>
 8003544:	52002000 	.word	0x52002000
 8003548:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003564:	429a      	cmp	r2, r3
 8003566:	d208      	bcs.n	800357a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003568:	4b3c      	ldr	r3, [pc, #240]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	4939      	ldr	r1, [pc, #228]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 8003576:	4313      	orrs	r3, r2
 8003578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003592:	429a      	cmp	r2, r3
 8003594:	d208      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003596:	4b31      	ldr	r3, [pc, #196]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	492e      	ldr	r1, [pc, #184]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035c4:	4b25      	ldr	r3, [pc, #148]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	4922      	ldr	r1, [pc, #136]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d208      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035f2:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4917      	ldr	r1, [pc, #92]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 8003600:	4313      	orrs	r3, r2
 8003602:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003604:	f000 f834 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b14      	ldr	r3, [pc, #80]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	4912      	ldr	r1, [pc, #72]	@ (8003660 <HAL_RCC_ClockConfig+0x35c>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003622:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <HAL_RCC_ClockConfig+0x358>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <HAL_RCC_ClockConfig+0x35c>)
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <HAL_RCC_ClockConfig+0x360>)
 800363a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800363c:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_RCC_ClockConfig+0x364>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_RCC_ClockConfig+0x368>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe f8a6 	bl	8001798 <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	0800634c 	.word	0x0800634c
 8003664:	24000004 	.word	0x24000004
 8003668:	24000000 	.word	0x24000000
 800366c:	24000008 	.word	0x24000008

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	@ 0x24
 8003674:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003676:	4bb3      	ldr	r3, [pc, #716]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800367e:	2b18      	cmp	r3, #24
 8003680:	f200 8155 	bhi.w	800392e <HAL_RCC_GetSysClockFreq+0x2be>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036f1 	.word	0x080036f1
 8003690:	0800392f 	.word	0x0800392f
 8003694:	0800392f 	.word	0x0800392f
 8003698:	0800392f 	.word	0x0800392f
 800369c:	0800392f 	.word	0x0800392f
 80036a0:	0800392f 	.word	0x0800392f
 80036a4:	0800392f 	.word	0x0800392f
 80036a8:	0800392f 	.word	0x0800392f
 80036ac:	08003717 	.word	0x08003717
 80036b0:	0800392f 	.word	0x0800392f
 80036b4:	0800392f 	.word	0x0800392f
 80036b8:	0800392f 	.word	0x0800392f
 80036bc:	0800392f 	.word	0x0800392f
 80036c0:	0800392f 	.word	0x0800392f
 80036c4:	0800392f 	.word	0x0800392f
 80036c8:	0800392f 	.word	0x0800392f
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800392f 	.word	0x0800392f
 80036d4:	0800392f 	.word	0x0800392f
 80036d8:	0800392f 	.word	0x0800392f
 80036dc:	0800392f 	.word	0x0800392f
 80036e0:	0800392f 	.word	0x0800392f
 80036e4:	0800392f 	.word	0x0800392f
 80036e8:	0800392f 	.word	0x0800392f
 80036ec:	08003723 	.word	0x08003723
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f0:	4b94      	ldr	r3, [pc, #592]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036fc:	4b91      	ldr	r3, [pc, #580]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	4a90      	ldr	r2, [pc, #576]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800370e:	e111      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003710:	4b8d      	ldr	r3, [pc, #564]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003712:	61bb      	str	r3, [r7, #24]
      break;
 8003714:	e10e      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003716:	4b8d      	ldr	r3, [pc, #564]	@ (800394c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003718:	61bb      	str	r3, [r7, #24]
      break;
 800371a:	e10b      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800371c:	4b8c      	ldr	r3, [pc, #560]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800371e:	61bb      	str	r3, [r7, #24]
      break;
 8003720:	e108      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800372c:	4b85      	ldr	r3, [pc, #532]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003736:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003738:	4b82      	ldr	r3, [pc, #520]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003742:	4b80      	ldr	r3, [pc, #512]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003746:	08db      	lsrs	r3, r3, #3
 8003748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80e1 	beq.w	8003928 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b02      	cmp	r3, #2
 800376a:	f000 8083 	beq.w	8003874 <HAL_RCC_GetSysClockFreq+0x204>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b02      	cmp	r3, #2
 8003772:	f200 80a1 	bhi.w	80038b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x114>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d056      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003782:	e099      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003784:	4b6f      	ldr	r3, [pc, #444]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02d      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003790:	4b6c      	ldr	r3, [pc, #432]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	4a6b      	ldr	r2, [pc, #428]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b62      	ldr	r3, [pc, #392]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037ea:	e087      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800382e:	e065      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800395c <HAL_RCC_GetSysClockFreq+0x2ec>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b40      	ldr	r3, [pc, #256]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003872:	e043      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2e4>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b6:	e021      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800395c <HAL_RCC_GetSysClockFreq+0x2ec>
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038da:	ed97 6a02 	vldr	s12, [r7, #8]
 80038de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	0a5b      	lsrs	r3, r3, #9
 8003902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003906:	3301      	adds	r3, #1
 8003908:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003914:	edd7 6a07 	vldr	s13, [r7, #28]
 8003918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003926:	e005      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
      break;
 800392c:	e002      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003930:	61bb      	str	r3, [r7, #24]
      break;
 8003932:	bf00      	nop
  }

  return sysclockfreq;
 8003934:	69bb      	ldr	r3, [r7, #24]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	@ 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
 8003948:	03d09000 	.word	0x03d09000
 800394c:	003d0900 	.word	0x003d0900
 8003950:	017d7840 	.word	0x017d7840
 8003954:	46000000 	.word	0x46000000
 8003958:	4c742400 	.word	0x4c742400
 800395c:	4a742400 	.word	0x4a742400
 8003960:	4bbebc20 	.word	0x4bbebc20

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b0c6      	sub	sp, #280	@ 0x118
 800396a:	af00      	add	r7, sp, #0
 800396c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003988:	2500      	movs	r5, #0
 800398a:	ea54 0305 	orrs.w	r3, r4, r5
 800398e:	d049      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800399a:	d02f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800399c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039a0:	d828      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a6:	d01a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ac:	d822      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b6:	d007      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b8:	e01c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ba:	4bab      	ldr	r3, [pc, #684]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	4aaa      	ldr	r2, [pc, #680]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c6:	e01a      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	3308      	adds	r3, #8
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f967 	bl	8004ca4 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039dc:	e00f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e2:	3328      	adds	r3, #40	@ 0x28
 80039e4:	2102      	movs	r1, #2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa0e 	bl	8004e08 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a06:	4b98      	ldr	r3, [pc, #608]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a14:	4a94      	ldr	r2, [pc, #592]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	ea58 0309 	orrs.w	r3, r8, r9
 8003a38:	d047      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d82a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003aa3 	.word	0x08003aa3
 8003a5c:	08003aa3 	.word	0x08003aa3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a60:	4b81      	ldr	r3, [pc, #516]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	4a80      	ldr	r2, [pc, #512]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e01a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a72:	3308      	adds	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f914 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a88:	3328      	adds	r3, #40	@ 0x28
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 f9bb 	bl	8004e08 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b6e      	ldr	r3, [pc, #440]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab0:	f023 0107 	bic.w	r1, r3, #7
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	4a6b      	ldr	r2, [pc, #428]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003ad6:	f04f 0b00 	mov.w	fp, #0
 8003ada:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ade:	d05b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ae8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003aec:	d03b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003aee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003af2:	d834      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003af4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003af8:	d037      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003afa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003afe:	d82e      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b04:	d033      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b0a:	d828      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b10:	d01a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b16:	d822      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b20:	d007      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003b22:	e01c      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	4a4f      	ldr	r2, [pc, #316]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b30:	e01e      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b36:	3308      	adds	r3, #8
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f8b2 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b46:	e013      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4c:	3328      	adds	r3, #40	@ 0x28
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 f959 	bl	8004e08 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b64:	e004      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b88:	4a37      	ldr	r2, [pc, #220]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8e:	e003      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003bae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d05d      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bc0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003bc4:	d03b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003bc6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003bca:	d834      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bd0:	d037      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003bd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bd6:	d82e      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bdc:	d033      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003bde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003be2:	d828      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003be4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003be8:	d01a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bee:	d822      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf8:	d007      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003bfa:	e01c      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c08:	e01e      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0e:	3308      	adds	r3, #8
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f846 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e013      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c24:	3328      	adds	r3, #40	@ 0x28
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 f8ed 	bl	8004e08 <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c34:	e008      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c60:	4a01      	ldr	r2, [pc, #4]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c66:	e005      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d03a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	2b30      	cmp	r3, #48	@ 0x30
 8003c9c:	d01f      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003c9e:	2b30      	cmp	r3, #48	@ 0x30
 8003ca0:	d819      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d815      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d111      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb2:	4baa      	ldr	r3, [pc, #680]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	4aa9      	ldr	r2, [pc, #676]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 ffeb 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cec:	4b9b      	ldr	r3, [pc, #620]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	4a98      	ldr	r2, [pc, #608]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d051      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d34:	d035      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d3a:	d82e      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d40:	d031      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003d42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d46:	d828      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4c:	d01a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d52:	d822      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5c:	d007      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4b7e      	ldr	r3, [pc, #504]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	4a7d      	ldr	r2, [pc, #500]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	3308      	adds	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 ff94 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d82:	e011      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	3328      	adds	r3, #40	@ 0x28
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f83b 	bl	8004e08 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d98:	e006      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003da0:	e002      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003db0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	4a67      	ldr	r2, [pc, #412]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003dda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003de4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	d053      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003df8:	d033      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003dfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dfe:	d82c      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e04:	d02f      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003e06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e0a:	d826      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e10:	d02b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e16:	d820      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e1c:	d012      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e22:	d81a      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d022      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d115      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	3308      	adds	r3, #8
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 ff34 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e42:	e015      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e48:	3328      	adds	r3, #40	@ 0x28
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ffdb 	bl	8004e08 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e58:	e00a      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e60:	e006      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e62:	bf00      	nop
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e78:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e86:	4a35      	ldr	r2, [pc, #212]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e8c:	e003      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003eac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d058      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec2:	d033      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec8:	d82c      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed4:	d826      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ed6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003eda:	d02b      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003edc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ee0:	d820      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee6:	d012      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eec:	d81a      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d022      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef6:	d115      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efc:	3308      	adds	r3, #8
 8003efe:	2101      	movs	r1, #1
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fecf 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f0c:	e015      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	3328      	adds	r3, #40	@ 0x28
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 ff76 	bl	8004e08 <RCCEx_PLL3_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f22:	e00a      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f2a:	e006      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e004      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10e      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f42:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f52:	4a02      	ldr	r2, [pc, #8]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f58:	e006      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f5a:	bf00      	nop
 8003f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d037      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f92:	d00e      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f98:	d816      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa4:	4bc4      	ldr	r3, [pc, #784]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	4ac3      	ldr	r2, [pc, #780]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fb0:	e00f      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fe72 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fda:	4bb7      	ldr	r3, [pc, #732]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe8:	4ab3      	ldr	r2, [pc, #716]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800400e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004012:	460b      	mov	r3, r1
 8004014:	4313      	orrs	r3, r2
 8004016:	d039      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401e:	2b03      	cmp	r3, #3
 8004020:	d81c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004022:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004065 	.word	0x08004065
 800402c:	08004039 	.word	0x08004039
 8004030:	08004047 	.word	0x08004047
 8004034:	08004065 	.word	0x08004065
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004038:	4b9f      	ldr	r3, [pc, #636]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	4a9e      	ldr	r2, [pc, #632]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004044:	e00f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404a:	3308      	adds	r3, #8
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fe28 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800405a:	e004      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004062:	e000      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800406e:	4b92      	ldr	r3, [pc, #584]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	f023 0103 	bic.w	r1, r3, #3
 8004076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407c:	4a8e      	ldr	r2, [pc, #568]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800407e:	430b      	orrs	r3, r1
 8004080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004082:	e003      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f000 8099 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ae:	4b83      	ldr	r3, [pc, #524]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a82      	ldr	r2, [pc, #520]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ba:	f7fd fbb7 	bl	800182c <HAL_GetTick>
 80040be:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c2:	e00b      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c4:	f7fd fbb2 	bl	800182c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	@ 0x64
 80040d2:	d903      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040da:	e005      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040dc:	4b77      	ldr	r3, [pc, #476]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ed      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80040e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d173      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040f0:	4b71      	ldr	r3, [pc, #452]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040fc:	4053      	eors	r3, r2
 80040fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004106:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004112:	4b69      	ldr	r3, [pc, #420]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	4a68      	ldr	r2, [pc, #416]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800411e:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800412a:	4a63      	ldr	r2, [pc, #396]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004130:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800413a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413e:	d118      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd fb74 	bl	800182c <HAL_GetTick>
 8004144:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004148:	e00d      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fd fb6f 	bl	800182c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	f241 3388 	movw	r3, #5000	@ 0x1388
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004164:	e005      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004166:	4b54      	ldr	r3, [pc, #336]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0eb      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004176:	2b00      	cmp	r3, #0
 8004178:	d129      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800418a:	d10e      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800418c:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800419c:	091a      	lsrs	r2, r3, #4
 800419e:	4b48      	ldr	r3, [pc, #288]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	4a45      	ldr	r2, [pc, #276]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6113      	str	r3, [r2, #16]
 80041a8:	e005      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80041aa:	4b43      	ldr	r3, [pc, #268]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4a42      	ldr	r2, [pc, #264]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041b4:	6113      	str	r3, [r2, #16]
 80041b6:	4b40      	ldr	r3, [pc, #256]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80041ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c6:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 0301 	and.w	r3, r2, #1
 80041ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80041f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f000 808f 	beq.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004208:	2b28      	cmp	r3, #40	@ 0x28
 800420a:	d871      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800420c:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	080042f9 	.word	0x080042f9
 8004218:	080042f1 	.word	0x080042f1
 800421c:	080042f1 	.word	0x080042f1
 8004220:	080042f1 	.word	0x080042f1
 8004224:	080042f1 	.word	0x080042f1
 8004228:	080042f1 	.word	0x080042f1
 800422c:	080042f1 	.word	0x080042f1
 8004230:	080042f1 	.word	0x080042f1
 8004234:	080042c5 	.word	0x080042c5
 8004238:	080042f1 	.word	0x080042f1
 800423c:	080042f1 	.word	0x080042f1
 8004240:	080042f1 	.word	0x080042f1
 8004244:	080042f1 	.word	0x080042f1
 8004248:	080042f1 	.word	0x080042f1
 800424c:	080042f1 	.word	0x080042f1
 8004250:	080042f1 	.word	0x080042f1
 8004254:	080042db 	.word	0x080042db
 8004258:	080042f1 	.word	0x080042f1
 800425c:	080042f1 	.word	0x080042f1
 8004260:	080042f1 	.word	0x080042f1
 8004264:	080042f1 	.word	0x080042f1
 8004268:	080042f1 	.word	0x080042f1
 800426c:	080042f1 	.word	0x080042f1
 8004270:	080042f1 	.word	0x080042f1
 8004274:	080042f9 	.word	0x080042f9
 8004278:	080042f1 	.word	0x080042f1
 800427c:	080042f1 	.word	0x080042f1
 8004280:	080042f1 	.word	0x080042f1
 8004284:	080042f1 	.word	0x080042f1
 8004288:	080042f1 	.word	0x080042f1
 800428c:	080042f1 	.word	0x080042f1
 8004290:	080042f1 	.word	0x080042f1
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042f1 	.word	0x080042f1
 800429c:	080042f1 	.word	0x080042f1
 80042a0:	080042f1 	.word	0x080042f1
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	080042f1 	.word	0x080042f1
 80042ac:	080042f1 	.word	0x080042f1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	58024400 	.word	0x58024400
 80042bc:	58024800 	.word	0x58024800
 80042c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c8:	3308      	adds	r3, #8
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fce9 	bl	8004ca4 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042d8:	e00f      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	3328      	adds	r3, #40	@ 0x28
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fd90 	bl	8004e08 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042ee:	e004      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042f6:	e000      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80042f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004302:	4bbf      	ldr	r3, [pc, #764]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800430a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004310:	4abb      	ldr	r2, [pc, #748]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004312:	430b      	orrs	r3, r1
 8004314:	6553      	str	r3, [r2, #84]	@ 0x54
 8004316:	e003      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f002 0302 	and.w	r3, r2, #2
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004336:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800433a:	460b      	mov	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	d041      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004346:	2b05      	cmp	r3, #5
 8004348:	d824      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800434a:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	0800439d 	.word	0x0800439d
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437f 	.word	0x0800437f
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	3308      	adds	r3, #8
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc97 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fd3e 	bl	8004e08 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043a6:	4b96      	ldr	r3, [pc, #600]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	f023 0107 	bic.w	r1, r3, #7
 80043ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b4:	4a92      	ldr	r2, [pc, #584]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f002 0304 	and.w	r3, r2, #4
 80043d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d044      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d825      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004411 	.word	0x08004411
 8004400:	08004427 	.word	0x08004427
 8004404:	08004445 	.word	0x08004445
 8004408:	08004445 	.word	0x08004445
 800440c:	08004445 	.word	0x08004445
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	3308      	adds	r3, #8
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fc43 	bl	8004ca4 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	3328      	adds	r3, #40	@ 0x28
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fcea 	bl	8004e08 <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800444e:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004452:	f023 0107 	bic.w	r1, r3, #7
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	4a68      	ldr	r2, [pc, #416]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6593      	str	r3, [r2, #88]	@ 0x58
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800446a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f002 0320 	and.w	r3, r2, #32
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004484:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d055      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800448e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800449a:	d033      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a0:	d82c      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d02f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d826      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044b2:	d02b      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80044b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044b8:	d820      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044be:	d012      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044c4:	d81a      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d022      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ce:	d115      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d4:	3308      	adds	r3, #8
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fbe3 	bl	8004ca4 <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044e4:	e015      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ea:	3328      	adds	r3, #40	@ 0x28
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fc8a 	bl	8004e08 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044fa:	e00a      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004502:	e006      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451a:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800452a:	4a35      	ldr	r2, [pc, #212]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800452c:	430b      	orrs	r3, r1
 800452e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004536:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004546:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004550:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d058      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004562:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004566:	d033      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004568:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800456c:	d82c      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004572:	d02f      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004578:	d826      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800457a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457e:	d02b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004584:	d820      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458a:	d012      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004590:	d81a      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d022      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459a:	d115      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800459c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a0:	3308      	adds	r3, #8
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fb7d 	bl	8004ca4 <RCCEx_PLL2_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045b0:	e015      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	3328      	adds	r3, #40	@ 0x28
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fc24 	bl	8004e08 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045c6:	e00a      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045ce:	e006      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045d0:	bf00      	nop
 80045d2:	e004      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045d4:	bf00      	nop
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045e6:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f6:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004608:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004622:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d055      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800462c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004634:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004638:	d033      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800463a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800463e:	d82c      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004644:	d02f      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464a:	d826      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800464c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004650:	d02b      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004652:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004656:	d820      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800465c:	d012      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004662:	d81a      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d115      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004672:	3308      	adds	r3, #8
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb14 	bl	8004ca4 <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004688:	3328      	adds	r3, #40	@ 0x28
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fbbb 	bl	8004e08 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046a2:	bf00      	nop
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046b8:	4ba0      	ldr	r3, [pc, #640]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046c8:	4a9c      	ldr	r2, [pc, #624]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 0308 	and.w	r3, r2, #8
 80046e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d01e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470a:	3328      	adds	r3, #40	@ 0x28
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb7a 	bl	8004e08 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004720:	4b86      	ldr	r3, [pc, #536]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004730:	4a82      	ldr	r2, [pc, #520]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f002 0310 	and.w	r3, r2, #16
 8004742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004746:	2300      	movs	r3, #0
 8004748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800474c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d01e      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	3328      	adds	r3, #40	@ 0x28
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fb4b 	bl	8004e08 <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477e:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478e:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80047a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047a2:	2300      	movs	r3, #0
 80047a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d03e      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047bc:	d022      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80047be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047c2:	d81b      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80047ce:	e015      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	3308      	adds	r3, #8
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa63 	bl	8004ca4 <RCCEx_PLL2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047e4:	e00f      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ea:	3328      	adds	r3, #40	@ 0x28
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb0a 	bl	8004e08 <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004806:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800480e:	4b4b      	ldr	r3, [pc, #300]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004812:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800481e:	4a47      	ldr	r2, [pc, #284]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004820:	430b      	orrs	r3, r1
 8004822:	6593      	str	r3, [r2, #88]	@ 0x58
 8004824:	e003      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800482a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800483a:	673b      	str	r3, [r7, #112]	@ 0x70
 800483c:	2300      	movs	r3, #0
 800483e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004840:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d03b      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800484a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004856:	d01f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800485c:	d818      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004868:	d007      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800486a:	e011      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486c:	4b33      	ldr	r3, [pc, #204]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	4a32      	ldr	r2, [pc, #200]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004878:	e00f      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487e:	3328      	adds	r3, #40	@ 0x28
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fac0 	bl	8004e08 <RCCEx_PLL3_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a2:	4b26      	ldr	r3, [pc, #152]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b2:	4a22      	ldr	r2, [pc, #136]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80048ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048d0:	2300      	movs	r3, #0
 80048d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d034      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ec:	d007      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f0:	4b12      	ldr	r3, [pc, #72]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	4a11      	ldr	r2, [pc, #68]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048fc:	e00e      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004902:	3308      	adds	r3, #8
 8004904:	2102      	movs	r1, #2
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f9cc 	bl	8004ca4 <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004932:	4a02      	ldr	r2, [pc, #8]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004934:	430b      	orrs	r3, r1
 8004936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004938:	e006      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004954:	663b      	str	r3, [r7, #96]	@ 0x60
 8004956:	2300      	movs	r3, #0
 8004958:	667b      	str	r3, [r7, #100]	@ 0x64
 800495a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d00c      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	3328      	adds	r3, #40	@ 0x28
 800496a:	2102      	movs	r1, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fa4b 	bl	8004e08 <RCCEx_PLL3_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800497e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800498a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800498c:	2300      	movs	r3, #0
 800498e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004990:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004994:	460b      	mov	r3, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	d036      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800499a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a4:	d018      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049aa:	d811      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b0:	d014      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b6:	d80b      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d011      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c2:	4bb7      	ldr	r3, [pc, #732]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	4ab6      	ldr	r2, [pc, #728]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049d6:	e004      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ea:	4bad      	ldr	r3, [pc, #692]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f8:	4aa9      	ldr	r2, [pc, #676]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a16:	2300      	movs	r3, #0
 8004a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a24:	4b9e      	ldr	r3, [pc, #632]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	4a9b      	ldr	r2, [pc, #620]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a46:	2300      	movs	r3, #0
 8004a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a54:	4b92      	ldr	r3, [pc, #584]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a58:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a62:	4a8f      	ldr	r2, [pc, #572]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	2300      	movs	r3, #0
 8004a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a84:	4b86      	ldr	r3, [pc, #536]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4a85      	ldr	r2, [pc, #532]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a8e:	6113      	str	r3, [r2, #16]
 8004a90:	4b83      	ldr	r3, [pc, #524]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a92:	6919      	ldr	r1, [r3, #16]
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a9c:	4a80      	ldr	r2, [pc, #512]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004abe:	4b78      	ldr	r3, [pc, #480]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	4a74      	ldr	r2, [pc, #464]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afe:	4a68      	ldr	r2, [pc, #416]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d011      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b24:	3308      	adds	r3, #8
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f8bb 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	6239      	str	r1, [r7, #32]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d011      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	3308      	adds	r3, #8
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f89b 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	61b9      	str	r1, [r7, #24]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d011      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f87b 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6139      	str	r1, [r7, #16]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d011      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be4:	3328      	adds	r3, #40	@ 0x28
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f90d 	bl	8004e08 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d011      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	3328      	adds	r3, #40	@ 0x28
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f8ed 	bl	8004e08 <RCCEx_PLL3_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	6039      	str	r1, [r7, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	d011      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c64:	3328      	adds	r3, #40	@ 0x28
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f8cd 	bl	8004e08 <RCCEx_PLL3_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004c84:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400

08004ca4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d101      	bne.n	8004cc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e099      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc fdad 	bl	800182c <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cd6:	f7fc fda9 	bl	800182c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e086      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ce8:	4b45      	ldr	r3, [pc, #276]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cf4:	4b42      	ldr	r3, [pc, #264]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	493f      	ldr	r1, [pc, #252]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d38:	4931      	ldr	r1, [pc, #196]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d3e:	4b30      	ldr	r3, [pc, #192]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	492d      	ldr	r1, [pc, #180]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f023 0220 	bic.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4928      	ldr	r1, [pc, #160]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a26      	ldr	r2, [pc, #152]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d72:	4b24      	ldr	r3, [pc, #144]	@ (8004e04 <RCCEx_PLL2_Config+0x160>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	69d2      	ldr	r2, [r2, #28]
 8004d7a:	00d2      	lsls	r2, r2, #3
 8004d7c:	4920      	ldr	r1, [pc, #128]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d82:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a1e      	ldr	r2, [pc, #120]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f043 0310 	orr.w	r3, r3, #16
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d94:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004da0:	e00f      	b.n	8004dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004da8:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004db4:	e005      	b.n	8004dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004db6:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a11      	ldr	r2, [pc, #68]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dce:	f7fc fd2d 	bl	800182c <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dd4:	e008      	b.n	8004de8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dd6:	f7fc fd29 	bl	800182c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	ffff0007 	.word	0xffff0007

08004e08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	4b53      	ldr	r3, [pc, #332]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d101      	bne.n	8004e26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e099      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e26:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc fcfb 	bl	800182c <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e3a:	f7fc fcf7 	bl	800182c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e086      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e58:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e9c:	4931      	ldr	r1, [pc, #196]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ea2:	4b30      	ldr	r3, [pc, #192]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	492d      	ldr	r1, [pc, #180]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4928      	ldr	r1, [pc, #160]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ec6:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a26      	ldr	r2, [pc, #152]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed6:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <RCCEx_PLL3_Config+0x160>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69d2      	ldr	r2, [r2, #28]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	4920      	ldr	r1, [pc, #128]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f04:	e00f      	b.n	8004f26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f18:	e005      	b.n	8004f26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f1a:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f26:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f32:	f7fc fc7b 	bl	800182c <HAL_GetTick>
 8004f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f3a:	f7fc fc77 	bl	800182c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	ffff0007 	.word	0xffff0007

08004f6c <std>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	4604      	mov	r4, r0
 8004f72:	e9c0 3300 	strd	r3, r3, [r0]
 8004f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7a:	6083      	str	r3, [r0, #8]
 8004f7c:	8181      	strh	r1, [r0, #12]
 8004f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f80:	81c2      	strh	r2, [r0, #14]
 8004f82:	6183      	str	r3, [r0, #24]
 8004f84:	4619      	mov	r1, r3
 8004f86:	2208      	movs	r2, #8
 8004f88:	305c      	adds	r0, #92	@ 0x5c
 8004f8a:	f000 f9f9 	bl	8005380 <memset>
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <std+0x58>)
 8004f90:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <std+0x5c>)
 8004f94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f96:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <std+0x60>)
 8004f98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <std+0x64>)
 8004f9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <std+0x68>)
 8004fa0:	6224      	str	r4, [r4, #32]
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d006      	beq.n	8004fb4 <std+0x48>
 8004fa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004faa:	4294      	cmp	r4, r2
 8004fac:	d002      	beq.n	8004fb4 <std+0x48>
 8004fae:	33d0      	adds	r3, #208	@ 0xd0
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	d105      	bne.n	8004fc0 <std+0x54>
 8004fb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f000 ba58 	b.w	8005470 <__retarget_lock_init_recursive>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	080051d1 	.word	0x080051d1
 8004fc8:	080051f3 	.word	0x080051f3
 8004fcc:	0800522b 	.word	0x0800522b
 8004fd0:	0800524f 	.word	0x0800524f
 8004fd4:	24000154 	.word	0x24000154

08004fd8 <stdio_exit_handler>:
 8004fd8:	4a02      	ldr	r2, [pc, #8]	@ (8004fe4 <stdio_exit_handler+0xc>)
 8004fda:	4903      	ldr	r1, [pc, #12]	@ (8004fe8 <stdio_exit_handler+0x10>)
 8004fdc:	4803      	ldr	r0, [pc, #12]	@ (8004fec <stdio_exit_handler+0x14>)
 8004fde:	f000 b869 	b.w	80050b4 <_fwalk_sglue>
 8004fe2:	bf00      	nop
 8004fe4:	24000010 	.word	0x24000010
 8004fe8:	08005d11 	.word	0x08005d11
 8004fec:	24000020 	.word	0x24000020

08004ff0 <cleanup_stdio>:
 8004ff0:	6841      	ldr	r1, [r0, #4]
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <cleanup_stdio+0x34>)
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	d001      	beq.n	8005000 <cleanup_stdio+0x10>
 8004ffc:	f000 fe88 	bl	8005d10 <_fflush_r>
 8005000:	68a1      	ldr	r1, [r4, #8]
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <cleanup_stdio+0x38>)
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <cleanup_stdio+0x1e>
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fe81 	bl	8005d10 <_fflush_r>
 800500e:	68e1      	ldr	r1, [r4, #12]
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <cleanup_stdio+0x3c>)
 8005012:	4299      	cmp	r1, r3
 8005014:	d004      	beq.n	8005020 <cleanup_stdio+0x30>
 8005016:	4620      	mov	r0, r4
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	f000 be78 	b.w	8005d10 <_fflush_r>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	bf00      	nop
 8005024:	24000154 	.word	0x24000154
 8005028:	240001bc 	.word	0x240001bc
 800502c:	24000224 	.word	0x24000224

08005030 <global_stdio_init.part.0>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <global_stdio_init.part.0+0x30>)
 8005034:	4c0b      	ldr	r4, [pc, #44]	@ (8005064 <global_stdio_init.part.0+0x34>)
 8005036:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <global_stdio_init.part.0+0x38>)
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	2200      	movs	r2, #0
 800503e:	2104      	movs	r1, #4
 8005040:	f7ff ff94 	bl	8004f6c <std>
 8005044:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005048:	2201      	movs	r2, #1
 800504a:	2109      	movs	r1, #9
 800504c:	f7ff ff8e 	bl	8004f6c <std>
 8005050:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005054:	2202      	movs	r2, #2
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505a:	2112      	movs	r1, #18
 800505c:	f7ff bf86 	b.w	8004f6c <std>
 8005060:	2400028c 	.word	0x2400028c
 8005064:	24000154 	.word	0x24000154
 8005068:	08004fd9 	.word	0x08004fd9

0800506c <__sfp_lock_acquire>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__sfp_lock_acquire+0x8>)
 800506e:	f000 ba00 	b.w	8005472 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	24000295 	.word	0x24000295

08005078 <__sfp_lock_release>:
 8005078:	4801      	ldr	r0, [pc, #4]	@ (8005080 <__sfp_lock_release+0x8>)
 800507a:	f000 b9fb 	b.w	8005474 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	24000295 	.word	0x24000295

08005084 <__sinit>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	f7ff fff0 	bl	800506c <__sfp_lock_acquire>
 800508c:	6a23      	ldr	r3, [r4, #32]
 800508e:	b11b      	cbz	r3, 8005098 <__sinit+0x14>
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	f7ff bff0 	b.w	8005078 <__sfp_lock_release>
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__sinit+0x28>)
 800509a:	6223      	str	r3, [r4, #32]
 800509c:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <__sinit+0x2c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f5      	bne.n	8005090 <__sinit+0xc>
 80050a4:	f7ff ffc4 	bl	8005030 <global_stdio_init.part.0>
 80050a8:	e7f2      	b.n	8005090 <__sinit+0xc>
 80050aa:	bf00      	nop
 80050ac:	08004ff1 	.word	0x08004ff1
 80050b0:	2400028c 	.word	0x2400028c

080050b4 <_fwalk_sglue>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	4607      	mov	r7, r0
 80050ba:	4688      	mov	r8, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	2600      	movs	r6, #0
 80050c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c4:	f1b9 0901 	subs.w	r9, r9, #1
 80050c8:	d505      	bpl.n	80050d6 <_fwalk_sglue+0x22>
 80050ca:	6824      	ldr	r4, [r4, #0]
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d1f7      	bne.n	80050c0 <_fwalk_sglue+0xc>
 80050d0:	4630      	mov	r0, r6
 80050d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d907      	bls.n	80050ec <_fwalk_sglue+0x38>
 80050dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050e0:	3301      	adds	r3, #1
 80050e2:	d003      	beq.n	80050ec <_fwalk_sglue+0x38>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	4306      	orrs	r6, r0
 80050ec:	3568      	adds	r5, #104	@ 0x68
 80050ee:	e7e9      	b.n	80050c4 <_fwalk_sglue+0x10>

080050f0 <iprintf>:
 80050f0:	b40f      	push	{r0, r1, r2, r3}
 80050f2:	b507      	push	{r0, r1, r2, lr}
 80050f4:	4906      	ldr	r1, [pc, #24]	@ (8005110 <iprintf+0x20>)
 80050f6:	ab04      	add	r3, sp, #16
 80050f8:	6808      	ldr	r0, [r1, #0]
 80050fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fe:	6881      	ldr	r1, [r0, #8]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	f000 fadb 	bl	80056bc <_vfiprintf_r>
 8005106:	b003      	add	sp, #12
 8005108:	f85d eb04 	ldr.w	lr, [sp], #4
 800510c:	b004      	add	sp, #16
 800510e:	4770      	bx	lr
 8005110:	2400001c 	.word	0x2400001c

08005114 <_puts_r>:
 8005114:	6a03      	ldr	r3, [r0, #32]
 8005116:	b570      	push	{r4, r5, r6, lr}
 8005118:	6884      	ldr	r4, [r0, #8]
 800511a:	4605      	mov	r5, r0
 800511c:	460e      	mov	r6, r1
 800511e:	b90b      	cbnz	r3, 8005124 <_puts_r+0x10>
 8005120:	f7ff ffb0 	bl	8005084 <__sinit>
 8005124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005126:	07db      	lsls	r3, r3, #31
 8005128:	d405      	bmi.n	8005136 <_puts_r+0x22>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0598      	lsls	r0, r3, #22
 800512e:	d402      	bmi.n	8005136 <_puts_r+0x22>
 8005130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005132:	f000 f99e 	bl	8005472 <__retarget_lock_acquire_recursive>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	0719      	lsls	r1, r3, #28
 800513a:	d502      	bpl.n	8005142 <_puts_r+0x2e>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d135      	bne.n	80051ae <_puts_r+0x9a>
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 f8c5 	bl	80052d4 <__swsetup_r>
 800514a:	b380      	cbz	r0, 80051ae <_puts_r+0x9a>
 800514c:	f04f 35ff 	mov.w	r5, #4294967295
 8005150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005152:	07da      	lsls	r2, r3, #31
 8005154:	d405      	bmi.n	8005162 <_puts_r+0x4e>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	059b      	lsls	r3, r3, #22
 800515a:	d402      	bmi.n	8005162 <_puts_r+0x4e>
 800515c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800515e:	f000 f989 	bl	8005474 <__retarget_lock_release_recursive>
 8005162:	4628      	mov	r0, r5
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	2b00      	cmp	r3, #0
 8005168:	da04      	bge.n	8005174 <_puts_r+0x60>
 800516a:	69a2      	ldr	r2, [r4, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	dc17      	bgt.n	80051a0 <_puts_r+0x8c>
 8005170:	290a      	cmp	r1, #10
 8005172:	d015      	beq.n	80051a0 <_puts_r+0x8c>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	6022      	str	r2, [r4, #0]
 800517a:	7019      	strb	r1, [r3, #0]
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005182:	3b01      	subs	r3, #1
 8005184:	60a3      	str	r3, [r4, #8]
 8005186:	2900      	cmp	r1, #0
 8005188:	d1ed      	bne.n	8005166 <_puts_r+0x52>
 800518a:	2b00      	cmp	r3, #0
 800518c:	da11      	bge.n	80051b2 <_puts_r+0x9e>
 800518e:	4622      	mov	r2, r4
 8005190:	210a      	movs	r1, #10
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f85f 	bl	8005256 <__swbuf_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d0d7      	beq.n	800514c <_puts_r+0x38>
 800519c:	250a      	movs	r5, #10
 800519e:	e7d7      	b.n	8005150 <_puts_r+0x3c>
 80051a0:	4622      	mov	r2, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 f857 	bl	8005256 <__swbuf_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1e7      	bne.n	800517c <_puts_r+0x68>
 80051ac:	e7ce      	b.n	800514c <_puts_r+0x38>
 80051ae:	3e01      	subs	r6, #1
 80051b0:	e7e4      	b.n	800517c <_puts_r+0x68>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	220a      	movs	r2, #10
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e7ee      	b.n	800519c <_puts_r+0x88>
	...

080051c0 <puts>:
 80051c0:	4b02      	ldr	r3, [pc, #8]	@ (80051cc <puts+0xc>)
 80051c2:	4601      	mov	r1, r0
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	f7ff bfa5 	b.w	8005114 <_puts_r>
 80051ca:	bf00      	nop
 80051cc:	2400001c 	.word	0x2400001c

080051d0 <__sread>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	460c      	mov	r4, r1
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	f000 f8fc 	bl	80053d4 <_read_r>
 80051dc:	2800      	cmp	r0, #0
 80051de:	bfab      	itete	ge
 80051e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051e2:	89a3      	ldrhlt	r3, [r4, #12]
 80051e4:	181b      	addge	r3, r3, r0
 80051e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051ea:	bfac      	ite	ge
 80051ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051ee:	81a3      	strhlt	r3, [r4, #12]
 80051f0:	bd10      	pop	{r4, pc}

080051f2 <__swrite>:
 80051f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	461f      	mov	r7, r3
 80051f8:	898b      	ldrh	r3, [r1, #12]
 80051fa:	05db      	lsls	r3, r3, #23
 80051fc:	4605      	mov	r5, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	4616      	mov	r6, r2
 8005202:	d505      	bpl.n	8005210 <__swrite+0x1e>
 8005204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005208:	2302      	movs	r3, #2
 800520a:	2200      	movs	r2, #0
 800520c:	f000 f8d0 	bl	80053b0 <_lseek_r>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	4632      	mov	r2, r6
 800521e:	463b      	mov	r3, r7
 8005220:	4628      	mov	r0, r5
 8005222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005226:	f000 b8e7 	b.w	80053f8 <_write_r>

0800522a <__sseek>:
 800522a:	b510      	push	{r4, lr}
 800522c:	460c      	mov	r4, r1
 800522e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005232:	f000 f8bd 	bl	80053b0 <_lseek_r>
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	bf15      	itete	ne
 800523c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800523e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005246:	81a3      	strheq	r3, [r4, #12]
 8005248:	bf18      	it	ne
 800524a:	81a3      	strhne	r3, [r4, #12]
 800524c:	bd10      	pop	{r4, pc}

0800524e <__sclose>:
 800524e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005252:	f000 b89d 	b.w	8005390 <_close_r>

08005256 <__swbuf_r>:
 8005256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005258:	460e      	mov	r6, r1
 800525a:	4614      	mov	r4, r2
 800525c:	4605      	mov	r5, r0
 800525e:	b118      	cbz	r0, 8005268 <__swbuf_r+0x12>
 8005260:	6a03      	ldr	r3, [r0, #32]
 8005262:	b90b      	cbnz	r3, 8005268 <__swbuf_r+0x12>
 8005264:	f7ff ff0e 	bl	8005084 <__sinit>
 8005268:	69a3      	ldr	r3, [r4, #24]
 800526a:	60a3      	str	r3, [r4, #8]
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	071a      	lsls	r2, r3, #28
 8005270:	d501      	bpl.n	8005276 <__swbuf_r+0x20>
 8005272:	6923      	ldr	r3, [r4, #16]
 8005274:	b943      	cbnz	r3, 8005288 <__swbuf_r+0x32>
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f82b 	bl	80052d4 <__swsetup_r>
 800527e:	b118      	cbz	r0, 8005288 <__swbuf_r+0x32>
 8005280:	f04f 37ff 	mov.w	r7, #4294967295
 8005284:	4638      	mov	r0, r7
 8005286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	1a98      	subs	r0, r3, r2
 800528e:	6963      	ldr	r3, [r4, #20]
 8005290:	b2f6      	uxtb	r6, r6
 8005292:	4283      	cmp	r3, r0
 8005294:	4637      	mov	r7, r6
 8005296:	dc05      	bgt.n	80052a4 <__swbuf_r+0x4e>
 8005298:	4621      	mov	r1, r4
 800529a:	4628      	mov	r0, r5
 800529c:	f000 fd38 	bl	8005d10 <_fflush_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d1ed      	bne.n	8005280 <__swbuf_r+0x2a>
 80052a4:	68a3      	ldr	r3, [r4, #8]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	60a3      	str	r3, [r4, #8]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	701e      	strb	r6, [r3, #0]
 80052b2:	6962      	ldr	r2, [r4, #20]
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d004      	beq.n	80052c4 <__swbuf_r+0x6e>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d5e1      	bpl.n	8005284 <__swbuf_r+0x2e>
 80052c0:	2e0a      	cmp	r6, #10
 80052c2:	d1df      	bne.n	8005284 <__swbuf_r+0x2e>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 fd22 	bl	8005d10 <_fflush_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0d9      	beq.n	8005284 <__swbuf_r+0x2e>
 80052d0:	e7d6      	b.n	8005280 <__swbuf_r+0x2a>
	...

080052d4 <__swsetup_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4b29      	ldr	r3, [pc, #164]	@ (800537c <__swsetup_r+0xa8>)
 80052d8:	4605      	mov	r5, r0
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	460c      	mov	r4, r1
 80052de:	b118      	cbz	r0, 80052e8 <__swsetup_r+0x14>
 80052e0:	6a03      	ldr	r3, [r0, #32]
 80052e2:	b90b      	cbnz	r3, 80052e8 <__swsetup_r+0x14>
 80052e4:	f7ff fece 	bl	8005084 <__sinit>
 80052e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ec:	0719      	lsls	r1, r3, #28
 80052ee:	d422      	bmi.n	8005336 <__swsetup_r+0x62>
 80052f0:	06da      	lsls	r2, r3, #27
 80052f2:	d407      	bmi.n	8005304 <__swsetup_r+0x30>
 80052f4:	2209      	movs	r2, #9
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005302:	e033      	b.n	800536c <__swsetup_r+0x98>
 8005304:	0758      	lsls	r0, r3, #29
 8005306:	d512      	bpl.n	800532e <__swsetup_r+0x5a>
 8005308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800530a:	b141      	cbz	r1, 800531e <__swsetup_r+0x4a>
 800530c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005310:	4299      	cmp	r1, r3
 8005312:	d002      	beq.n	800531a <__swsetup_r+0x46>
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f8af 	bl	8005478 <_free_r>
 800531a:	2300      	movs	r3, #0
 800531c:	6363      	str	r3, [r4, #52]	@ 0x34
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	2300      	movs	r3, #0
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f043 0308 	orr.w	r3, r3, #8
 8005334:	81a3      	strh	r3, [r4, #12]
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	b94b      	cbnz	r3, 800534e <__swsetup_r+0x7a>
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005344:	d003      	beq.n	800534e <__swsetup_r+0x7a>
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 fd2f 	bl	8005dac <__smakebuf_r>
 800534e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005352:	f013 0201 	ands.w	r2, r3, #1
 8005356:	d00a      	beq.n	800536e <__swsetup_r+0x9a>
 8005358:	2200      	movs	r2, #0
 800535a:	60a2      	str	r2, [r4, #8]
 800535c:	6962      	ldr	r2, [r4, #20]
 800535e:	4252      	negs	r2, r2
 8005360:	61a2      	str	r2, [r4, #24]
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	b942      	cbnz	r2, 8005378 <__swsetup_r+0xa4>
 8005366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800536a:	d1c5      	bne.n	80052f8 <__swsetup_r+0x24>
 800536c:	bd38      	pop	{r3, r4, r5, pc}
 800536e:	0799      	lsls	r1, r3, #30
 8005370:	bf58      	it	pl
 8005372:	6962      	ldrpl	r2, [r4, #20]
 8005374:	60a2      	str	r2, [r4, #8]
 8005376:	e7f4      	b.n	8005362 <__swsetup_r+0x8e>
 8005378:	2000      	movs	r0, #0
 800537a:	e7f7      	b.n	800536c <__swsetup_r+0x98>
 800537c:	2400001c 	.word	0x2400001c

08005380 <memset>:
 8005380:	4402      	add	r2, r0
 8005382:	4603      	mov	r3, r0
 8005384:	4293      	cmp	r3, r2
 8005386:	d100      	bne.n	800538a <memset+0xa>
 8005388:	4770      	bx	lr
 800538a:	f803 1b01 	strb.w	r1, [r3], #1
 800538e:	e7f9      	b.n	8005384 <memset+0x4>

08005390 <_close_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	@ (80053ac <_close_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fc f882 	bl	80014a4 <_close>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_close_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_close_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	24000290 	.word	0x24000290

080053b0 <_lseek_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	@ (80053d0 <_lseek_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fc f897 	bl	80014f2 <_lseek>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_lseek_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_lseek_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	24000290 	.word	0x24000290

080053d4 <_read_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	@ (80053f4 <_read_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fc f825 	bl	8001432 <_read>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_read_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_read_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	24000290 	.word	0x24000290

080053f8 <_write_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d07      	ldr	r5, [pc, #28]	@ (8005418 <_write_r+0x20>)
 80053fc:	4604      	mov	r4, r0
 80053fe:	4608      	mov	r0, r1
 8005400:	4611      	mov	r1, r2
 8005402:	2200      	movs	r2, #0
 8005404:	602a      	str	r2, [r5, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	f7fc f830 	bl	800146c <_write>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_write_r+0x1e>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_write_r+0x1e>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	24000290 	.word	0x24000290

0800541c <__errno>:
 800541c:	4b01      	ldr	r3, [pc, #4]	@ (8005424 <__errno+0x8>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	2400001c 	.word	0x2400001c

08005428 <__libc_init_array>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4d0d      	ldr	r5, [pc, #52]	@ (8005460 <__libc_init_array+0x38>)
 800542c:	4c0d      	ldr	r4, [pc, #52]	@ (8005464 <__libc_init_array+0x3c>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	2600      	movs	r6, #0
 8005434:	42a6      	cmp	r6, r4
 8005436:	d109      	bne.n	800544c <__libc_init_array+0x24>
 8005438:	4d0b      	ldr	r5, [pc, #44]	@ (8005468 <__libc_init_array+0x40>)
 800543a:	4c0c      	ldr	r4, [pc, #48]	@ (800546c <__libc_init_array+0x44>)
 800543c:	f000 fd24 	bl	8005e88 <_init>
 8005440:	1b64      	subs	r4, r4, r5
 8005442:	10a4      	asrs	r4, r4, #2
 8005444:	2600      	movs	r6, #0
 8005446:	42a6      	cmp	r6, r4
 8005448:	d105      	bne.n	8005456 <__libc_init_array+0x2e>
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005450:	4798      	blx	r3
 8005452:	3601      	adds	r6, #1
 8005454:	e7ee      	b.n	8005434 <__libc_init_array+0xc>
 8005456:	f855 3b04 	ldr.w	r3, [r5], #4
 800545a:	4798      	blx	r3
 800545c:	3601      	adds	r6, #1
 800545e:	e7f2      	b.n	8005446 <__libc_init_array+0x1e>
 8005460:	08006398 	.word	0x08006398
 8005464:	08006398 	.word	0x08006398
 8005468:	08006398 	.word	0x08006398
 800546c:	0800639c 	.word	0x0800639c

08005470 <__retarget_lock_init_recursive>:
 8005470:	4770      	bx	lr

08005472 <__retarget_lock_acquire_recursive>:
 8005472:	4770      	bx	lr

08005474 <__retarget_lock_release_recursive>:
 8005474:	4770      	bx	lr
	...

08005478 <_free_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4605      	mov	r5, r0
 800547c:	2900      	cmp	r1, #0
 800547e:	d041      	beq.n	8005504 <_free_r+0x8c>
 8005480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005484:	1f0c      	subs	r4, r1, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	bfb8      	it	lt
 800548a:	18e4      	addlt	r4, r4, r3
 800548c:	f000 f8e0 	bl	8005650 <__malloc_lock>
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <_free_r+0x90>)
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	b933      	cbnz	r3, 80054a4 <_free_r+0x2c>
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6014      	str	r4, [r2, #0]
 800549a:	4628      	mov	r0, r5
 800549c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a0:	f000 b8dc 	b.w	800565c <__malloc_unlock>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d908      	bls.n	80054ba <_free_r+0x42>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	1821      	adds	r1, r4, r0
 80054ac:	428b      	cmp	r3, r1
 80054ae:	bf01      	itttt	eq
 80054b0:	6819      	ldreq	r1, [r3, #0]
 80054b2:	685b      	ldreq	r3, [r3, #4]
 80054b4:	1809      	addeq	r1, r1, r0
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	e7ed      	b.n	8005496 <_free_r+0x1e>
 80054ba:	461a      	mov	r2, r3
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b10b      	cbz	r3, 80054c4 <_free_r+0x4c>
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d9fa      	bls.n	80054ba <_free_r+0x42>
 80054c4:	6811      	ldr	r1, [r2, #0]
 80054c6:	1850      	adds	r0, r2, r1
 80054c8:	42a0      	cmp	r0, r4
 80054ca:	d10b      	bne.n	80054e4 <_free_r+0x6c>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	4401      	add	r1, r0
 80054d0:	1850      	adds	r0, r2, r1
 80054d2:	4283      	cmp	r3, r0
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	d1e0      	bne.n	800549a <_free_r+0x22>
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	6053      	str	r3, [r2, #4]
 80054de:	4408      	add	r0, r1
 80054e0:	6010      	str	r0, [r2, #0]
 80054e2:	e7da      	b.n	800549a <_free_r+0x22>
 80054e4:	d902      	bls.n	80054ec <_free_r+0x74>
 80054e6:	230c      	movs	r3, #12
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	e7d6      	b.n	800549a <_free_r+0x22>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	1821      	adds	r1, r4, r0
 80054f0:	428b      	cmp	r3, r1
 80054f2:	bf04      	itt	eq
 80054f4:	6819      	ldreq	r1, [r3, #0]
 80054f6:	685b      	ldreq	r3, [r3, #4]
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	bf04      	itt	eq
 80054fc:	1809      	addeq	r1, r1, r0
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	6054      	str	r4, [r2, #4]
 8005502:	e7ca      	b.n	800549a <_free_r+0x22>
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	bf00      	nop
 8005508:	2400029c 	.word	0x2400029c

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0f      	ldr	r6, [pc, #60]	@ (800554c <sbrk_aligned+0x40>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 fca6 	bl	8005e68 <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fca1 	bl	8005e68 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d103      	bne.n	8005532 <sbrk_aligned+0x26>
 800552a:	f04f 34ff 	mov.w	r4, #4294967295
 800552e:	4620      	mov	r0, r4
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	1cc4      	adds	r4, r0, #3
 8005534:	f024 0403 	bic.w	r4, r4, #3
 8005538:	42a0      	cmp	r0, r4
 800553a:	d0f8      	beq.n	800552e <sbrk_aligned+0x22>
 800553c:	1a21      	subs	r1, r4, r0
 800553e:	4628      	mov	r0, r5
 8005540:	f000 fc92 	bl	8005e68 <_sbrk_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d1f2      	bne.n	800552e <sbrk_aligned+0x22>
 8005548:	e7ef      	b.n	800552a <sbrk_aligned+0x1e>
 800554a:	bf00      	nop
 800554c:	24000298 	.word	0x24000298

08005550 <_malloc_r>:
 8005550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005554:	1ccd      	adds	r5, r1, #3
 8005556:	f025 0503 	bic.w	r5, r5, #3
 800555a:	3508      	adds	r5, #8
 800555c:	2d0c      	cmp	r5, #12
 800555e:	bf38      	it	cc
 8005560:	250c      	movcc	r5, #12
 8005562:	2d00      	cmp	r5, #0
 8005564:	4606      	mov	r6, r0
 8005566:	db01      	blt.n	800556c <_malloc_r+0x1c>
 8005568:	42a9      	cmp	r1, r5
 800556a:	d904      	bls.n	8005576 <_malloc_r+0x26>
 800556c:	230c      	movs	r3, #12
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	2000      	movs	r0, #0
 8005572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800564c <_malloc_r+0xfc>
 800557a:	f000 f869 	bl	8005650 <__malloc_lock>
 800557e:	f8d8 3000 	ldr.w	r3, [r8]
 8005582:	461c      	mov	r4, r3
 8005584:	bb44      	cbnz	r4, 80055d8 <_malloc_r+0x88>
 8005586:	4629      	mov	r1, r5
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff ffbf 	bl	800550c <sbrk_aligned>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	4604      	mov	r4, r0
 8005592:	d158      	bne.n	8005646 <_malloc_r+0xf6>
 8005594:	f8d8 4000 	ldr.w	r4, [r8]
 8005598:	4627      	mov	r7, r4
 800559a:	2f00      	cmp	r7, #0
 800559c:	d143      	bne.n	8005626 <_malloc_r+0xd6>
 800559e:	2c00      	cmp	r4, #0
 80055a0:	d04b      	beq.n	800563a <_malloc_r+0xea>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	4639      	mov	r1, r7
 80055a6:	4630      	mov	r0, r6
 80055a8:	eb04 0903 	add.w	r9, r4, r3
 80055ac:	f000 fc5c 	bl	8005e68 <_sbrk_r>
 80055b0:	4581      	cmp	r9, r0
 80055b2:	d142      	bne.n	800563a <_malloc_r+0xea>
 80055b4:	6821      	ldr	r1, [r4, #0]
 80055b6:	1a6d      	subs	r5, r5, r1
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa6 	bl	800550c <sbrk_aligned>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d03a      	beq.n	800563a <_malloc_r+0xea>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	442b      	add	r3, r5
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	f8d8 3000 	ldr.w	r3, [r8]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	bb62      	cbnz	r2, 800562c <_malloc_r+0xdc>
 80055d2:	f8c8 7000 	str.w	r7, [r8]
 80055d6:	e00f      	b.n	80055f8 <_malloc_r+0xa8>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	1b52      	subs	r2, r2, r5
 80055dc:	d420      	bmi.n	8005620 <_malloc_r+0xd0>
 80055de:	2a0b      	cmp	r2, #11
 80055e0:	d917      	bls.n	8005612 <_malloc_r+0xc2>
 80055e2:	1961      	adds	r1, r4, r5
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	6059      	strne	r1, [r3, #4]
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	bf08      	it	eq
 80055f0:	f8c8 1000 	streq.w	r1, [r8]
 80055f4:	5162      	str	r2, [r4, r5]
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f82f 	bl	800565c <__malloc_unlock>
 80055fe:	f104 000b 	add.w	r0, r4, #11
 8005602:	1d23      	adds	r3, r4, #4
 8005604:	f020 0007 	bic.w	r0, r0, #7
 8005608:	1ac2      	subs	r2, r0, r3
 800560a:	bf1c      	itt	ne
 800560c:	1a1b      	subne	r3, r3, r0
 800560e:	50a3      	strne	r3, [r4, r2]
 8005610:	e7af      	b.n	8005572 <_malloc_r+0x22>
 8005612:	6862      	ldr	r2, [r4, #4]
 8005614:	42a3      	cmp	r3, r4
 8005616:	bf0c      	ite	eq
 8005618:	f8c8 2000 	streq.w	r2, [r8]
 800561c:	605a      	strne	r2, [r3, #4]
 800561e:	e7eb      	b.n	80055f8 <_malloc_r+0xa8>
 8005620:	4623      	mov	r3, r4
 8005622:	6864      	ldr	r4, [r4, #4]
 8005624:	e7ae      	b.n	8005584 <_malloc_r+0x34>
 8005626:	463c      	mov	r4, r7
 8005628:	687f      	ldr	r7, [r7, #4]
 800562a:	e7b6      	b.n	800559a <_malloc_r+0x4a>
 800562c:	461a      	mov	r2, r3
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	42a3      	cmp	r3, r4
 8005632:	d1fb      	bne.n	800562c <_malloc_r+0xdc>
 8005634:	2300      	movs	r3, #0
 8005636:	6053      	str	r3, [r2, #4]
 8005638:	e7de      	b.n	80055f8 <_malloc_r+0xa8>
 800563a:	230c      	movs	r3, #12
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	4630      	mov	r0, r6
 8005640:	f000 f80c 	bl	800565c <__malloc_unlock>
 8005644:	e794      	b.n	8005570 <_malloc_r+0x20>
 8005646:	6005      	str	r5, [r0, #0]
 8005648:	e7d6      	b.n	80055f8 <_malloc_r+0xa8>
 800564a:	bf00      	nop
 800564c:	2400029c 	.word	0x2400029c

08005650 <__malloc_lock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_lock+0x8>)
 8005652:	f7ff bf0e 	b.w	8005472 <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	24000294 	.word	0x24000294

0800565c <__malloc_unlock>:
 800565c:	4801      	ldr	r0, [pc, #4]	@ (8005664 <__malloc_unlock+0x8>)
 800565e:	f7ff bf09 	b.w	8005474 <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	24000294 	.word	0x24000294

08005668 <__sfputc_r>:
 8005668:	6893      	ldr	r3, [r2, #8]
 800566a:	3b01      	subs	r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	b410      	push	{r4}
 8005670:	6093      	str	r3, [r2, #8]
 8005672:	da08      	bge.n	8005686 <__sfputc_r+0x1e>
 8005674:	6994      	ldr	r4, [r2, #24]
 8005676:	42a3      	cmp	r3, r4
 8005678:	db01      	blt.n	800567e <__sfputc_r+0x16>
 800567a:	290a      	cmp	r1, #10
 800567c:	d103      	bne.n	8005686 <__sfputc_r+0x1e>
 800567e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005682:	f7ff bde8 	b.w	8005256 <__swbuf_r>
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	1c58      	adds	r0, r3, #1
 800568a:	6010      	str	r0, [r2, #0]
 800568c:	7019      	strb	r1, [r3, #0]
 800568e:	4608      	mov	r0, r1
 8005690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005694:	4770      	bx	lr

08005696 <__sfputs_r>:
 8005696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005698:	4606      	mov	r6, r0
 800569a:	460f      	mov	r7, r1
 800569c:	4614      	mov	r4, r2
 800569e:	18d5      	adds	r5, r2, r3
 80056a0:	42ac      	cmp	r4, r5
 80056a2:	d101      	bne.n	80056a8 <__sfputs_r+0x12>
 80056a4:	2000      	movs	r0, #0
 80056a6:	e007      	b.n	80056b8 <__sfputs_r+0x22>
 80056a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ac:	463a      	mov	r2, r7
 80056ae:	4630      	mov	r0, r6
 80056b0:	f7ff ffda 	bl	8005668 <__sfputc_r>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d1f3      	bne.n	80056a0 <__sfputs_r+0xa>
 80056b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056bc <_vfiprintf_r>:
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	460d      	mov	r5, r1
 80056c2:	b09d      	sub	sp, #116	@ 0x74
 80056c4:	4614      	mov	r4, r2
 80056c6:	4698      	mov	r8, r3
 80056c8:	4606      	mov	r6, r0
 80056ca:	b118      	cbz	r0, 80056d4 <_vfiprintf_r+0x18>
 80056cc:	6a03      	ldr	r3, [r0, #32]
 80056ce:	b90b      	cbnz	r3, 80056d4 <_vfiprintf_r+0x18>
 80056d0:	f7ff fcd8 	bl	8005084 <__sinit>
 80056d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	d405      	bmi.n	80056e6 <_vfiprintf_r+0x2a>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	059a      	lsls	r2, r3, #22
 80056de:	d402      	bmi.n	80056e6 <_vfiprintf_r+0x2a>
 80056e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056e2:	f7ff fec6 	bl	8005472 <__retarget_lock_acquire_recursive>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	071b      	lsls	r3, r3, #28
 80056ea:	d501      	bpl.n	80056f0 <_vfiprintf_r+0x34>
 80056ec:	692b      	ldr	r3, [r5, #16]
 80056ee:	b99b      	cbnz	r3, 8005718 <_vfiprintf_r+0x5c>
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fdee 	bl	80052d4 <__swsetup_r>
 80056f8:	b170      	cbz	r0, 8005718 <_vfiprintf_r+0x5c>
 80056fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056fc:	07dc      	lsls	r4, r3, #31
 80056fe:	d504      	bpl.n	800570a <_vfiprintf_r+0x4e>
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	b01d      	add	sp, #116	@ 0x74
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	0598      	lsls	r0, r3, #22
 800570e:	d4f7      	bmi.n	8005700 <_vfiprintf_r+0x44>
 8005710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005712:	f7ff feaf 	bl	8005474 <__retarget_lock_release_recursive>
 8005716:	e7f3      	b.n	8005700 <_vfiprintf_r+0x44>
 8005718:	2300      	movs	r3, #0
 800571a:	9309      	str	r3, [sp, #36]	@ 0x24
 800571c:	2320      	movs	r3, #32
 800571e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005722:	f8cd 800c 	str.w	r8, [sp, #12]
 8005726:	2330      	movs	r3, #48	@ 0x30
 8005728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058d8 <_vfiprintf_r+0x21c>
 800572c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005730:	f04f 0901 	mov.w	r9, #1
 8005734:	4623      	mov	r3, r4
 8005736:	469a      	mov	sl, r3
 8005738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800573c:	b10a      	cbz	r2, 8005742 <_vfiprintf_r+0x86>
 800573e:	2a25      	cmp	r2, #37	@ 0x25
 8005740:	d1f9      	bne.n	8005736 <_vfiprintf_r+0x7a>
 8005742:	ebba 0b04 	subs.w	fp, sl, r4
 8005746:	d00b      	beq.n	8005760 <_vfiprintf_r+0xa4>
 8005748:	465b      	mov	r3, fp
 800574a:	4622      	mov	r2, r4
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f7ff ffa1 	bl	8005696 <__sfputs_r>
 8005754:	3001      	adds	r0, #1
 8005756:	f000 80a7 	beq.w	80058a8 <_vfiprintf_r+0x1ec>
 800575a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800575c:	445a      	add	r2, fp
 800575e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005760:	f89a 3000 	ldrb.w	r3, [sl]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 809f 	beq.w	80058a8 <_vfiprintf_r+0x1ec>
 800576a:	2300      	movs	r3, #0
 800576c:	f04f 32ff 	mov.w	r2, #4294967295
 8005770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005774:	f10a 0a01 	add.w	sl, sl, #1
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005780:	931a      	str	r3, [sp, #104]	@ 0x68
 8005782:	4654      	mov	r4, sl
 8005784:	2205      	movs	r2, #5
 8005786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578a:	4853      	ldr	r0, [pc, #332]	@ (80058d8 <_vfiprintf_r+0x21c>)
 800578c:	f7fa fdc0 	bl	8000310 <memchr>
 8005790:	9a04      	ldr	r2, [sp, #16]
 8005792:	b9d8      	cbnz	r0, 80057cc <_vfiprintf_r+0x110>
 8005794:	06d1      	lsls	r1, r2, #27
 8005796:	bf44      	itt	mi
 8005798:	2320      	movmi	r3, #32
 800579a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800579e:	0713      	lsls	r3, r2, #28
 80057a0:	bf44      	itt	mi
 80057a2:	232b      	movmi	r3, #43	@ 0x2b
 80057a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057a8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ae:	d015      	beq.n	80057dc <_vfiprintf_r+0x120>
 80057b0:	9a07      	ldr	r2, [sp, #28]
 80057b2:	4654      	mov	r4, sl
 80057b4:	2000      	movs	r0, #0
 80057b6:	f04f 0c0a 	mov.w	ip, #10
 80057ba:	4621      	mov	r1, r4
 80057bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c0:	3b30      	subs	r3, #48	@ 0x30
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d94b      	bls.n	800585e <_vfiprintf_r+0x1a2>
 80057c6:	b1b0      	cbz	r0, 80057f6 <_vfiprintf_r+0x13a>
 80057c8:	9207      	str	r2, [sp, #28]
 80057ca:	e014      	b.n	80057f6 <_vfiprintf_r+0x13a>
 80057cc:	eba0 0308 	sub.w	r3, r0, r8
 80057d0:	fa09 f303 	lsl.w	r3, r9, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	46a2      	mov	sl, r4
 80057da:	e7d2      	b.n	8005782 <_vfiprintf_r+0xc6>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	1d19      	adds	r1, r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	9103      	str	r1, [sp, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfbb      	ittet	lt
 80057e8:	425b      	neglt	r3, r3
 80057ea:	f042 0202 	orrlt.w	r2, r2, #2
 80057ee:	9307      	strge	r3, [sp, #28]
 80057f0:	9307      	strlt	r3, [sp, #28]
 80057f2:	bfb8      	it	lt
 80057f4:	9204      	strlt	r2, [sp, #16]
 80057f6:	7823      	ldrb	r3, [r4, #0]
 80057f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80057fa:	d10a      	bne.n	8005812 <_vfiprintf_r+0x156>
 80057fc:	7863      	ldrb	r3, [r4, #1]
 80057fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005800:	d132      	bne.n	8005868 <_vfiprintf_r+0x1ac>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	9203      	str	r2, [sp, #12]
 800580a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800580e:	3402      	adds	r4, #2
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058e8 <_vfiprintf_r+0x22c>
 8005816:	7821      	ldrb	r1, [r4, #0]
 8005818:	2203      	movs	r2, #3
 800581a:	4650      	mov	r0, sl
 800581c:	f7fa fd78 	bl	8000310 <memchr>
 8005820:	b138      	cbz	r0, 8005832 <_vfiprintf_r+0x176>
 8005822:	9b04      	ldr	r3, [sp, #16]
 8005824:	eba0 000a 	sub.w	r0, r0, sl
 8005828:	2240      	movs	r2, #64	@ 0x40
 800582a:	4082      	lsls	r2, r0
 800582c:	4313      	orrs	r3, r2
 800582e:	3401      	adds	r4, #1
 8005830:	9304      	str	r3, [sp, #16]
 8005832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005836:	4829      	ldr	r0, [pc, #164]	@ (80058dc <_vfiprintf_r+0x220>)
 8005838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800583c:	2206      	movs	r2, #6
 800583e:	f7fa fd67 	bl	8000310 <memchr>
 8005842:	2800      	cmp	r0, #0
 8005844:	d03f      	beq.n	80058c6 <_vfiprintf_r+0x20a>
 8005846:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <_vfiprintf_r+0x224>)
 8005848:	bb1b      	cbnz	r3, 8005892 <_vfiprintf_r+0x1d6>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	3307      	adds	r3, #7
 800584e:	f023 0307 	bic.w	r3, r3, #7
 8005852:	3308      	adds	r3, #8
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005858:	443b      	add	r3, r7
 800585a:	9309      	str	r3, [sp, #36]	@ 0x24
 800585c:	e76a      	b.n	8005734 <_vfiprintf_r+0x78>
 800585e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005862:	460c      	mov	r4, r1
 8005864:	2001      	movs	r0, #1
 8005866:	e7a8      	b.n	80057ba <_vfiprintf_r+0xfe>
 8005868:	2300      	movs	r3, #0
 800586a:	3401      	adds	r4, #1
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	4619      	mov	r1, r3
 8005870:	f04f 0c0a 	mov.w	ip, #10
 8005874:	4620      	mov	r0, r4
 8005876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800587a:	3a30      	subs	r2, #48	@ 0x30
 800587c:	2a09      	cmp	r2, #9
 800587e:	d903      	bls.n	8005888 <_vfiprintf_r+0x1cc>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0c6      	beq.n	8005812 <_vfiprintf_r+0x156>
 8005884:	9105      	str	r1, [sp, #20]
 8005886:	e7c4      	b.n	8005812 <_vfiprintf_r+0x156>
 8005888:	fb0c 2101 	mla	r1, ip, r1, r2
 800588c:	4604      	mov	r4, r0
 800588e:	2301      	movs	r3, #1
 8005890:	e7f0      	b.n	8005874 <_vfiprintf_r+0x1b8>
 8005892:	ab03      	add	r3, sp, #12
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	462a      	mov	r2, r5
 8005898:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <_vfiprintf_r+0x228>)
 800589a:	a904      	add	r1, sp, #16
 800589c:	4630      	mov	r0, r6
 800589e:	f3af 8000 	nop.w
 80058a2:	4607      	mov	r7, r0
 80058a4:	1c78      	adds	r0, r7, #1
 80058a6:	d1d6      	bne.n	8005856 <_vfiprintf_r+0x19a>
 80058a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058aa:	07d9      	lsls	r1, r3, #31
 80058ac:	d405      	bmi.n	80058ba <_vfiprintf_r+0x1fe>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	059a      	lsls	r2, r3, #22
 80058b2:	d402      	bmi.n	80058ba <_vfiprintf_r+0x1fe>
 80058b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058b6:	f7ff fddd 	bl	8005474 <__retarget_lock_release_recursive>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	065b      	lsls	r3, r3, #25
 80058be:	f53f af1f 	bmi.w	8005700 <_vfiprintf_r+0x44>
 80058c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058c4:	e71e      	b.n	8005704 <_vfiprintf_r+0x48>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <_vfiprintf_r+0x228>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 f879 	bl	80059c8 <_printf_i>
 80058d6:	e7e4      	b.n	80058a2 <_vfiprintf_r+0x1e6>
 80058d8:	0800635c 	.word	0x0800635c
 80058dc:	08006366 	.word	0x08006366
 80058e0:	00000000 	.word	0x00000000
 80058e4:	08005697 	.word	0x08005697
 80058e8:	08006362 	.word	0x08006362

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4698      	mov	r8, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	3b00      	subs	r3, #0
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005948:	4641      	mov	r1, r8
 800594a:	4638      	mov	r0, r7
 800594c:	47c8      	blx	r9
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6922      	ldr	r2, [r4, #16]
 8005956:	f003 0306 	and.w	r3, r3, #6
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf02      	ittt	eq
 800595e:	68e5      	ldreq	r5, [r4, #12]
 8005960:	6833      	ldreq	r3, [r6, #0]
 8005962:	1aed      	subeq	r5, r5, r3
 8005964:	68a3      	ldr	r3, [r4, #8]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4641      	mov	r1, r8
 8005988:	4638      	mov	r0, r7
 800598a:	47c8      	blx	r9
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	@ 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4641      	mov	r1, r8
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c8      	blx	r9
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	7e0f      	ldrb	r7, [r1, #24]
 80059ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059d0:	2f78      	cmp	r7, #120	@ 0x78
 80059d2:	4691      	mov	r9, r2
 80059d4:	4680      	mov	r8, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	469a      	mov	sl, r3
 80059da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	@ 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d2 	beq.w	8005b8e <_printf_i+0x1c6>
 80059ea:	2f58      	cmp	r7, #88	@ 0x58
 80059ec:	f000 80b9 	beq.w	8005b62 <_printf_i+0x19a>
 80059f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a101      	add	r1, pc, #4	@ (adr r1, 8005a08 <_printf_i+0x40>)
 8005a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b75 	.word	0x08005b75
 8005a38:	08005a9f 	.word	0x08005a9f
 8005a3c:	08005b2f 	.word	0x08005b2f
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005b97 	.word	0x08005b97
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005a9f 	.word	0x08005a9f
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b37 	.word	0x08005b37
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6032      	str	r2, [r6, #0]
 8005a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e09d      	b.n	8005bb0 <_printf_i+0x1e8>
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	6031      	str	r1, [r6, #0]
 8005a7c:	0606      	lsls	r6, r0, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xbc>
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	e003      	b.n	8005a8c <_printf_i+0xc4>
 8005a84:	0645      	lsls	r5, r0, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xb8>
 8005a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	da03      	bge.n	8005a98 <_printf_i+0xd0>
 8005a90:	232d      	movs	r3, #45	@ 0x2d
 8005a92:	426d      	negs	r5, r5
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a98:	4859      	ldr	r0, [pc, #356]	@ (8005c00 <_printf_i+0x238>)
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	e011      	b.n	8005ac2 <_printf_i+0xfa>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	6833      	ldr	r3, [r6, #0]
 8005aa2:	0608      	lsls	r0, r1, #24
 8005aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005aa8:	d402      	bmi.n	8005ab0 <_printf_i+0xe8>
 8005aaa:	0649      	lsls	r1, r1, #25
 8005aac:	bf48      	it	mi
 8005aae:	b2ad      	uxthmi	r5, r5
 8005ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ab2:	4853      	ldr	r0, [pc, #332]	@ (8005c00 <_printf_i+0x238>)
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	bf14      	ite	ne
 8005ab8:	230a      	movne	r3, #10
 8005aba:	2308      	moveq	r3, #8
 8005abc:	2100      	movs	r1, #0
 8005abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ac2:	6866      	ldr	r6, [r4, #4]
 8005ac4:	60a6      	str	r6, [r4, #8]
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	bfa2      	ittt	ge
 8005aca:	6821      	ldrge	r1, [r4, #0]
 8005acc:	f021 0104 	bicge.w	r1, r1, #4
 8005ad0:	6021      	strge	r1, [r4, #0]
 8005ad2:	b90d      	cbnz	r5, 8005ad8 <_printf_i+0x110>
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	d04b      	beq.n	8005b70 <_printf_i+0x1a8>
 8005ad8:	4616      	mov	r6, r2
 8005ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ade:	fb03 5711 	mls	r7, r3, r1, r5
 8005ae2:	5dc7      	ldrb	r7, [r0, r7]
 8005ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ae8:	462f      	mov	r7, r5
 8005aea:	42bb      	cmp	r3, r7
 8005aec:	460d      	mov	r5, r1
 8005aee:	d9f4      	bls.n	8005ada <_printf_i+0x112>
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d10b      	bne.n	8005b0c <_printf_i+0x144>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	07df      	lsls	r7, r3, #31
 8005af8:	d508      	bpl.n	8005b0c <_printf_i+0x144>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	6861      	ldr	r1, [r4, #4]
 8005afe:	4299      	cmp	r1, r3
 8005b00:	bfde      	ittt	le
 8005b02:	2330      	movle	r3, #48	@ 0x30
 8005b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b0c:	1b92      	subs	r2, r2, r6
 8005b0e:	6122      	str	r2, [r4, #16]
 8005b10:	f8cd a000 	str.w	sl, [sp]
 8005b14:	464b      	mov	r3, r9
 8005b16:	aa03      	add	r2, sp, #12
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7ff fee6 	bl	80058ec <_printf_common>
 8005b20:	3001      	adds	r0, #1
 8005b22:	d14a      	bne.n	8005bba <_printf_i+0x1f2>
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	b004      	add	sp, #16
 8005b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f043 0320 	orr.w	r3, r3, #32
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	4833      	ldr	r0, [pc, #204]	@ (8005c04 <_printf_i+0x23c>)
 8005b38:	2778      	movs	r7, #120	@ 0x78
 8005b3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	6831      	ldr	r1, [r6, #0]
 8005b42:	061f      	lsls	r7, r3, #24
 8005b44:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b48:	d402      	bmi.n	8005b50 <_printf_i+0x188>
 8005b4a:	065f      	lsls	r7, r3, #25
 8005b4c:	bf48      	it	mi
 8005b4e:	b2ad      	uxthmi	r5, r5
 8005b50:	6031      	str	r1, [r6, #0]
 8005b52:	07d9      	lsls	r1, r3, #31
 8005b54:	bf44      	itt	mi
 8005b56:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5a:	6023      	strmi	r3, [r4, #0]
 8005b5c:	b11d      	cbz	r5, 8005b66 <_printf_i+0x19e>
 8005b5e:	2310      	movs	r3, #16
 8005b60:	e7ac      	b.n	8005abc <_printf_i+0xf4>
 8005b62:	4827      	ldr	r0, [pc, #156]	@ (8005c00 <_printf_i+0x238>)
 8005b64:	e7e9      	b.n	8005b3a <_printf_i+0x172>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f023 0320 	bic.w	r3, r3, #32
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	e7f6      	b.n	8005b5e <_printf_i+0x196>
 8005b70:	4616      	mov	r6, r2
 8005b72:	e7bd      	b.n	8005af0 <_printf_i+0x128>
 8005b74:	6833      	ldr	r3, [r6, #0]
 8005b76:	6825      	ldr	r5, [r4, #0]
 8005b78:	6961      	ldr	r1, [r4, #20]
 8005b7a:	1d18      	adds	r0, r3, #4
 8005b7c:	6030      	str	r0, [r6, #0]
 8005b7e:	062e      	lsls	r6, r5, #24
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	d501      	bpl.n	8005b88 <_printf_i+0x1c0>
 8005b84:	6019      	str	r1, [r3, #0]
 8005b86:	e002      	b.n	8005b8e <_printf_i+0x1c6>
 8005b88:	0668      	lsls	r0, r5, #25
 8005b8a:	d5fb      	bpl.n	8005b84 <_printf_i+0x1bc>
 8005b8c:	8019      	strh	r1, [r3, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	4616      	mov	r6, r2
 8005b94:	e7bc      	b.n	8005b10 <_printf_i+0x148>
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	6032      	str	r2, [r6, #0]
 8005b9c:	681e      	ldr	r6, [r3, #0]
 8005b9e:	6862      	ldr	r2, [r4, #4]
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7fa fbb4 	bl	8000310 <memchr>
 8005ba8:	b108      	cbz	r0, 8005bae <_printf_i+0x1e6>
 8005baa:	1b80      	subs	r0, r0, r6
 8005bac:	6060      	str	r0, [r4, #4]
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb8:	e7aa      	b.n	8005b10 <_printf_i+0x148>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	47d0      	blx	sl
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d0ad      	beq.n	8005b24 <_printf_i+0x15c>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	079b      	lsls	r3, r3, #30
 8005bcc:	d413      	bmi.n	8005bf6 <_printf_i+0x22e>
 8005bce:	68e0      	ldr	r0, [r4, #12]
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	4298      	cmp	r0, r3
 8005bd4:	bfb8      	it	lt
 8005bd6:	4618      	movlt	r0, r3
 8005bd8:	e7a6      	b.n	8005b28 <_printf_i+0x160>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4632      	mov	r2, r6
 8005bde:	4649      	mov	r1, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	47d0      	blx	sl
 8005be4:	3001      	adds	r0, #1
 8005be6:	d09d      	beq.n	8005b24 <_printf_i+0x15c>
 8005be8:	3501      	adds	r5, #1
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	9903      	ldr	r1, [sp, #12]
 8005bee:	1a5b      	subs	r3, r3, r1
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	dcf2      	bgt.n	8005bda <_printf_i+0x212>
 8005bf4:	e7eb      	b.n	8005bce <_printf_i+0x206>
 8005bf6:	2500      	movs	r5, #0
 8005bf8:	f104 0619 	add.w	r6, r4, #25
 8005bfc:	e7f5      	b.n	8005bea <_printf_i+0x222>
 8005bfe:	bf00      	nop
 8005c00:	0800636d 	.word	0x0800636d
 8005c04:	0800637e 	.word	0x0800637e

08005c08 <__sflush_r>:
 8005c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	0716      	lsls	r6, r2, #28
 8005c12:	4605      	mov	r5, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	d454      	bmi.n	8005cc2 <__sflush_r+0xba>
 8005c18:	684b      	ldr	r3, [r1, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	dc02      	bgt.n	8005c24 <__sflush_r+0x1c>
 8005c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dd48      	ble.n	8005cb6 <__sflush_r+0xae>
 8005c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	d045      	beq.n	8005cb6 <__sflush_r+0xae>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c30:	682f      	ldr	r7, [r5, #0]
 8005c32:	6a21      	ldr	r1, [r4, #32]
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	d030      	beq.n	8005c9a <__sflush_r+0x92>
 8005c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	0759      	lsls	r1, r3, #29
 8005c3e:	d505      	bpl.n	8005c4c <__sflush_r+0x44>
 8005c40:	6863      	ldr	r3, [r4, #4]
 8005c42:	1ad2      	subs	r2, r2, r3
 8005c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c46:	b10b      	cbz	r3, 8005c4c <__sflush_r+0x44>
 8005c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b0      	blx	r6
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	d106      	bne.n	8005c6a <__sflush_r+0x62>
 8005c5c:	6829      	ldr	r1, [r5, #0]
 8005c5e:	291d      	cmp	r1, #29
 8005c60:	d82b      	bhi.n	8005cba <__sflush_r+0xb2>
 8005c62:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <__sflush_r+0x104>)
 8005c64:	410a      	asrs	r2, r1
 8005c66:	07d6      	lsls	r6, r2, #31
 8005c68:	d427      	bmi.n	8005cba <__sflush_r+0xb2>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6062      	str	r2, [r4, #4]
 8005c6e:	04d9      	lsls	r1, r3, #19
 8005c70:	6922      	ldr	r2, [r4, #16]
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	d504      	bpl.n	8005c80 <__sflush_r+0x78>
 8005c76:	1c42      	adds	r2, r0, #1
 8005c78:	d101      	bne.n	8005c7e <__sflush_r+0x76>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	b903      	cbnz	r3, 8005c80 <__sflush_r+0x78>
 8005c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c82:	602f      	str	r7, [r5, #0]
 8005c84:	b1b9      	cbz	r1, 8005cb6 <__sflush_r+0xae>
 8005c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	d002      	beq.n	8005c94 <__sflush_r+0x8c>
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7ff fbf2 	bl	8005478 <_free_r>
 8005c94:	2300      	movs	r3, #0
 8005c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c98:	e00d      	b.n	8005cb6 <__sflush_r+0xae>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	1c50      	adds	r0, r2, #1
 8005ca4:	d1c9      	bne.n	8005c3a <__sflush_r+0x32>
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0c6      	beq.n	8005c3a <__sflush_r+0x32>
 8005cac:	2b1d      	cmp	r3, #29
 8005cae:	d001      	beq.n	8005cb4 <__sflush_r+0xac>
 8005cb0:	2b16      	cmp	r3, #22
 8005cb2:	d11e      	bne.n	8005cf2 <__sflush_r+0xea>
 8005cb4:	602f      	str	r7, [r5, #0]
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e022      	b.n	8005d00 <__sflush_r+0xf8>
 8005cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cbe:	b21b      	sxth	r3, r3
 8005cc0:	e01b      	b.n	8005cfa <__sflush_r+0xf2>
 8005cc2:	690f      	ldr	r7, [r1, #16]
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	d0f6      	beq.n	8005cb6 <__sflush_r+0xae>
 8005cc8:	0793      	lsls	r3, r2, #30
 8005cca:	680e      	ldr	r6, [r1, #0]
 8005ccc:	bf08      	it	eq
 8005cce:	694b      	ldreq	r3, [r1, #20]
 8005cd0:	600f      	str	r7, [r1, #0]
 8005cd2:	bf18      	it	ne
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	eba6 0807 	sub.w	r8, r6, r7
 8005cda:	608b      	str	r3, [r1, #8]
 8005cdc:	f1b8 0f00 	cmp.w	r8, #0
 8005ce0:	dde9      	ble.n	8005cb6 <__sflush_r+0xae>
 8005ce2:	6a21      	ldr	r1, [r4, #32]
 8005ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ce6:	4643      	mov	r3, r8
 8005ce8:	463a      	mov	r2, r7
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b0      	blx	r6
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	dc08      	bgt.n	8005d04 <__sflush_r+0xfc>
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	4407      	add	r7, r0
 8005d06:	eba8 0800 	sub.w	r8, r8, r0
 8005d0a:	e7e7      	b.n	8005cdc <__sflush_r+0xd4>
 8005d0c:	dfbffffe 	.word	0xdfbffffe

08005d10 <_fflush_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	b913      	cbnz	r3, 8005d20 <_fflush_r+0x10>
 8005d1a:	2500      	movs	r5, #0
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	b118      	cbz	r0, 8005d2a <_fflush_r+0x1a>
 8005d22:	6a03      	ldr	r3, [r0, #32]
 8005d24:	b90b      	cbnz	r3, 8005d2a <_fflush_r+0x1a>
 8005d26:	f7ff f9ad 	bl	8005084 <__sinit>
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f3      	beq.n	8005d1a <_fflush_r+0xa>
 8005d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d404      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d38:	0599      	lsls	r1, r3, #22
 8005d3a:	d402      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d3e:	f7ff fb98 	bl	8005472 <__retarget_lock_acquire_recursive>
 8005d42:	4628      	mov	r0, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ff5f 	bl	8005c08 <__sflush_r>
 8005d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d4c:	07da      	lsls	r2, r3, #31
 8005d4e:	4605      	mov	r5, r0
 8005d50:	d4e4      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d4e1      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d5a:	f7ff fb8b 	bl	8005474 <__retarget_lock_release_recursive>
 8005d5e:	e7dd      	b.n	8005d1c <_fflush_r+0xc>

08005d60 <__swhatbuf_r>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	b096      	sub	sp, #88	@ 0x58
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	461e      	mov	r6, r3
 8005d70:	da0d      	bge.n	8005d8e <__swhatbuf_r+0x2e>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2340      	movne	r3, #64	@ 0x40
 8005d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d84:	2000      	movs	r0, #0
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	b016      	add	sp, #88	@ 0x58
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	466a      	mov	r2, sp
 8005d90:	f000 f848 	bl	8005e24 <_fstat_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	dbec      	blt.n	8005d72 <__swhatbuf_r+0x12>
 8005d98:	9901      	ldr	r1, [sp, #4]
 8005d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005da2:	4259      	negs	r1, r3
 8005da4:	4159      	adcs	r1, r3
 8005da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005daa:	e7eb      	b.n	8005d84 <__swhatbuf_r+0x24>

08005dac <__smakebuf_r>:
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db0:	079d      	lsls	r5, r3, #30
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	d507      	bpl.n	8005dc8 <__smakebuf_r+0x1c>
 8005db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6163      	str	r3, [r4, #20]
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc8:	ab01      	add	r3, sp, #4
 8005dca:	466a      	mov	r2, sp
 8005dcc:	f7ff ffc8 	bl	8005d60 <__swhatbuf_r>
 8005dd0:	9f00      	ldr	r7, [sp, #0]
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff fbba 	bl	8005550 <_malloc_r>
 8005ddc:	b948      	cbnz	r0, 8005df2 <__smakebuf_r+0x46>
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	059a      	lsls	r2, r3, #22
 8005de4:	d4ee      	bmi.n	8005dc4 <__smakebuf_r+0x18>
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	e7e2      	b.n	8005db8 <__smakebuf_r+0xc>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	6020      	str	r0, [r4, #0]
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e02:	b15b      	cbz	r3, 8005e1c <__smakebuf_r+0x70>
 8005e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f81d 	bl	8005e48 <_isatty_r>
 8005e0e:	b128      	cbz	r0, 8005e1c <__smakebuf_r+0x70>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	431d      	orrs	r5, r3
 8005e20:	81a5      	strh	r5, [r4, #12]
 8005e22:	e7cf      	b.n	8005dc4 <__smakebuf_r+0x18>

08005e24 <_fstat_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d07      	ldr	r5, [pc, #28]	@ (8005e44 <_fstat_r+0x20>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	f7fb fb43 	bl	80014bc <_fstat>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d102      	bne.n	8005e40 <_fstat_r+0x1c>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	b103      	cbz	r3, 8005e40 <_fstat_r+0x1c>
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	24000290 	.word	0x24000290

08005e48 <_isatty_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d06      	ldr	r5, [pc, #24]	@ (8005e64 <_isatty_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fb fb42 	bl	80014dc <_isatty>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_isatty_r+0x1a>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_isatty_r+0x1a>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	24000290 	.word	0x24000290

08005e68 <_sbrk_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d06      	ldr	r5, [pc, #24]	@ (8005e84 <_sbrk_r+0x1c>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	602b      	str	r3, [r5, #0]
 8005e74:	f7fb fb4a 	bl	800150c <_sbrk>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_sbrk_r+0x1a>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_sbrk_r+0x1a>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	24000290 	.word	0x24000290

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
