
bno055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005518  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080057e8  080057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08005a48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000020c  24000078  08005ac0  00007078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  08005ac0  00007284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d0c0  00000000  00000000  000070a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f99  00000000  00000000  00014166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c10  00000000  00000000  00016100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000091e  00000000  00000000  00016d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032569  00000000  00000000  0001762e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f216  00000000  00000000  00049b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d80a  00000000  00000000  00058dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001965b7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038c8  00000000  00000000  001965fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00199ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080057d0 	.word	0x080057d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	080057d0 	.word	0x080057d0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4619      	mov	r1, r3
 80003be:	2007      	movs	r0, #7
 80003c0:	f000 fa10 	bl	80007e4 <bno055_writeData>
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	4619      	mov	r1, r3
 80003da:	203d      	movs	r0, #61	@ 0x3d
 80003dc:	f000 fa02 	bl	80007e4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d103      	bne.n	80003ee <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80003e6:	2013      	movs	r0, #19
 80003e8:	f000 f9f0 	bl	80007cc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80003ec:	e002      	b.n	80003f4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80003ee:	2007      	movs	r0, #7
 80003f0:	f000 f9ec 	bl	80007cc <bno055_delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000400:	2000      	movs	r0, #0
 8000402:	f7ff ffe3 	bl	80003cc <bno055_setOperationMode>
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}

0800040a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800040e:	200c      	movs	r0, #12
 8000410:	f7ff ffdc 	bl	80003cc <bno055_setOperationMode>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800041c:	2120      	movs	r1, #32
 800041e:	203f      	movs	r0, #63	@ 0x3f
 8000420:	f000 f9e0 	bl	80007e4 <bno055_writeData>
  bno055_delay(700);
 8000424:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000428:	f000 f9d0 	bl	80007cc <bno055_delay>
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  bno055_reset();
 8000436:	f7ff ffef 	bl	8000418 <bno055_reset>

  uint8_t id = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f000 faa7 	bl	8000998 <bno055_readData>
  if (id != BNO055_ID) {
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2ba0      	cmp	r3, #160	@ 0xa0
 800044e:	d004      	beq.n	800045a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	4619      	mov	r1, r3
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <bno055_setup+0x4c>)
 8000456:	f004 faef 	bl	8004a38 <iprintf>
  }
  bno055_setPage(0);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff ffa8 	bl	80003b0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000460:	2100      	movs	r1, #0
 8000462:	203f      	movs	r0, #63	@ 0x3f
 8000464:	f000 f9be 	bl	80007e4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000468:	f7ff ffc8 	bl	80003fc <bno055_setOperationModeConfig>
  bno055_delay(10);
 800046c:	200a      	movs	r0, #10
 800046e:	f000 f9ad 	bl	80007cc <bno055_delay>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	080057e8 	.word	0x080057e8

08000480 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000484:	b09e      	sub	sp, #120	@ 0x78
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff8e 	bl	80003b0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000498:	2b20      	cmp	r3, #32
 800049a:	d108      	bne.n	80004ae <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800049c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80004a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004a4:	2208      	movs	r2, #8
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fa76 	bl	8000998 <bno055_readData>
 80004ac:	e007      	b.n	80004be <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80004ae:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80004b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004b6:	2206      	movs	r2, #6
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fa6d 	bl	8000998 <bno055_readData>

  double scale = 1;
 80004be:	f04f 0200 	mov.w	r2, #0
 80004c2:	4b81      	ldr	r3, [pc, #516]	@ (80006c8 <bno055_getVector+0x248>)
 80004c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80004c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004cc:	2b0e      	cmp	r3, #14
 80004ce:	d108      	bne.n	80004e2 <bno055_getVector+0x62>
    scale = magScale;
 80004d0:	4b7e      	ldr	r3, [pc, #504]	@ (80006cc <bno055_getVector+0x24c>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	ee07 3a90 	vmov	s15, r3
 80004d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80004dc:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 80004e0:	e03a      	b.n	8000558 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80004e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d007      	beq.n	80004fa <bno055_getVector+0x7a>
 80004ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004ee:	2b28      	cmp	r3, #40	@ 0x28
 80004f0:	d003      	beq.n	80004fa <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80004f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80004f8:	d108      	bne.n	800050c <bno055_getVector+0x8c>
    scale = accelScale;
 80004fa:	4b75      	ldr	r3, [pc, #468]	@ (80006d0 <bno055_getVector+0x250>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	ee07 3a90 	vmov	s15, r3
 8000502:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000506:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800050a:	e025      	b.n	8000558 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800050c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000510:	2b14      	cmp	r3, #20
 8000512:	d108      	bne.n	8000526 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000514:	4b6f      	ldr	r3, [pc, #444]	@ (80006d4 <bno055_getVector+0x254>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	ee07 3a90 	vmov	s15, r3
 800051c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000520:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000524:	e018      	b.n	8000558 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800052a:	2b1a      	cmp	r3, #26
 800052c:	d108      	bne.n	8000540 <bno055_getVector+0xc0>
    scale = eulerScale;
 800052e:	4b6a      	ldr	r3, [pc, #424]	@ (80006d8 <bno055_getVector+0x258>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	ee07 3a90 	vmov	s15, r3
 8000536:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800053a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800053e:	e00b      	b.n	8000558 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000544:	2b20      	cmp	r3, #32
 8000546:	d107      	bne.n	8000558 <bno055_getVector+0xd8>
    scale = quaScale;
 8000548:	4b64      	ldr	r3, [pc, #400]	@ (80006dc <bno055_getVector+0x25c>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	ee07 3a90 	vmov	s15, r3
 8000550:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000554:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000558:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800055c:	2220      	movs	r2, #32
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f004 fbb1 	bl	8004cc8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000566:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800056a:	2b20      	cmp	r3, #32
 800056c:	d14c      	bne.n	8000608 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800056e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	ee07 3a90 	vmov	s15, r3
 8000584:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000588:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800058c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000590:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000594:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21a      	sxth	r2, r3
 800059c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	ee07 3a90 	vmov	s15, r3
 80005aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80005ae:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80005b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80005b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80005ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80005d4:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80005d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80005dc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80005e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	ee07 3a90 	vmov	s15, r3
 80005f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80005fa:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80005fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000602:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000606:	e038      	b.n	800067a <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000608:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	b21a      	sxth	r2, r3
 8000610:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000614:	b21b      	sxth	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b21b      	sxth	r3, r3
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000622:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000626:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800062a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800062e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21a      	sxth	r2, r3
 8000636:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000648:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800064c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000650:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000654:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	b21a      	sxth	r2, r3
 800065c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800066e:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000672:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000676:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 800067a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800067e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800068a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800068e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000692:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000696:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800069a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800069e:	ec49 8b14 	vmov	d4, r8, r9
 80006a2:	ec45 4b15 	vmov	d5, r4, r5
 80006a6:	ec41 0b16 	vmov	d6, r0, r1
 80006aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80006ae:	eeb0 0b44 	vmov.f64	d0, d4
 80006b2:	eeb0 1b45 	vmov.f64	d1, d5
 80006b6:	eeb0 2b46 	vmov.f64	d2, d6
 80006ba:	eeb0 3b47 	vmov.f64	d3, d7
 80006be:	3778      	adds	r7, #120	@ 0x78
 80006c0:	46bd      	mov	sp, r7
 80006c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80006c6:	bf00      	nop
 80006c8:	3ff00000 	.word	0x3ff00000
 80006cc:	24000006 	.word	0x24000006
 80006d0:	24000000 	.word	0x24000000
 80006d4:	24000002 	.word	0x24000002
 80006d8:	24000004 	.word	0x24000004
 80006dc:	24000008 	.word	0x24000008

080006e0 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80006e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006e4:	b090      	sub	sp, #64	@ 0x40
 80006e6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80006e8:	201a      	movs	r0, #26
 80006ea:	f7ff fec9 	bl	8000480 <bno055_getVector>
 80006ee:	eeb0 4b40 	vmov.f64	d4, d0
 80006f2:	eeb0 5b41 	vmov.f64	d5, d1
 80006f6:	eeb0 6b42 	vmov.f64	d6, d2
 80006fa:	eeb0 7b43 	vmov.f64	d7, d3
 80006fe:	ed87 4b08 	vstr	d4, [r7, #32]
 8000702:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000706:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800070a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800070e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000712:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000716:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800071a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800071e:	ec49 8b14 	vmov	d4, r8, r9
 8000722:	ec45 4b15 	vmov	d5, r4, r5
 8000726:	ec41 0b16 	vmov	d6, r0, r1
 800072a:	ec43 2b17 	vmov	d7, r2, r3
}
 800072e:	eeb0 0b44 	vmov.f64	d0, d4
 8000732:	eeb0 1b45 	vmov.f64	d1, d5
 8000736:	eeb0 2b46 	vmov.f64	d2, d6
 800073a:	eeb0 3b47 	vmov.f64	d3, d7
 800073e:	3740      	adds	r7, #64	@ 0x40
 8000740:	46bd      	mov	sp, r7
 8000742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000746 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000746:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800074a:	b090      	sub	sp, #64	@ 0x40
 800074c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800074e:	2020      	movs	r0, #32
 8000750:	f7ff fe96 	bl	8000480 <bno055_getVector>
 8000754:	eeb0 4b40 	vmov.f64	d4, d0
 8000758:	eeb0 5b41 	vmov.f64	d5, d1
 800075c:	eeb0 6b42 	vmov.f64	d6, d2
 8000760:	eeb0 7b43 	vmov.f64	d7, d3
 8000764:	ed87 4b08 	vstr	d4, [r7, #32]
 8000768:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800076c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000770:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000778:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800077c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000784:	ec49 8b14 	vmov	d4, r8, r9
 8000788:	ec45 4b15 	vmov	d5, r4, r5
 800078c:	ec41 0b16 	vmov	d6, r0, r1
 8000790:	ec43 2b17 	vmov	d7, r2, r3
}
 8000794:	eeb0 0b44 	vmov.f64	d0, d4
 8000798:	eeb0 1b45 	vmov.f64	d1, d5
 800079c:	eeb0 2b46 	vmov.f64	d2, d6
 80007a0:	eeb0 3b47 	vmov.f64	d3, d7
 80007a4:	3740      	adds	r7, #64	@ 0x40
 80007a6:	46bd      	mov	sp, r7
 80007a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080007ac <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <bno055_assignI2C+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	24000094 	.word	0x24000094

080007cc <bno055_delay>:

void bno055_delay(int time) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fcfa 	bl	80011d0 <HAL_Delay>
#endif
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	733b      	strb	r3, [r7, #12]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80007fc:	4b53      	ldr	r3, [pc, #332]	@ (800094c <bno055_writeData+0x168>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	230a      	movs	r3, #10
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2150      	movs	r1, #80	@ 0x50
 800080c:	f001 f8a4 	bl	8001958 <HAL_I2C_Master_Transmit>
 8000810:	4603      	mov	r3, r0
 8000812:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	2b00      	cmp	r3, #0
 8000818:	f000 8092 	beq.w	8000940 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d103      	bne.n	800082a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000822:	484b      	ldr	r0, [pc, #300]	@ (8000950 <bno055_writeData+0x16c>)
 8000824:	f004 f970 	bl	8004b08 <puts>
 8000828:	e012      	b.n	8000850 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d103      	bne.n	8000838 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000830:	4848      	ldr	r0, [pc, #288]	@ (8000954 <bno055_writeData+0x170>)
 8000832:	f004 f969 	bl	8004b08 <puts>
 8000836:	e00b      	b.n	8000850 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d103      	bne.n	8000846 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800083e:	4846      	ldr	r0, [pc, #280]	@ (8000958 <bno055_writeData+0x174>)
 8000840:	f004 f962 	bl	8004b08 <puts>
 8000844:	e004      	b.n	8000850 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	4619      	mov	r1, r3
 800084a:	4844      	ldr	r0, [pc, #272]	@ (800095c <bno055_writeData+0x178>)
 800084c:	f004 f8f4 	bl	8004a38 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000850:	4b3e      	ldr	r3, [pc, #248]	@ (800094c <bno055_writeData+0x168>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fa9b 	bl	8001d90 <HAL_I2C_GetError>
 800085a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d070      	beq.n	8000944 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d103      	bne.n	8000870 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000868:	483d      	ldr	r0, [pc, #244]	@ (8000960 <bno055_writeData+0x17c>)
 800086a:	f004 f94d 	bl	8004b08 <puts>
 800086e:	e021      	b.n	80008b4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d103      	bne.n	800087e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000876:	483b      	ldr	r0, [pc, #236]	@ (8000964 <bno055_writeData+0x180>)
 8000878:	f004 f946 	bl	8004b08 <puts>
 800087c:	e01a      	b.n	80008b4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d103      	bne.n	800088c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000884:	4838      	ldr	r0, [pc, #224]	@ (8000968 <bno055_writeData+0x184>)
 8000886:	f004 f93f 	bl	8004b08 <puts>
 800088a:	e013      	b.n	80008b4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b08      	cmp	r3, #8
 8000890:	d103      	bne.n	800089a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000892:	4836      	ldr	r0, [pc, #216]	@ (800096c <bno055_writeData+0x188>)
 8000894:	f004 f938 	bl	8004b08 <puts>
 8000898:	e00c      	b.n	80008b4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	2b10      	cmp	r3, #16
 800089e:	d103      	bne.n	80008a8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80008a0:	4833      	ldr	r0, [pc, #204]	@ (8000970 <bno055_writeData+0x18c>)
 80008a2:	f004 f931 	bl	8004b08 <puts>
 80008a6:	e005      	b.n	80008b4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	2b20      	cmp	r3, #32
 80008ac:	d102      	bne.n	80008b4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80008ae:	4831      	ldr	r0, [pc, #196]	@ (8000974 <bno055_writeData+0x190>)
 80008b0:	f004 f92a 	bl	8004b08 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <bno055_writeData+0x168>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fa5b 	bl	8001d74 <HAL_I2C_GetState>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d103      	bne.n	80008d0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80008c8:	482b      	ldr	r0, [pc, #172]	@ (8000978 <bno055_writeData+0x194>)
 80008ca:	f004 f91d 	bl	8004b08 <puts>
 80008ce:	e03a      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	2b20      	cmp	r3, #32
 80008d4:	d103      	bne.n	80008de <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80008d6:	4828      	ldr	r0, [pc, #160]	@ (8000978 <bno055_writeData+0x194>)
 80008d8:	f004 f916 	bl	8004b08 <puts>
 80008dc:	e033      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b24      	cmp	r3, #36	@ 0x24
 80008e2:	d103      	bne.n	80008ec <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80008e4:	4825      	ldr	r0, [pc, #148]	@ (800097c <bno055_writeData+0x198>)
 80008e6:	f004 f90f 	bl	8004b08 <puts>
 80008ea:	e02c      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b21      	cmp	r3, #33	@ 0x21
 80008f0:	d103      	bne.n	80008fa <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80008f2:	4823      	ldr	r0, [pc, #140]	@ (8000980 <bno055_writeData+0x19c>)
 80008f4:	f004 f908 	bl	8004b08 <puts>
 80008f8:	e025      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b22      	cmp	r3, #34	@ 0x22
 80008fe:	d103      	bne.n	8000908 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000900:	4820      	ldr	r0, [pc, #128]	@ (8000984 <bno055_writeData+0x1a0>)
 8000902:	f004 f901 	bl	8004b08 <puts>
 8000906:	e01e      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b28      	cmp	r3, #40	@ 0x28
 800090c:	d103      	bne.n	8000916 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800090e:	481e      	ldr	r0, [pc, #120]	@ (8000988 <bno055_writeData+0x1a4>)
 8000910:	f004 f8fa 	bl	8004b08 <puts>
 8000914:	e017      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2b29      	cmp	r3, #41	@ 0x29
 800091a:	d103      	bne.n	8000924 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800091c:	481b      	ldr	r0, [pc, #108]	@ (800098c <bno055_writeData+0x1a8>)
 800091e:	f004 f8f3 	bl	8004b08 <puts>
 8000922:	e010      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b2a      	cmp	r3, #42	@ 0x2a
 8000928:	d103      	bne.n	8000932 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800092a:	4819      	ldr	r0, [pc, #100]	@ (8000990 <bno055_writeData+0x1ac>)
 800092c:	f004 f8ec 	bl	8004b08 <puts>
 8000930:	e009      	b.n	8000946 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b60      	cmp	r3, #96	@ 0x60
 8000936:	d106      	bne.n	8000946 <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000938:	4816      	ldr	r0, [pc, #88]	@ (8000994 <bno055_writeData+0x1b0>)
 800093a:	f004 f8e5 	bl	8004b08 <puts>
 800093e:	e002      	b.n	8000946 <bno055_writeData+0x162>
    return;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <bno055_writeData+0x162>
    return;
 8000944:	bf00      	nop
  } else if (state == HAL_I2C_STATE_ERROR) {
    printf("HAL_I2C_STATE_ERROR\r\n");
  }*/
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	24000094 	.word	0x24000094
 8000950:	08005824 	.word	0x08005824
 8000954:	08005848 	.word	0x08005848
 8000958:	08005870 	.word	0x08005870
 800095c:	08005894 	.word	0x08005894
 8000960:	080058ac 	.word	0x080058ac
 8000964:	080058c0 	.word	0x080058c0
 8000968:	080058d4 	.word	0x080058d4
 800096c:	080058e8 	.word	0x080058e8
 8000970:	080058fc 	.word	0x080058fc
 8000974:	08005910 	.word	0x08005910
 8000978:	08005928 	.word	0x08005928
 800097c:	08005940 	.word	0x08005940
 8000980:	08005954 	.word	0x08005954
 8000984:	0800596c 	.word	0x0800596c
 8000988:	08005984 	.word	0x08005984
 800098c:	0800599c 	.word	0x0800599c
 8000990:	080059bc 	.word	0x080059bc
 8000994:	080059dc 	.word	0x080059dc

08000998 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <bno055_readData+0x40>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	1dfa      	adds	r2, r7, #7
 80009ae:	2364      	movs	r3, #100	@ 0x64
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	2150      	movs	r1, #80	@ 0x50
 80009b6:	f000 ffcf 	bl	8001958 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <bno055_readData+0x40>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	2264      	movs	r2, #100	@ 0x64
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	2150      	movs	r1, #80	@ 0x50
 80009ca:	f001 f8dd 	bl	8001b88 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000094 	.word	0x24000094

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009e0:	f000 f90a 	bl	8000bf8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fb62 	bl	80010ac <HAL_Init>

  /* USER CODE BEGIN Init */
  bno055_assignI2C(&hi2c1);
 80009e8:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <main+0x80>)
 80009ea:	f7ff fedf 	bl	80007ac <bno055_assignI2C>
  bno055_setup();
 80009ee:	f7ff fd1f 	bl	8000430 <bno055_setup>
  bno055_setOperationModeNDOF();
 80009f2:	f7ff fd0a 	bl	800040a <bno055_setOperationModeNDOF>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f837 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 f8d3 	bl	8000ba4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009fe:	f000 f891 	bl	8000b24 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  v = bno055_getVectorEuler();
 8000a02:	f7ff fe6d 	bl	80006e0 <bno055_getVectorEuler>
 8000a06:	eeb0 4b40 	vmov.f64	d4, d0
 8000a0a:	eeb0 5b41 	vmov.f64	d5, d1
 8000a0e:	eeb0 6b42 	vmov.f64	d6, d2
 8000a12:	eeb0 7b43 	vmov.f64	d7, d3
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <main+0x84>)
 8000a18:	ed83 4b00 	vstr	d4, [r3]
 8000a1c:	ed83 5b02 	vstr	d5, [r3, #8]
 8000a20:	ed83 6b04 	vstr	d6, [r3, #16]
 8000a24:	ed83 7b06 	vstr	d7, [r3, #24]
	  //printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
	  q = bno055_getVectorQuaternion();
 8000a28:	f7ff fe8d 	bl	8000746 <bno055_getVectorQuaternion>
 8000a2c:	eeb0 4b40 	vmov.f64	d4, d0
 8000a30:	eeb0 5b41 	vmov.f64	d5, d1
 8000a34:	eeb0 6b42 	vmov.f64	d6, d2
 8000a38:	eeb0 7b43 	vmov.f64	d7, d3
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <main+0x88>)
 8000a3e:	ed83 4b00 	vstr	d4, [r3]
 8000a42:	ed83 5b02 	vstr	d5, [r3, #8]
 8000a46:	ed83 6b04 	vstr	d6, [r3, #16]
 8000a4a:	ed83 7b06 	vstr	d7, [r3, #24]
	  //printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	  HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f000 fbbd 	bl	80011d0 <HAL_Delay>
	  v = bno055_getVectorEuler();
 8000a56:	bf00      	nop
 8000a58:	e7d3      	b.n	8000a02 <main+0x26>
 8000a5a:	bf00      	nop
 8000a5c:	24000098 	.word	0x24000098
 8000a60:	240000f0 	.word	0x240000f0
 8000a64:	24000110 	.word	0x24000110

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09c      	sub	sp, #112	@ 0x70
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	224c      	movs	r2, #76	@ 0x4c
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 f926 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2220      	movs	r2, #32
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 f920 	bl	8004cc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f001 fccb 	bl	8002424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a9a:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aae:	bf00      	nop
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000abc:	d1f8      	bne.n	8000ab0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000ac6:	2340      	movs	r3, #64	@ 0x40
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fce0 	bl	8002498 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ade:	f000 f8b7 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	233f      	movs	r3, #63	@ 0x3f
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af6:	2340      	movs	r3, #64	@ 0x40
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f8a0 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b12:	f000 f89d 	bl	8000c50 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3770      	adds	r7, #112	@ 0x70
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58024800 	.word	0x58024800

08000b24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <MX_I2C1_Init+0x78>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5e:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b60:	f000 fe5e 	bl	8001820 <HAL_I2C_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b6a:	f000 f871 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4809      	ldr	r0, [pc, #36]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b72:	f001 fbbf 	bl	80022f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f000 f868 	bl	8000c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_I2C1_Init+0x74>)
 8000b84:	f001 fc01 	bl	800238a <HAL_I2CEx_ConfigDigitalFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f85f 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000098 	.word	0x24000098
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	00707cbb 	.word	0x00707cbb

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_GPIO_Init+0x50>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c0a:	f000 fbe9 	bl	80013e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c1a:	231f      	movs	r3, #31
 8000c1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c1e:	2387      	movs	r3, #135	@ 0x87
 8000c20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c26:	2300      	movs	r3, #0
 8000c28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fc07 	bl	8001450 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c42:	2004      	movs	r0, #4
 8000c44:	f000 fbe4 	bl	8001410 <HAL_MPU_Enable>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <HAL_MspInit+0x30>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x30>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x30>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	58024400 	.word	0x58024400

08000c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0b8      	sub	sp, #224	@ 0xe0
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	22b8      	movs	r2, #184	@ 0xb8
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f809 	bl	8004cc8 <memset>
  if(hi2c->Instance==I2C1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a26      	ldr	r2, [pc, #152]	@ (8000d54 <HAL_I2C_MspInit+0xc4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d145      	bne.n	8000d4c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cc0:	f04f 0208 	mov.w	r2, #8
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fae8 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ce2:	f7ff ffb5 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	4a1a      	ldr	r2, [pc, #104]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d04:	23c0      	movs	r3, #192	@ 0xc0
 8000d06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <HAL_I2C_MspInit+0xcc>)
 8000d2a:	f000 fbd1 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d34:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_I2C_MspInit+0xc8>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37e0      	adds	r7, #224	@ 0xe0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40005400 	.word	0x40005400
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020400 	.word	0x58020400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f9eb 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e00a      	b.n	8000de6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd0:	f3af 8000 	nop.w
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	60ba      	str	r2, [r7, #8]
 8000ddc:	b2ca      	uxtb	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	dbf0      	blt.n	8000dd0 <_read+0x12>
  }

  return len;
 8000dee:	687b      	ldr	r3, [r7, #4]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e009      	b.n	8000e1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	60ba      	str	r2, [r7, #8]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbf1      	blt.n	8000e0a <_write+0x12>
  }
  return len;
 8000e26:	687b      	ldr	r3, [r7, #4]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_close>:

int _close(int file)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e58:	605a      	str	r2, [r3, #4]
  return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_isatty>:

int _isatty(int file)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f003 ff4c 	bl	8004d64 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24050000 	.word	0x24050000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	24000130 	.word	0x24000130
 8000f00:	24000288 	.word	0x24000288

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f08:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <SystemInit+0x100>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001004 <SystemInit+0x100>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f18:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <SystemInit+0x104>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d807      	bhi.n	8000f34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <SystemInit+0x104>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	4a36      	ldr	r2, [pc, #216]	@ (8001008 <SystemInit+0x104>)
 8000f2e:	f043 0307 	orr.w	r3, r3, #7
 8000f32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f34:	4b35      	ldr	r3, [pc, #212]	@ (800100c <SystemInit+0x108>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a34      	ldr	r2, [pc, #208]	@ (800100c <SystemInit+0x108>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f40:	4b32      	ldr	r3, [pc, #200]	@ (800100c <SystemInit+0x108>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <SystemInit+0x108>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4930      	ldr	r1, [pc, #192]	@ (800100c <SystemInit+0x108>)
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <SystemInit+0x10c>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <SystemInit+0x104>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <SystemInit+0x104>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 030f 	bic.w	r3, r3, #15
 8000f66:	4a28      	ldr	r2, [pc, #160]	@ (8001008 <SystemInit+0x104>)
 8000f68:	f043 0307 	orr.w	r3, r3, #7
 8000f6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f6e:	4b27      	ldr	r3, [pc, #156]	@ (800100c <SystemInit+0x108>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <SystemInit+0x108>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <SystemInit+0x108>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <SystemInit+0x108>)
 8000f82:	4a24      	ldr	r2, [pc, #144]	@ (8001014 <SystemInit+0x110>)
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <SystemInit+0x108>)
 8000f88:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <SystemInit+0x114>)
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <SystemInit+0x108>)
 8000f8e:	4a23      	ldr	r2, [pc, #140]	@ (800101c <SystemInit+0x118>)
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <SystemInit+0x108>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <SystemInit+0x108>)
 8000f9a:	4a20      	ldr	r2, [pc, #128]	@ (800101c <SystemInit+0x118>)
 8000f9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <SystemInit+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <SystemInit+0x108>)
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <SystemInit+0x118>)
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <SystemInit+0x108>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <SystemInit+0x108>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	@ (800100c <SystemInit+0x108>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <SystemInit+0x108>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <SystemInit+0x108>)
 8000fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d113      	bne.n	8000ff8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <SystemInit+0x108>)
 8000fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <SystemInit+0x108>)
 8000fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fdc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <SystemInit+0x11c>)
 8000fe2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <SystemInit+0x108>)
 8000fea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fee:	4a07      	ldr	r2, [pc, #28]	@ (800100c <SystemInit+0x108>)
 8000ff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ff4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	52002000 	.word	0x52002000
 800100c:	58024400 	.word	0x58024400
 8001010:	eaf6ed7f 	.word	0xeaf6ed7f
 8001014:	02020200 	.word	0x02020200
 8001018:	01ff0000 	.word	0x01ff0000
 800101c:	01010280 	.word	0x01010280
 8001020:	52004000 	.word	0x52004000

08001024 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <ExitRun0Mode+0x2c>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <ExitRun0Mode+0x2c>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001034:	bf00      	nop
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <ExitRun0Mode+0x2c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	58024800 	.word	0x58024800

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001090 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001058:	f7ff ffe4 	bl	8001024 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800105c:	f7ff ff52 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f003 fe73 	bl	8004d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fca7 	bl	80009dc <main>
  bx  lr
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001098:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800109c:	08005a48 	.word	0x08005a48
  ldr r2, =_sbss
 80010a0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80010a4:	24000284 	.word	0x24000284

080010a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC3_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f000 f962 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b8:	f001 ff7e 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_Init+0x68>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	4913      	ldr	r1, [pc, #76]	@ (8001118 <HAL_Init+0x6c>)
 80010ca:	5ccb      	ldrb	r3, [r1, r3]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_Init+0x68>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_Init+0x6c>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_Init+0x70>)
 80010ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_Init+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f814 	bl	8001124 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e002      	b.n	800110c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001106:	f7ff fda9 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58024400 	.word	0x58024400
 8001118:	080059f4 	.word	0x080059f4
 800111c:	24000010 	.word	0x24000010
 8001120:	2400000c 	.word	0x2400000c

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_InitTick+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e021      	b.n	800117c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_InitTick+0x64>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_InitTick+0x60>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f939 	bl	80013c6 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f911 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <HAL_InitTick+0x68>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	24000018 	.word	0x24000018
 8001188:	2400000c 	.word	0x2400000c
 800118c:	24000014 	.word	0x24000014

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	24000018 	.word	0x24000018
 80011b4:	24000134 	.word	0x24000134

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	24000134 	.word	0x24000134

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000018 	.word	0x24000018

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <__NVIC_SetPriorityGrouping+0x40>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	4313      	orrs	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <__NVIC_SetPriorityGrouping+0x40>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	05fa0000 	.word	0x05fa0000

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	@ (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	@ 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff47 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff5e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff90 	bl	80012d0 <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5f 	bl	800127c <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffb2 	bl	8001338 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013e4:	f3bf 8f5f 	dmb	sy
}
 80013e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <HAL_MPU_Disable+0x28>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <HAL_MPU_Disable+0x28>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_MPU_Disable+0x2c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	e000ed90 	.word	0xe000ed90

08001410 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_MPU_Enable+0x38>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_MPU_Enable+0x3c>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_MPU_Enable+0x3c>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800142e:	f3bf 8f4f 	dsb	sy
}
 8001432:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001434:	f3bf 8f6f 	isb	sy
}
 8001438:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed90 	.word	0xe000ed90
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	785a      	ldrb	r2, [r3, #1]
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_MPU_ConfigRegion+0x7c>)
 800145e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <HAL_MPU_ConfigRegion+0x7c>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <HAL_MPU_ConfigRegion+0x7c>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800146c:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_MPU_ConfigRegion+0x7c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7b1b      	ldrb	r3, [r3, #12]
 8001478:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7adb      	ldrb	r3, [r3, #11]
 800147e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001480:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001488:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7b5b      	ldrb	r3, [r3, #13]
 800148e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001490:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7b9b      	ldrb	r3, [r3, #14]
 8001496:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001498:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7bdb      	ldrb	r3, [r3, #15]
 800149e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7a5b      	ldrb	r3, [r3, #9]
 80014a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7a1b      	ldrb	r3, [r3, #8]
 80014ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014bc:	6113      	str	r3, [r2, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed90 	.word	0xe000ed90

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014de:	4b86      	ldr	r3, [pc, #536]	@ (80016f8 <HAL_GPIO_Init+0x228>)
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014e2:	e18c      	b.n	80017fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 817e 	beq.w	80017f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x44>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	69b9      	ldr	r1, [r7, #24]
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80d8 	beq.w	80017f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <HAL_GPIO_Init+0x22c>)
 800164a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164e:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <HAL_GPIO_Init+0x22c>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_GPIO_Init+0x22c>)
 800165a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a26      	ldr	r2, [pc, #152]	@ (8001700 <HAL_GPIO_Init+0x230>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_GPIO_Init+0x234>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d04a      	beq.n	8001728 <HAL_GPIO_Init+0x258>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <HAL_GPIO_Init+0x238>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <HAL_GPIO_Init+0x23c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001710 <HAL_GPIO_Init+0x240>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <HAL_GPIO_Init+0x244>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x216>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_GPIO_Init+0x248>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x212>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_GPIO_Init+0x24c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x20e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <HAL_GPIO_Init+0x250>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x20a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <HAL_GPIO_Init+0x254>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x206>
 80016d2:	2309      	movs	r3, #9
 80016d4:	e029      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016d6:	230a      	movs	r3, #10
 80016d8:	e027      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e025      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016de:	2306      	movs	r3, #6
 80016e0:	e023      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e021      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e01f      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e01d      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e01b      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e019      	b.n	800172a <HAL_GPIO_Init+0x25a>
 80016f6:	bf00      	nop
 80016f8:	58000080 	.word	0x58000080
 80016fc:	58024400 	.word	0x58024400
 8001700:	58000400 	.word	0x58000400
 8001704:	58020000 	.word	0x58020000
 8001708:	58020400 	.word	0x58020400
 800170c:	58020800 	.word	0x58020800
 8001710:	58020c00 	.word	0x58020c00
 8001714:	58021000 	.word	0x58021000
 8001718:	58021400 	.word	0x58021400
 800171c:	58021800 	.word	0x58021800
 8001720:	58021c00 	.word	0x58021c00
 8001724:	58022400 	.word	0x58022400
 8001728:	2300      	movs	r3, #0
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173a:	4938      	ldr	r1, [pc, #224]	@ (800181c <HAL_GPIO_Init+0x34c>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800176e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f ae6b 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3724      	adds	r7, #36	@ 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58000400 	.word	0x58000400

08001820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e08b      	b.n	800194a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fa22 	bl	8000c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2224      	movs	r2, #36	@ 0x24
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e006      	b.n	80018a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d108      	bne.n	80018c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	e007      	b.n	80018d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <HAL_I2C_Init+0x134>)
 80018de:	430b      	orrs	r3, r1
 80018e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69d9      	ldr	r1, [r3, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	02008000 	.word	0x02008000

08001958 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	817b      	strh	r3, [r7, #10]
 8001968:	4613      	mov	r3, r2
 800196a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b20      	cmp	r3, #32
 8001976:	f040 80fd 	bne.w	8001b74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_I2C_Master_Transmit+0x30>
 8001984:	2302      	movs	r3, #2
 8001986:	e0f6      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001990:	f7ff fc12 	bl	80011b8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2319      	movs	r3, #25
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fa24 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0e1      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2221      	movs	r2, #33	@ 0x21
 80019b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2210      	movs	r2, #16
 80019be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2bff      	cmp	r3, #255	@ 0xff
 80019e2:	d906      	bls.n	80019f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	22ff      	movs	r2, #255	@ 0xff
 80019e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80019ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e007      	b.n	8001a02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d024      	beq.n	8001a54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <HAL_I2C_Master_Transmit+0x228>)
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fc1f 	bl	8002290 <I2C_TransferConfig>
 8001a52:	e066      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	8979      	ldrh	r1, [r7, #10]
 8001a5c:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <HAL_I2C_Master_Transmit+0x228>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fc14 	bl	8002290 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a68:	e05b      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fa17 	bl	8001ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07b      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d034      	beq.n	8001b22 <HAL_I2C_Master_Transmit+0x1ca>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d130      	bne.n	8001b22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f990 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e04d      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2bff      	cmp	r3, #255	@ 0xff
 8001ae2:	d90e      	bls.n	8001b02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	22ff      	movs	r2, #255	@ 0xff
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fbc8 	bl	8002290 <I2C_TransferConfig>
 8001b00:	e00f      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	8979      	ldrh	r1, [r7, #10]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fbb7 	bl	8002290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d19e      	bne.n	8001a6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	6a39      	ldr	r1, [r7, #32]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f9fd 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e01a      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_I2C_Master_Transmit+0x22c>)
 8001b54:	400b      	ands	r3, r1
 8001b56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	80002000 	.word	0x80002000
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	817b      	strh	r3, [r7, #10]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	f040 80db 	bne.w	8001d60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Master_Receive+0x30>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0d4      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fafa 	bl	80011b8 <HAL_GetTick>
 8001bc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f90c 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0bf      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2222      	movs	r2, #34	@ 0x22
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2210      	movs	r2, #16
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	893a      	ldrh	r2, [r7, #8]
 8001c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2bff      	cmp	r3, #255	@ 0xff
 8001c12:	d90e      	bls.n	8001c32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	22ff      	movs	r2, #255	@ 0xff
 8001c18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	8979      	ldrh	r1, [r7, #10]
 8001c22:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <HAL_I2C_Master_Receive+0x1e4>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fb30 	bl	8002290 <I2C_TransferConfig>
 8001c30:	e06d      	b.n	8001d0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	4b49      	ldr	r3, [pc, #292]	@ (8001d6c <HAL_I2C_Master_Receive+0x1e4>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fb1f 	bl	8002290 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c52:	e05c      	b.n	8001d0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	6a39      	ldr	r1, [r7, #32]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f9ad 	bl	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e07c      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d034      	beq.n	8001d0e <HAL_I2C_Master_Receive+0x186>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d130      	bne.n	8001d0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2180      	movs	r1, #128	@ 0x80
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f89a 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e04d      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2bff      	cmp	r3, #255	@ 0xff
 8001cce:	d90e      	bls.n	8001cee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	22ff      	movs	r2, #255	@ 0xff
 8001cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	8979      	ldrh	r1, [r7, #10]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fad2 	bl	8002290 <I2C_TransferConfig>
 8001cec:	e00f      	b.n	8001d0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fac1 	bl	8002290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d19d      	bne.n	8001c54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	6a39      	ldr	r1, [r7, #32]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f907 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e01a      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2220      	movs	r2, #32
 8001d32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6859      	ldr	r1, [r3, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_I2C_Master_Receive+0x1e8>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	80002400 	.word	0x80002400
 8001d70:	fe00e800 	.word	0xfe00e800

08001d74 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d82:	b2db      	uxtb	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d103      	bne.n	8001dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d007      	beq.n	8001de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	619a      	str	r2, [r3, #24]
  }
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	e03b      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f962 	bl	80020d0 <I2C_IsErrorOccurred>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d02d      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7ff f9cb 	bl	80011b8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d122      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d113      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f043 0220 	orr.w	r2, r3, #32
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b4      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eae:	e033      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f90b 	bl	80020d0 <I2C_IsErrorOccurred>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e031      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d025      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ecc:	f7ff f974 	bl	80011b8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d013      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1c4      	bne.n	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	e02f      	b.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f8c4 	bl	80020d0 <I2C_IsErrorOccurred>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e02d      	b.n	8001fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f931 	bl	80011b8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11a      	bne.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d013      	beq.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d1c8      	bne.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001fc8:	e071      	b.n	80020ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f87e 	bl	80020d0 <I2C_IsErrorOccurred>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d13b      	bne.n	8002064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d138      	bne.n	8002064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d105      	bne.n	800200c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d121      	bne.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2210      	movs	r2, #16
 8002020:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2204      	movs	r2, #4
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800203c:	400b      	ands	r3, r1
 800203e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	75fb      	strb	r3, [r7, #23]
 800205c:	e002      	b.n	8002064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002064:	f7ff f8a8 	bl	80011b8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d302      	bcc.n	800207a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d116      	bne.n	80020ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d00f      	beq.n	80020ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d002      	beq.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d083      	beq.n	8001fca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	fe00e800 	.word	0xfe00e800

080020d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d068      	beq.n	80021ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2210      	movs	r2, #16
 8002102:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002104:	e049      	b.n	800219a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d045      	beq.n	800219a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f853 	bl	80011b8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_IsErrorOccurred+0x54>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13a      	bne.n	800219a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002136:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002146:	d121      	bne.n	800218c <I2C_IsErrorOccurred+0xbc>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800214e:	d01d      	beq.n	800218c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b20      	cmp	r3, #32
 8002154:	d01a      	beq.n	800218c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002164:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002166:	f7ff f827 	bl	80011b8 <HAL_GetTick>
 800216a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800216c:	e00e      	b.n	800218c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800216e:	f7ff f823 	bl	80011b8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b19      	cmp	r3, #25
 800217a:	d907      	bls.n	800218c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800218a:	e006      	b.n	800219a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d1e9      	bne.n	800216e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d003      	beq.n	80021b0 <I2C_IsErrorOccurred+0xe0>
 80021a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0aa      	beq.n	8002106 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d103      	bne.n	80021c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff fdaf 	bl	8001da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <I2C_IsErrorOccurred+0x1bc>)
 8002256:	400b      	ands	r3, r1
 8002258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800227e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002282:	4618      	mov	r0, r3
 8002284:	3728      	adds	r7, #40	@ 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	4613      	mov	r3, r2
 80022a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a8:	7a7b      	ldrb	r3, [r7, #9]
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022be:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	0d5b      	lsrs	r3, r3, #21
 80022ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <I2C_TransferConfig+0x60>)
 80022d0:	430b      	orrs	r3, r1
 80022d2:	43db      	mvns	r3, r3
 80022d4:	ea02 0103 	and.w	r1, r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	03ff63ff 	.word	0x03ff63ff

080022f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	d138      	bne.n	800237c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002314:	2302      	movs	r3, #2
 8002316:	e032      	b.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	@ 0x24
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	d139      	bne.n	8002414 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e033      	b.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2224      	movs	r2, #36	@ 0x24
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00a      	beq.n	800244e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002438:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01f      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e01d      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	490f      	ldr	r1, [pc, #60]	@ (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800245e:	f7fe feab 	bl	80011b8 <HAL_GetTick>
 8002462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002464:	e009      	b.n	800247a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002466:	f7fe fea7 	bl	80011b8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002474:	d901      	bls.n	800247a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002486:	d1ee      	bne.n	8002466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024800 	.word	0x58024800

08002498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	@ 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e3c8      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b8:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024c2:	4b86      	ldr	r3, [pc, #536]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d007      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	2b18      	cmp	r3, #24
 80024d2:	d110      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b7f      	ldr	r3, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e3a2      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b76      	ldr	r3, [pc, #472]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a75      	ldr	r2, [pc, #468]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b71      	ldr	r3, [pc, #452]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a70      	ldr	r2, [pc, #448]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6e      	ldr	r3, [pc, #440]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6d      	ldr	r2, [pc, #436]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b68      	ldr	r3, [pc, #416]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a67      	ldr	r2, [pc, #412]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b65      	ldr	r3, [pc, #404]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a64      	ldr	r2, [pc, #400]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b61      	ldr	r3, [pc, #388]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a60      	ldr	r2, [pc, #384]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b5e      	ldr	r3, [pc, #376]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5d      	ldr	r2, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fe20 	bl	80011b8 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fe1c 	bl	80011b8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e356      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258e:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fe0c 	bl	80011b8 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fe08 	bl	80011b8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e342      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b6:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 808c 	beq.w	80026ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d4:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025de:	4b3f      	ldr	r3, [pc, #252]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_RCC_OscConfig+0x162>
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2b18      	cmp	r3, #24
 80025ee:	d137      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c8>
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d132      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fa:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x17a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e314      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002612:	4b32      	ldr	r3, [pc, #200]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0219 	bic.w	r2, r3, #25
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	492f      	ldr	r1, [pc, #188]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fdc8 	bl	80011b8 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7fe fdc4 	bl	80011b8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e2fe      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263e:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	4920      	ldr	r1, [pc, #128]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265e:	e045      	b.n	80026ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d026      	beq.n	80026b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002668:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0219 	bic.w	r2, r3, #25
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4919      	ldr	r1, [pc, #100]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fd9d 	bl	80011b8 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fd99 	bl	80011b8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e2d3      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	490b      	ldr	r1, [pc, #44]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	e01a      	b.n	80026ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a08      	ldr	r2, [pc, #32]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fd79 	bl	80011b8 <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe fd75 	bl	80011b8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d903      	bls.n	80026e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e2af      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
 80026dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e0:	4b96      	ldr	r3, [pc, #600]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d06a      	beq.n	80027ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f8:	4b90      	ldr	r3, [pc, #576]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002700:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002702:	4b8e      	ldr	r3, [pc, #568]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d007      	beq.n	800271e <HAL_RCC_OscConfig+0x286>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b18      	cmp	r3, #24
 8002712:	d11b      	bne.n	800274c <HAL_RCC_OscConfig+0x2b4>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271e:	4b87      	ldr	r3, [pc, #540]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x29e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2b80      	cmp	r3, #128	@ 0x80
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e282      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002736:	4b81      	ldr	r3, [pc, #516]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	061b      	lsls	r3, r3, #24
 8002744:	497d      	ldr	r1, [pc, #500]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800274a:	e040      	b.n	80027ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d023      	beq.n	800279c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002754:	4b79      	ldr	r3, [pc, #484]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a78      	ldr	r2, [pc, #480]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800275a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fd2a 	bl	80011b8 <HAL_GetTick>
 8002764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002768:	f7fe fd26 	bl	80011b8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e260      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277a:	4b70      	ldr	r3, [pc, #448]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4969      	ldr	r1, [pc, #420]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800279c:	4b67      	ldr	r3, [pc, #412]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a66      	ldr	r2, [pc, #408]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80027a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fd06 	bl	80011b8 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b0:	f7fe fd02 	bl	80011b8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e23c      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c2:	4b5e      	ldr	r3, [pc, #376]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d036      	beq.n	8002848 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b56      	ldr	r3, [pc, #344]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80027e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e6:	4a55      	ldr	r2, [pc, #340]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fce3 	bl	80011b8 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7fe fcdf 	bl	80011b8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e219      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002808:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800280a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x35e>
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002816:	4b49      	ldr	r3, [pc, #292]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281a:	4a48      	ldr	r2, [pc, #288]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe fcc9 	bl	80011b8 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe fcc5 	bl	80011b8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1ff      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283c:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d036      	beq.n	80028c2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d019      	beq.n	8002890 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800285c:	4b37      	ldr	r3, [pc, #220]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a36      	ldr	r2, [pc, #216]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002862:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002866:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002868:	f7fe fca6 	bl	80011b8 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002870:	f7fe fca2 	bl	80011b8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1dc      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002882:	4b2e      	ldr	r3, [pc, #184]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x3d8>
 800288e:	e018      	b.n	80028c2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002890:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a29      	ldr	r2, [pc, #164]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800289a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800289c:	f7fe fc8c 	bl	80011b8 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a4:	f7fe fc88 	bl	80011b8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1c2      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b6:	4b21      	ldr	r3, [pc, #132]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8086 	beq.w	80029dc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x4a8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_RCC_OscConfig+0x4a8>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fc6c 	bl	80011b8 <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe fc68 	bl	80011b8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1a2      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_RCC_OscConfig+0x4a8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d106      	bne.n	8002918 <HAL_RCC_OscConfig+0x480>
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	e032      	b.n	800297e <HAL_RCC_OscConfig+0x4e6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4ac>
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a05      	ldr	r2, [pc, #20]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a02      	ldr	r2, [pc, #8]	@ (800293c <HAL_RCC_OscConfig+0x4a4>)
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	e021      	b.n	800297e <HAL_RCC_OscConfig+0x4e6>
 800293a:	bf00      	nop
 800293c:	58024400 	.word	0x58024400
 8002940:	58024800 	.word	0x58024800
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x4ce>
 800294c:	4b83      	ldr	r3, [pc, #524]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a82      	ldr	r2, [pc, #520]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	4b80      	ldr	r3, [pc, #512]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0x4e6>
 8002966:	4b7d      	ldr	r3, [pc, #500]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	4b7a      	ldr	r3, [pc, #488]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a79      	ldr	r2, [pc, #484]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fc17 	bl	80011b8 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fc13 	bl	80011b8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e14b      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a4:	4b6d      	ldr	r3, [pc, #436]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCC_OscConfig+0x4f6>
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc01 	bl	80011b8 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fbfd 	bl	80011b8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e135      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d0:	4b62      	ldr	r3, [pc, #392]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 812a 	beq.w	8002c3a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029e6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ee:	2b18      	cmp	r3, #24
 80029f0:	f000 80ba 	beq.w	8002b68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	f040 8095 	bne.w	8002b28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b57      	ldr	r3, [pc, #348]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fbd5 	bl	80011b8 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fbd1 	bl	80011b8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e10b      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a24:	4b4d      	ldr	r3, [pc, #308]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a30:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a34:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_RCC_OscConfig+0x6c8>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	430a      	orrs	r2, r1
 8002a44:	4945      	ldr	r1, [pc, #276]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	3b01      	subs	r3, #1
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a7a:	4938      	ldr	r1, [pc, #224]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a80:	4b36      	ldr	r3, [pc, #216]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	4a35      	ldr	r2, [pc, #212]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a8c:	4b33      	ldr	r3, [pc, #204]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a90:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_OscConfig+0x6cc>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a98:	00d2      	lsls	r2, r2, #3
 8002a9a:	4930      	ldr	r1, [pc, #192]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f023 020c 	bic.w	r2, r3, #12
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	492b      	ldr	r1, [pc, #172]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f023 0202 	bic.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4927      	ldr	r1, [pc, #156]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac4:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad0:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	4a1b      	ldr	r2, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fb5a 	bl	80011b8 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fb56 	bl	80011b8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e090      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x670>
 8002b26:	e088      	b.n	8002c3a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fb40 	bl	80011b8 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe fb3c 	bl	80011b8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e076      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4e:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_OscConfig+0x6c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x6a4>
 8002b5a:	e06e      	b.n	8002c3a <HAL_RCC_OscConfig+0x7a2>
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	fffffc0c 	.word	0xfffffc0c
 8002b64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b68:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b6e:	4b35      	ldr	r3, [pc, #212]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d031      	beq.n	8002be0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d12a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d122      	bne.n	8002be0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0a5b      	lsrs	r3, r3, #9
 8002bae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d111      	bne.n	8002be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d108      	bne.n	8002be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e02b      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002be4:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d01f      	beq.n	8002c3a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c06:	f7fe fad7 	bl	80011b8 <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c0c:	bf00      	nop
 8002c0e:	f7fe fad3 	bl	80011b8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d0f9      	beq.n	8002c0e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_RCC_OscConfig+0x7b0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	4906      	ldr	r1, [pc, #24]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_RCC_OscConfig+0x7ac>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3730      	adds	r7, #48	@ 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	58024400 	.word	0x58024400
 8002c48:	ffff0007 	.word	0xffff0007

08002c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e19c      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b8a      	ldr	r3, [pc, #552]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b87      	ldr	r3, [pc, #540]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4985      	ldr	r1, [pc, #532]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b83      	ldr	r3, [pc, #524]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e184      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d908      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cac:	4b78      	ldr	r3, [pc, #480]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4975      	ldr	r1, [pc, #468]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cda:	4b6d      	ldr	r3, [pc, #436]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	496a      	ldr	r1, [pc, #424]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	4b64      	ldr	r3, [pc, #400]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d908      	bls.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d08:	4b61      	ldr	r3, [pc, #388]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	495e      	ldr	r1, [pc, #376]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	4b59      	ldr	r3, [pc, #356]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d36:	4b56      	ldr	r3, [pc, #344]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4953      	ldr	r1, [pc, #332]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	4b4d      	ldr	r3, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4947      	ldr	r1, [pc, #284]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d055      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d82:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4940      	ldr	r1, [pc, #256]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0f6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db4:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d115      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ea      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dcc:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0de      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 0207 	bic.w	r2, r3, #7
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4925      	ldr	r1, [pc, #148]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f9db 	bl	80011b8 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e06:	f7fe f9d7 	bl	80011b8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0be      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d1eb      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d208      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f023 020f 	bic.w	r2, r3, #15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d214      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	4906      	ldr	r1, [pc, #24]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e086      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
 8002e8c:	52002000 	.word	0x52002000
 8002e90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4939      	ldr	r1, [pc, #228]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d208      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	492e      	ldr	r1, [pc, #184]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d208      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f0c:	4b25      	ldr	r3, [pc, #148]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4922      	ldr	r1, [pc, #136]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d010      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d208      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4917      	ldr	r1, [pc, #92]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f4c:	f000 f834 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	4912      	ldr	r1, [pc, #72]	@ (8002fa8 <HAL_RCC_ClockConfig+0x35c>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <HAL_RCC_ClockConfig+0x35c>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_RCC_ClockConfig+0x360>)
 8002f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f84:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <HAL_RCC_ClockConfig+0x364>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_RCC_ClockConfig+0x368>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe f8c8 	bl	8001124 <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	080059f4 	.word	0x080059f4
 8002fac:	24000010 	.word	0x24000010
 8002fb0:	2400000c 	.word	0x2400000c
 8002fb4:	24000014 	.word	0x24000014

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbe:	4bb3      	ldr	r3, [pc, #716]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fc6:	2b18      	cmp	r3, #24
 8002fc8:	f200 8155 	bhi.w	8003276 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003039 	.word	0x08003039
 8002fd8:	08003277 	.word	0x08003277
 8002fdc:	08003277 	.word	0x08003277
 8002fe0:	08003277 	.word	0x08003277
 8002fe4:	08003277 	.word	0x08003277
 8002fe8:	08003277 	.word	0x08003277
 8002fec:	08003277 	.word	0x08003277
 8002ff0:	08003277 	.word	0x08003277
 8002ff4:	0800305f 	.word	0x0800305f
 8002ff8:	08003277 	.word	0x08003277
 8002ffc:	08003277 	.word	0x08003277
 8003000:	08003277 	.word	0x08003277
 8003004:	08003277 	.word	0x08003277
 8003008:	08003277 	.word	0x08003277
 800300c:	08003277 	.word	0x08003277
 8003010:	08003277 	.word	0x08003277
 8003014:	08003065 	.word	0x08003065
 8003018:	08003277 	.word	0x08003277
 800301c:	08003277 	.word	0x08003277
 8003020:	08003277 	.word	0x08003277
 8003024:	08003277 	.word	0x08003277
 8003028:	08003277 	.word	0x08003277
 800302c:	08003277 	.word	0x08003277
 8003030:	08003277 	.word	0x08003277
 8003034:	0800306b 	.word	0x0800306b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003038:	4b94      	ldr	r3, [pc, #592]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003044:	4b91      	ldr	r3, [pc, #580]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	4a90      	ldr	r2, [pc, #576]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003056:	e111      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003058:	4b8d      	ldr	r3, [pc, #564]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305a:	61bb      	str	r3, [r7, #24]
      break;
 800305c:	e10e      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800305e:	4b8d      	ldr	r3, [pc, #564]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003060:	61bb      	str	r3, [r7, #24]
      break;
 8003062:	e10b      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003064:	4b8c      	ldr	r3, [pc, #560]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003066:	61bb      	str	r3, [r7, #24]
      break;
 8003068:	e108      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800306a:	4b88      	ldr	r3, [pc, #544]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003074:	4b85      	ldr	r3, [pc, #532]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800307e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003080:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800308a:	4b80      	ldr	r3, [pc, #512]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80e1 	beq.w	8003270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f000 8083 	beq.w	80031bc <HAL_RCC_GetSysClockFreq+0x204>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	f200 80a1 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x248>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x114>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d056      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ca:	e099      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030d8:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b62      	ldr	r3, [pc, #392]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a02 	vldr	s12, [r7, #8]
 8003116:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003132:	e087      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b51      	ldr	r3, [pc, #324]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a02 	vldr	s12, [r7, #8]
 800315a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003176:	e065      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b40      	ldr	r3, [pc, #256]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a02 	vldr	s12, [r7, #8]
 800319e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ba:	e043      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031fe:	e021      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a02 	vldr	s12, [r7, #8]
 8003226:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003242:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	0a5b      	lsrs	r3, r3, #9
 800324a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800324e:	3301      	adds	r3, #1
 8003250:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800325c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003268:	ee17 3a90 	vmov	r3, s15
 800326c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003278:	61bb      	str	r3, [r7, #24]
      break;
 800327a:	bf00      	nop
  }

  return sysclockfreq;
 800327c:	69bb      	ldr	r3, [r7, #24]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	58024400 	.word	0x58024400
 8003290:	03d09000 	.word	0x03d09000
 8003294:	003d0900 	.word	0x003d0900
 8003298:	017d7840 	.word	0x017d7840
 800329c:	46000000 	.word	0x46000000
 80032a0:	4c742400 	.word	0x4c742400
 80032a4:	4a742400 	.word	0x4a742400
 80032a8:	4bbebc20 	.word	0x4bbebc20

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b0c6      	sub	sp, #280	@ 0x118
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032d0:	2500      	movs	r5, #0
 80032d2:	ea54 0305 	orrs.w	r3, r4, r5
 80032d6:	d049      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032e2:	d02f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032e8:	d828      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ee:	d01a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f4:	d822      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032fe:	d007      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003300:	e01c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003302:	4bab      	ldr	r3, [pc, #684]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	4aaa      	ldr	r2, [pc, #680]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800330e:	e01a      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003314:	3308      	adds	r3, #8
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f967 	bl	80045ec <RCCEx_PLL2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003324:	e00f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332a:	3328      	adds	r3, #40	@ 0x28
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fa0e 	bl	8004750 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800334e:	4b98      	ldr	r3, [pc, #608]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003352:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800335a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800335c:	4a94      	ldr	r2, [pc, #592]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800335e:	430b      	orrs	r3, r1
 8003360:	6513      	str	r3, [r2, #80]	@ 0x50
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800336c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003378:	f04f 0900 	mov.w	r9, #0
 800337c:	ea58 0309 	orrs.w	r3, r8, r9
 8003380:	d047      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	2b04      	cmp	r3, #4
 800338a:	d82a      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800338c:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a9 	.word	0x080033a9
 8003398:	080033b7 	.word	0x080033b7
 800339c:	080033cd 	.word	0x080033cd
 80033a0:	080033eb 	.word	0x080033eb
 80033a4:	080033eb 	.word	0x080033eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b81      	ldr	r3, [pc, #516]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	4a80      	ldr	r2, [pc, #512]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b4:	e01a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ba:	3308      	adds	r3, #8
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f914 	bl	80045ec <RCCEx_PLL2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ca:	e00f      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d0:	3328      	adds	r3, #40	@ 0x28
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 f9bb 	bl	8004750 <RCCEx_PLL3_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e0:	e004      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f4:	4b6e      	ldr	r3, [pc, #440]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f8:	f023 0107 	bic.w	r1, r3, #7
 80033fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	4a6b      	ldr	r2, [pc, #428]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6513      	str	r3, [r2, #80]	@ 0x50
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800340e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800341e:	f04f 0b00 	mov.w	fp, #0
 8003422:	ea5a 030b 	orrs.w	r3, sl, fp
 8003426:	d05b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003430:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003434:	d03b      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003436:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800343a:	d834      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800343c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003440:	d037      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003446:	d82e      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003448:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800344c:	d033      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800344e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003452:	d828      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003458:	d01a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800345a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345e:	d822      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003468:	d007      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800346a:	e01c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4b50      	ldr	r3, [pc, #320]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	4a4f      	ldr	r2, [pc, #316]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003478:	e01e      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347e:	3308      	adds	r3, #8
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f8b2 	bl	80045ec <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800348e:	e013      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f959 	bl	8004750 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a4:	e008      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034ac:	e004      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034c0:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034d0:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d2:	430b      	orrs	r3, r1
 80034d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d6:	e003      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d05d      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003508:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800350c:	d03b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800350e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003512:	d834      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003518:	d037      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800351a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800351e:	d82e      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003520:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003524:	d033      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003526:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800352a:	d828      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800352c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003530:	d01a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003536:	d822      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800353c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003540:	d007      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003542:	e01c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003550:	e01e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	3308      	adds	r3, #8
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f001 f846 	bl	80045ec <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003566:	e013      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356c:	3328      	adds	r3, #40	@ 0x28
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 f8ed 	bl	8004750 <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357c:	e008      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003584:	e004      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035a8:	4a01      	ldr	r2, [pc, #4]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ae:	e005      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80035d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d03a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d01f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80035e6:	2b30      	cmp	r3, #48	@ 0x30
 80035e8:	d819      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d00c      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d815      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d019      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d111      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fa:	4baa      	ldr	r3, [pc, #680]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	4aa9      	ldr	r2, [pc, #676]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360c:	3308      	adds	r3, #8
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 ffeb 	bl	80045ec <RCCEx_PLL2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800361c:	e006      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003624:	e002      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800362a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003634:	4b9b      	ldr	r3, [pc, #620]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003638:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800363c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	4a98      	ldr	r2, [pc, #608]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003644:	430b      	orrs	r3, r1
 8003646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800364e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800365e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003668:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d051      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367c:	d035      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800367e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003682:	d82e      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003688:	d031      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800368a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800368e:	d828      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003694:	d01a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369a:	d822      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80036a6:	e01c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4a7d      	ldr	r2, [pc, #500]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b4:	e01c      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ba:	3308      	adds	r3, #8
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 ff94 	bl	80045ec <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d0:	3328      	adds	r3, #40	@ 0x28
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f83b 	bl	8004750 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036f8:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	4a67      	ldr	r2, [pc, #412]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6513      	str	r3, [r2, #80]	@ 0x50
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003712:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800372c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d053      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003740:	d033      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003746:	d82c      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003748:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374c:	d02f      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800374e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003752:	d826      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003758:	d02b      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800375a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800375e:	d820      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003764:	d012      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800376a:	d81a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d022      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003774:	d115      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	3308      	adds	r3, #8
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f000 ff34 	bl	80045ec <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800378a:	e015      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	3328      	adds	r3, #40	@ 0x28
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f000 ffdb 	bl	8004750 <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037a0:	e00a      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037aa:	bf00      	nop
 80037ac:	e004      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037c0:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80037f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d058      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380a:	d033      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003810:	d82c      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003816:	d02f      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d826      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800381e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003822:	d02b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003824:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003828:	d820      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800382a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382e:	d012      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d81a      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d022      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383e:	d115      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003844:	3308      	adds	r3, #8
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fecf 	bl	80045ec <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003854:	e015      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385a:	3328      	adds	r3, #40	@ 0x28
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ff76 	bl	8004750 <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800386a:	e00a      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003872:	e006      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003874:	bf00      	nop
 8003876:	e004      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003878:	bf00      	nop
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10e      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800389a:	4a02      	ldr	r2, [pc, #8]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800389c:	430b      	orrs	r3, r1
 800389e:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038a2:	bf00      	nop
 80038a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80038c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d037      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038da:	d00e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e0:	d816      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ea:	d111      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4bc4      	ldr	r3, [pc, #784]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	4ac3      	ldr	r2, [pc, #780]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038f8:	e00f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	3308      	adds	r3, #8
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fe72 	bl	80045ec <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800390e:	e004      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003922:	4bb7      	ldr	r3, [pc, #732]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003926:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003930:	4ab3      	ldr	r2, [pc, #716]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003932:	430b      	orrs	r3, r1
 8003934:	6513      	str	r3, [r2, #80]	@ 0x50
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800393c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800394c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003956:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d039      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003966:	2b03      	cmp	r3, #3
 8003968:	d81c      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039ad 	.word	0x080039ad
 8003974:	08003981 	.word	0x08003981
 8003978:	0800398f 	.word	0x0800398f
 800397c:	080039ad 	.word	0x080039ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003980:	4b9f      	ldr	r3, [pc, #636]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4a9e      	ldr	r2, [pc, #632]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800398c:	e00f      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800398e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003992:	3308      	adds	r3, #8
 8003994:	2102      	movs	r1, #2
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fe28 	bl	80045ec <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039a2:	e004      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039b6:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	f023 0103 	bic.w	r1, r3, #3
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f000 8099 	beq.w	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4b83      	ldr	r3, [pc, #524]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a82      	ldr	r2, [pc, #520]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a02:	f7fd fbd9 	bl	80011b8 <HAL_GetTick>
 8003a06:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0c:	f7fd fbd4 	bl	80011b8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	@ 0x64
 8003a1a:	d903      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a24:	4b77      	ldr	r3, [pc, #476]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ed      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d173      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a38:	4b71      	ldr	r3, [pc, #452]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a44:	4053      	eors	r3, r2
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d015      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a56:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a5a:	4b69      	ldr	r3, [pc, #420]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a68      	ldr	r2, [pc, #416]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a66:	4b66      	ldr	r3, [pc, #408]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a65      	ldr	r2, [pc, #404]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a72:	4a63      	ldr	r2, [pc, #396]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a86:	d118      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fb96 	bl	80011b8 <HAL_GetTick>
 8003a8c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a90:	e00d      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd fb91 	bl	80011b8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a9c:	1ad2      	subs	r2, r2, r3
 8003a9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d903      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003aac:	e005      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aae:	4b54      	ldr	r3, [pc, #336]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0eb      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003aba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d129      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad2:	d10e      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ae4:	091a      	lsrs	r2, r3, #4
 8003ae6:	4b48      	ldr	r3, [pc, #288]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	4a45      	ldr	r2, [pc, #276]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6113      	str	r3, [r2, #16]
 8003af0:	e005      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003af2:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4a42      	ldr	r2, [pc, #264]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003afc:	6113      	str	r3, [r2, #16]
 8003afe:	4b40      	ldr	r3, [pc, #256]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0301 	and.w	r3, r2, #1
 8003b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f000 808f 	beq.w	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b50:	2b28      	cmp	r3, #40	@ 0x28
 8003b52:	d871      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b54:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003c41 	.word	0x08003c41
 8003b60:	08003c39 	.word	0x08003c39
 8003b64:	08003c39 	.word	0x08003c39
 8003b68:	08003c39 	.word	0x08003c39
 8003b6c:	08003c39 	.word	0x08003c39
 8003b70:	08003c39 	.word	0x08003c39
 8003b74:	08003c39 	.word	0x08003c39
 8003b78:	08003c39 	.word	0x08003c39
 8003b7c:	08003c0d 	.word	0x08003c0d
 8003b80:	08003c39 	.word	0x08003c39
 8003b84:	08003c39 	.word	0x08003c39
 8003b88:	08003c39 	.word	0x08003c39
 8003b8c:	08003c39 	.word	0x08003c39
 8003b90:	08003c39 	.word	0x08003c39
 8003b94:	08003c39 	.word	0x08003c39
 8003b98:	08003c39 	.word	0x08003c39
 8003b9c:	08003c23 	.word	0x08003c23
 8003ba0:	08003c39 	.word	0x08003c39
 8003ba4:	08003c39 	.word	0x08003c39
 8003ba8:	08003c39 	.word	0x08003c39
 8003bac:	08003c39 	.word	0x08003c39
 8003bb0:	08003c39 	.word	0x08003c39
 8003bb4:	08003c39 	.word	0x08003c39
 8003bb8:	08003c39 	.word	0x08003c39
 8003bbc:	08003c41 	.word	0x08003c41
 8003bc0:	08003c39 	.word	0x08003c39
 8003bc4:	08003c39 	.word	0x08003c39
 8003bc8:	08003c39 	.word	0x08003c39
 8003bcc:	08003c39 	.word	0x08003c39
 8003bd0:	08003c39 	.word	0x08003c39
 8003bd4:	08003c39 	.word	0x08003c39
 8003bd8:	08003c39 	.word	0x08003c39
 8003bdc:	08003c41 	.word	0x08003c41
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c39 	.word	0x08003c39
 8003be8:	08003c39 	.word	0x08003c39
 8003bec:	08003c39 	.word	0x08003c39
 8003bf0:	08003c39 	.word	0x08003c39
 8003bf4:	08003c39 	.word	0x08003c39
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c41 	.word	0x08003c41
 8003c00:	58024400 	.word	0x58024400
 8003c04:	58024800 	.word	0x58024800
 8003c08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c10:	3308      	adds	r3, #8
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fce9 	bl	80045ec <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c26:	3328      	adds	r3, #40	@ 0x28
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fd90 	bl	8004750 <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c4a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c58:	4abb      	ldr	r2, [pc, #748]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f002 0302 	and.w	r3, r2, #2
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d041      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d824      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003c92:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003cb1 	.word	0x08003cb1
 8003ca0:	08003cc7 	.word	0x08003cc7
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ce5 	.word	0x08003ce5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fc97 	bl	80045ec <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cca:	3328      	adds	r3, #40	@ 0x28
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fd3e 	bl	8004750 <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cee:	4b96      	ldr	r3, [pc, #600]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	f023 0107 	bic.w	r1, r3, #7
 8003cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfc:	4a92      	ldr	r2, [pc, #584]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 0304 	and.w	r3, r2, #4
 8003d18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d044      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d825      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003d38:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d8d 	.word	0x08003d8d
 8003d44:	08003d59 	.word	0x08003d59
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d8d 	.word	0x08003d8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fc43 	bl	80045ec <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	3328      	adds	r3, #40	@ 0x28
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fcea 	bl	8004750 <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d96:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	f023 0107 	bic.w	r1, r3, #7
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	4a68      	ldr	r2, [pc, #416]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f002 0320 	and.w	r3, r2, #32
 8003dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003dcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d055      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de2:	d033      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de8:	d82c      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dee:	d02f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d826      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dfa:	d02b      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003dfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e00:	d820      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e06:	d012      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e0c:	d81a      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d022      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e16:	d115      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fbe3 	bl	80045ec <RCCEx_PLL2_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e015      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	3328      	adds	r3, #40	@ 0x28
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fc8a 	bl	8004750 <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e42:	e00a      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e4a:	e006      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e50:	bf00      	nop
 8003e52:	e002      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e72:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d058      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eaa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eae:	d033      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003eb0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eb4:	d82c      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eba:	d02f      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d826      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec6:	d02b      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ec8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ecc:	d820      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed2:	d012      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed8:	d81a      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d022      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee2:	d115      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fb7d 	bl	80045ec <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e015      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efe:	3328      	adds	r3, #40	@ 0x28
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fc24 	bl	8004750 <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f16:	e006      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10e      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f3e:	4a02      	ldr	r2, [pc, #8]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4313      	orrs	r3, r2
 8003f72:	d055      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f80:	d033      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003f82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f86:	d82c      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8c:	d02f      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f92:	d826      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f98:	d02b      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f9e:	d820      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa4:	d012      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003faa:	d81a      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d022      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb4:	d115      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	3308      	adds	r3, #8
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb14 	bl	80045ec <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fca:	e015      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	3328      	adds	r3, #40	@ 0x28
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fbbb 	bl	8004750 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fea:	bf00      	nop
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004000:	4ba0      	ldr	r3, [pc, #640]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004010:	4a9c      	ldr	r2, [pc, #624]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004012:	430b      	orrs	r3, r1
 8004014:	6593      	str	r3, [r2, #88]	@ 0x58
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800401c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f002 0308 	and.w	r3, r2, #8
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004036:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800403a:	460b      	mov	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	d01e      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404c:	d10c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	3328      	adds	r3, #40	@ 0x28
 8004054:	2102      	movs	r1, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fb7a 	bl	8004750 <RCCEx_PLL3_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004068:	4b86      	ldr	r3, [pc, #536]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004078:	4a82      	ldr	r2, [pc, #520]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800407a:	430b      	orrs	r3, r1
 800407c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f002 0310 	and.w	r3, r2, #16
 800408a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004094:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d01e      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b0:	3328      	adds	r3, #40	@ 0x28
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fb4b 	bl	8004750 <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ea:	2300      	movs	r3, #0
 80040ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d03e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800410a:	d81b      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d00b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004116:	e015      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411c:	3308      	adds	r3, #8
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa63 	bl	80045ec <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fb0a 	bl	8004750 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004166:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004172:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004182:	673b      	str	r3, [r7, #112]	@ 0x70
 8004184:	2300      	movs	r3, #0
 8004186:	677b      	str	r3, [r7, #116]	@ 0x74
 8004188:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419e:	d01f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c0:	e00f      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c6:	3328      	adds	r3, #40	@ 0x28
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fac0 	bl	8004750 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041fa:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004206:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800420a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004216:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004218:	2300      	movs	r3, #0
 800421a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800421c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d034      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d007      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004244:	e00e      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424a:	3308      	adds	r3, #8
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f9cc 	bl	80045ec <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427c:	430b      	orrs	r3, r1
 800427e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800429c:	663b      	str	r3, [r7, #96]	@ 0x60
 800429e:	2300      	movs	r3, #0
 80042a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80042a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b0:	3328      	adds	r3, #40	@ 0x28
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fa4b 	bl	8004750 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042d4:	2300      	movs	r3, #0
 80042d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ec:	d018      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f2:	d811      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d014      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fe:	d80b      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4bb7      	ldr	r3, [pc, #732]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	4ab6      	ldr	r2, [pc, #728]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004316:	e008      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004332:	4bad      	ldr	r3, [pc, #692]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004340:	4aa9      	ldr	r2, [pc, #676]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6553      	str	r3, [r2, #84]	@ 0x54
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800434c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800435c:	653b      	str	r3, [r7, #80]	@ 0x50
 800435e:	2300      	movs	r3, #0
 8004360:	657b      	str	r3, [r7, #84]	@ 0x54
 8004362:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800436c:	4b9e      	ldr	r3, [pc, #632]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800436e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004370:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	4a9b      	ldr	r2, [pc, #620]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800438c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438e:	2300      	movs	r3, #0
 8004390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004392:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800439c:	4b92      	ldr	r3, [pc, #584]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043aa:	4a8f      	ldr	r2, [pc, #572]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043be:	2300      	movs	r3, #0
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043cc:	4b86      	ldr	r3, [pc, #536]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4a85      	ldr	r2, [pc, #532]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043d6:	6113      	str	r3, [r2, #16]
 80043d8:	4b83      	ldr	r3, [pc, #524]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043e4:	4a80      	ldr	r2, [pc, #512]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f8:	2300      	movs	r3, #0
 80043fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004406:	4b78      	ldr	r3, [pc, #480]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	4a74      	ldr	r2, [pc, #464]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004416:	430b      	orrs	r3, r1
 8004418:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800441a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004426:	633b      	str	r3, [r7, #48]	@ 0x30
 8004428:	2300      	movs	r3, #0
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
 800442c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004436:	4b6c      	ldr	r3, [pc, #432]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	4a68      	ldr	r2, [pc, #416]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	2100      	movs	r1, #0
 8004456:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d011      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446c:	3308      	adds	r3, #8
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f8bb 	bl	80045ec <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800447c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	2100      	movs	r1, #0
 8004496:	6239      	str	r1, [r7, #32]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
 800449e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d011      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ac:	3308      	adds	r3, #8
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f89b 	bl	80045ec <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	2100      	movs	r1, #0
 80044d6:	61b9      	str	r1, [r7, #24]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d011      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	3308      	adds	r3, #8
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f87b 	bl	80045ec <RCCEx_PLL2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	2100      	movs	r1, #0
 8004516:	6139      	str	r1, [r7, #16]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f90d 	bl	8004750 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800453c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	2100      	movs	r1, #0
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d011      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456c:	3328      	adds	r3, #40	@ 0x28
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f8ed 	bl	8004750 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800457c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004588:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800458c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	2100      	movs	r1, #0
 8004596:	6039      	str	r1, [r7, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d011      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ac:	3328      	adds	r3, #40	@ 0x28
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f8cd 	bl	8004750 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80045cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
}
 80045da:	4618      	mov	r0, r3
 80045dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400

080045ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045fa:	4b53      	ldr	r3, [pc, #332]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d101      	bne.n	800460a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e099      	b.n	800473e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800460a:	4b4f      	ldr	r3, [pc, #316]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4e      	ldr	r2, [pc, #312]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004610:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004616:	f7fc fdcf 	bl	80011b8 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800461c:	e008      	b.n	8004630 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800461e:	f7fc fdcb 	bl	80011b8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e086      	b.n	800473e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004630:	4b45      	ldr	r3, [pc, #276]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800463c:	4b42      	ldr	r3, [pc, #264]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	031b      	lsls	r3, r3, #12
 800464a:	493f      	ldr	r1, [pc, #252]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	3b01      	subs	r3, #1
 8004656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	3b01      	subs	r3, #1
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	b29b      	uxth	r3, r3
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004680:	4931      	ldr	r1, [pc, #196]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004686:	4b30      	ldr	r3, [pc, #192]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	492d      	ldr	r1, [pc, #180]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004698:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	f023 0220 	bic.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	4928      	ldr	r1, [pc, #160]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046aa:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	4a26      	ldr	r2, [pc, #152]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	f023 0310 	bic.w	r3, r3, #16
 80046b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046b6:	4b24      	ldr	r3, [pc, #144]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ba:	4b24      	ldr	r3, [pc, #144]	@ (800474c <RCCEx_PLL2_Config+0x160>)
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	69d2      	ldr	r2, [r2, #28]
 80046c2:	00d2      	lsls	r2, r2, #3
 80046c4:	4920      	ldr	r1, [pc, #128]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	4a19      	ldr	r2, [pc, #100]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046e8:	e00f      	b.n	800470a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d106      	bne.n	80046fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046f0:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 80046f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046fc:	e005      	b.n	800470a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046fe:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004708:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a0e      	ldr	r2, [pc, #56]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004710:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fc fd4f 	bl	80011b8 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800471c:	e008      	b.n	8004730 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800471e:	f7fc fd4b 	bl	80011b8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <RCCEx_PLL2_Config+0x15c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
 800474c:	ffff0007 	.word	0xffff0007

08004750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800475e:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d101      	bne.n	800476e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e099      	b.n	80048a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800476e:	4b4f      	ldr	r3, [pc, #316]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a4e      	ldr	r2, [pc, #312]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477a:	f7fc fd1d 	bl	80011b8 <HAL_GetTick>
 800477e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004780:	e008      	b.n	8004794 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004782:	f7fc fd19 	bl	80011b8 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e086      	b.n	80048a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004794:	4b45      	ldr	r3, [pc, #276]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f0      	bne.n	8004782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047a0:	4b42      	ldr	r3, [pc, #264]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	051b      	lsls	r3, r3, #20
 80047ae:	493f      	ldr	r1, [pc, #252]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	025b      	lsls	r3, r3, #9
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	3b01      	subs	r3, #1
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047e4:	4931      	ldr	r1, [pc, #196]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047ea:	4b30      	ldr	r3, [pc, #192]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	492d      	ldr	r1, [pc, #180]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	4928      	ldr	r1, [pc, #160]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	4a26      	ldr	r2, [pc, #152]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004818:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800481a:	4b24      	ldr	r3, [pc, #144]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 800481c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <RCCEx_PLL3_Config+0x160>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	69d2      	ldr	r2, [r2, #28]
 8004826:	00d2      	lsls	r2, r2, #3
 8004828:	4920      	ldr	r1, [pc, #128]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800482e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	4a1e      	ldr	r2, [pc, #120]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004838:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004840:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800484a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800484c:	e00f      	b.n	800486e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004854:	4b15      	ldr	r3, [pc, #84]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 800485a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800485e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004860:	e005      	b.n	800486e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004868:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800486c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800486e:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487a:	f7fc fc9d 	bl	80011b8 <HAL_GetTick>
 800487e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004880:	e008      	b.n	8004894 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004882:	f7fc fc99 	bl	80011b8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e006      	b.n	80048a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <RCCEx_PLL3_Config+0x15c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	58024400 	.word	0x58024400
 80048b0:	ffff0007 	.word	0xffff0007

080048b4 <std>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	e9c0 3300 	strd	r3, r3, [r0]
 80048be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048c2:	6083      	str	r3, [r0, #8]
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c8:	81c2      	strh	r2, [r0, #14]
 80048ca:	6183      	str	r3, [r0, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2208      	movs	r2, #8
 80048d0:	305c      	adds	r0, #92	@ 0x5c
 80048d2:	f000 f9f9 	bl	8004cc8 <memset>
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x58>)
 80048d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x5c>)
 80048dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x60>)
 80048e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x64>)
 80048e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <std+0x68>)
 80048e8:	6224      	str	r4, [r4, #32]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d006      	beq.n	80048fc <std+0x48>
 80048ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d002      	beq.n	80048fc <std+0x48>
 80048f6:	33d0      	adds	r3, #208	@ 0xd0
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d105      	bne.n	8004908 <std+0x54>
 80048fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f000 ba58 	b.w	8004db8 <__retarget_lock_init_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004b19 	.word	0x08004b19
 8004910:	08004b3b 	.word	0x08004b3b
 8004914:	08004b73 	.word	0x08004b73
 8004918:	08004b97 	.word	0x08004b97
 800491c:	24000138 	.word	0x24000138

08004920 <stdio_exit_handler>:
 8004920:	4a02      	ldr	r2, [pc, #8]	@ (800492c <stdio_exit_handler+0xc>)
 8004922:	4903      	ldr	r1, [pc, #12]	@ (8004930 <stdio_exit_handler+0x10>)
 8004924:	4803      	ldr	r0, [pc, #12]	@ (8004934 <stdio_exit_handler+0x14>)
 8004926:	f000 b869 	b.w	80049fc <_fwalk_sglue>
 800492a:	bf00      	nop
 800492c:	2400001c 	.word	0x2400001c
 8004930:	08005659 	.word	0x08005659
 8004934:	2400002c 	.word	0x2400002c

08004938 <cleanup_stdio>:
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <cleanup_stdio+0x34>)
 800493c:	4299      	cmp	r1, r3
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	d001      	beq.n	8004948 <cleanup_stdio+0x10>
 8004944:	f000 fe88 	bl	8005658 <_fflush_r>
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <cleanup_stdio+0x38>)
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <cleanup_stdio+0x1e>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fe81 	bl	8005658 <_fflush_r>
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <cleanup_stdio+0x3c>)
 800495a:	4299      	cmp	r1, r3
 800495c:	d004      	beq.n	8004968 <cleanup_stdio+0x30>
 800495e:	4620      	mov	r0, r4
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f000 be78 	b.w	8005658 <_fflush_r>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	24000138 	.word	0x24000138
 8004970:	240001a0 	.word	0x240001a0
 8004974:	24000208 	.word	0x24000208

08004978 <global_stdio_init.part.0>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x30>)
 800497c:	4c0b      	ldr	r4, [pc, #44]	@ (80049ac <global_stdio_init.part.0+0x34>)
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <global_stdio_init.part.0+0x38>)
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4620      	mov	r0, r4
 8004984:	2200      	movs	r2, #0
 8004986:	2104      	movs	r1, #4
 8004988:	f7ff ff94 	bl	80048b4 <std>
 800498c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004990:	2201      	movs	r2, #1
 8004992:	2109      	movs	r1, #9
 8004994:	f7ff ff8e 	bl	80048b4 <std>
 8004998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800499c:	2202      	movs	r2, #2
 800499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a2:	2112      	movs	r1, #18
 80049a4:	f7ff bf86 	b.w	80048b4 <std>
 80049a8:	24000270 	.word	0x24000270
 80049ac:	24000138 	.word	0x24000138
 80049b0:	08004921 	.word	0x08004921

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	@ (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 ba00 	b.w	8004dba <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	24000279 	.word	0x24000279

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	@ (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 b9fb 	b.w	8004dbc <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	24000279 	.word	0x24000279

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sfp_lock_acquire>
 80049d4:	6a23      	ldr	r3, [r4, #32]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sfp_lock_release>
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x28>)
 80049e2:	6223      	str	r3, [r4, #32]
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <__sinit+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f5      	bne.n	80049d8 <__sinit+0xc>
 80049ec:	f7ff ffc4 	bl	8004978 <global_stdio_init.part.0>
 80049f0:	e7f2      	b.n	80049d8 <__sinit+0xc>
 80049f2:	bf00      	nop
 80049f4:	08004939 	.word	0x08004939
 80049f8:	24000270 	.word	0x24000270

080049fc <_fwalk_sglue>:
 80049fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	4607      	mov	r7, r0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	2600      	movs	r6, #0
 8004a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a10:	d505      	bpl.n	8004a1e <_fwalk_sglue+0x22>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f7      	bne.n	8004a08 <_fwalk_sglue+0xc>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d907      	bls.n	8004a34 <_fwalk_sglue+0x38>
 8004a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	d003      	beq.n	8004a34 <_fwalk_sglue+0x38>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	@ 0x68
 8004a36:	e7e9      	b.n	8004a0c <_fwalk_sglue+0x10>

08004a38 <iprintf>:
 8004a38:	b40f      	push	{r0, r1, r2, r3}
 8004a3a:	b507      	push	{r0, r1, r2, lr}
 8004a3c:	4906      	ldr	r1, [pc, #24]	@ (8004a58 <iprintf+0x20>)
 8004a3e:	ab04      	add	r3, sp, #16
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a46:	6881      	ldr	r1, [r0, #8]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f000 fadb 	bl	8005004 <_vfiprintf_r>
 8004a4e:	b003      	add	sp, #12
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr
 8004a58:	24000028 	.word	0x24000028

08004a5c <_puts_r>:
 8004a5c:	6a03      	ldr	r3, [r0, #32]
 8004a5e:	b570      	push	{r4, r5, r6, lr}
 8004a60:	6884      	ldr	r4, [r0, #8]
 8004a62:	4605      	mov	r5, r0
 8004a64:	460e      	mov	r6, r1
 8004a66:	b90b      	cbnz	r3, 8004a6c <_puts_r+0x10>
 8004a68:	f7ff ffb0 	bl	80049cc <__sinit>
 8004a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x22>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	0598      	lsls	r0, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x22>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f000 f99e 	bl	8004dba <__retarget_lock_acquire_recursive>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0719      	lsls	r1, r3, #28
 8004a82:	d502      	bpl.n	8004a8a <_puts_r+0x2e>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d135      	bne.n	8004af6 <_puts_r+0x9a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f8c5 	bl	8004c1c <__swsetup_r>
 8004a92:	b380      	cbz	r0, 8004af6 <_puts_r+0x9a>
 8004a94:	f04f 35ff 	mov.w	r5, #4294967295
 8004a98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a9a:	07da      	lsls	r2, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_puts_r+0x4e>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_puts_r+0x4e>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa6:	f000 f989 	bl	8004dbc <__retarget_lock_release_recursive>
 8004aaa:	4628      	mov	r0, r5
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da04      	bge.n	8004abc <_puts_r+0x60>
 8004ab2:	69a2      	ldr	r2, [r4, #24]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dc17      	bgt.n	8004ae8 <_puts_r+0x8c>
 8004ab8:	290a      	cmp	r1, #10
 8004aba:	d015      	beq.n	8004ae8 <_puts_r+0x8c>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	7019      	strb	r1, [r3, #0]
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aca:	3b01      	subs	r3, #1
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d1ed      	bne.n	8004aae <_puts_r+0x52>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da11      	bge.n	8004afa <_puts_r+0x9e>
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	210a      	movs	r1, #10
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 f85f 	bl	8004b9e <__swbuf_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d0d7      	beq.n	8004a94 <_puts_r+0x38>
 8004ae4:	250a      	movs	r5, #10
 8004ae6:	e7d7      	b.n	8004a98 <_puts_r+0x3c>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f857 	bl	8004b9e <__swbuf_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d1e7      	bne.n	8004ac4 <_puts_r+0x68>
 8004af4:	e7ce      	b.n	8004a94 <_puts_r+0x38>
 8004af6:	3e01      	subs	r6, #1
 8004af8:	e7e4      	b.n	8004ac4 <_puts_r+0x68>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	6022      	str	r2, [r4, #0]
 8004b00:	220a      	movs	r2, #10
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e7ee      	b.n	8004ae4 <_puts_r+0x88>
	...

08004b08 <puts>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	@ (8004b14 <puts+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f7ff bfa5 	b.w	8004a5c <_puts_r>
 8004b12:	bf00      	nop
 8004b14:	24000028 	.word	0x24000028

08004b18 <__sread>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	f000 f8fc 	bl	8004d1c <_read_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	bfab      	itete	ge
 8004b28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b2c:	181b      	addge	r3, r3, r0
 8004b2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b32:	bfac      	ite	ge
 8004b34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b36:	81a3      	strhlt	r3, [r4, #12]
 8004b38:	bd10      	pop	{r4, pc}

08004b3a <__swrite>:
 8004b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	461f      	mov	r7, r3
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	05db      	lsls	r3, r3, #23
 8004b44:	4605      	mov	r5, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	4616      	mov	r6, r2
 8004b4a:	d505      	bpl.n	8004b58 <__swrite+0x1e>
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	2302      	movs	r3, #2
 8004b52:	2200      	movs	r2, #0
 8004b54:	f000 f8d0 	bl	8004cf8 <_lseek_r>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	4632      	mov	r2, r6
 8004b66:	463b      	mov	r3, r7
 8004b68:	4628      	mov	r0, r5
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	f000 b8e7 	b.w	8004d40 <_write_r>

08004b72 <__sseek>:
 8004b72:	b510      	push	{r4, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7a:	f000 f8bd 	bl	8004cf8 <_lseek_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	bf15      	itete	ne
 8004b84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b8e:	81a3      	strheq	r3, [r4, #12]
 8004b90:	bf18      	it	ne
 8004b92:	81a3      	strhne	r3, [r4, #12]
 8004b94:	bd10      	pop	{r4, pc}

08004b96 <__sclose>:
 8004b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9a:	f000 b89d 	b.w	8004cd8 <_close_r>

08004b9e <__swbuf_r>:
 8004b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba0:	460e      	mov	r6, r1
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b118      	cbz	r0, 8004bb0 <__swbuf_r+0x12>
 8004ba8:	6a03      	ldr	r3, [r0, #32]
 8004baa:	b90b      	cbnz	r3, 8004bb0 <__swbuf_r+0x12>
 8004bac:	f7ff ff0e 	bl	80049cc <__sinit>
 8004bb0:	69a3      	ldr	r3, [r4, #24]
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	071a      	lsls	r2, r3, #28
 8004bb8:	d501      	bpl.n	8004bbe <__swbuf_r+0x20>
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	b943      	cbnz	r3, 8004bd0 <__swbuf_r+0x32>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 f82b 	bl	8004c1c <__swsetup_r>
 8004bc6:	b118      	cbz	r0, 8004bd0 <__swbuf_r+0x32>
 8004bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8004bcc:	4638      	mov	r0, r7
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	6922      	ldr	r2, [r4, #16]
 8004bd4:	1a98      	subs	r0, r3, r2
 8004bd6:	6963      	ldr	r3, [r4, #20]
 8004bd8:	b2f6      	uxtb	r6, r6
 8004bda:	4283      	cmp	r3, r0
 8004bdc:	4637      	mov	r7, r6
 8004bde:	dc05      	bgt.n	8004bec <__swbuf_r+0x4e>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fd38 	bl	8005658 <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d1ed      	bne.n	8004bc8 <__swbuf_r+0x2a>
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60a3      	str	r3, [r4, #8]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	701e      	strb	r6, [r3, #0]
 8004bfa:	6962      	ldr	r2, [r4, #20]
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d004      	beq.n	8004c0c <__swbuf_r+0x6e>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	07db      	lsls	r3, r3, #31
 8004c06:	d5e1      	bpl.n	8004bcc <__swbuf_r+0x2e>
 8004c08:	2e0a      	cmp	r6, #10
 8004c0a:	d1df      	bne.n	8004bcc <__swbuf_r+0x2e>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fd22 	bl	8005658 <_fflush_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d0d9      	beq.n	8004bcc <__swbuf_r+0x2e>
 8004c18:	e7d6      	b.n	8004bc8 <__swbuf_r+0x2a>
	...

08004c1c <__swsetup_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <__swsetup_r+0xa8>)
 8004c20:	4605      	mov	r5, r0
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	460c      	mov	r4, r1
 8004c26:	b118      	cbz	r0, 8004c30 <__swsetup_r+0x14>
 8004c28:	6a03      	ldr	r3, [r0, #32]
 8004c2a:	b90b      	cbnz	r3, 8004c30 <__swsetup_r+0x14>
 8004c2c:	f7ff fece 	bl	80049cc <__sinit>
 8004c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c34:	0719      	lsls	r1, r3, #28
 8004c36:	d422      	bmi.n	8004c7e <__swsetup_r+0x62>
 8004c38:	06da      	lsls	r2, r3, #27
 8004c3a:	d407      	bmi.n	8004c4c <__swsetup_r+0x30>
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	e033      	b.n	8004cb4 <__swsetup_r+0x98>
 8004c4c:	0758      	lsls	r0, r3, #29
 8004c4e:	d512      	bpl.n	8004c76 <__swsetup_r+0x5a>
 8004c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c52:	b141      	cbz	r1, 8004c66 <__swsetup_r+0x4a>
 8004c54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	d002      	beq.n	8004c62 <__swsetup_r+0x46>
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 f8af 	bl	8004dc0 <_free_r>
 8004c62:	2300      	movs	r3, #0
 8004c64:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6063      	str	r3, [r4, #4]
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f043 0308 	orr.w	r3, r3, #8
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	b94b      	cbnz	r3, 8004c96 <__swsetup_r+0x7a>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c8c:	d003      	beq.n	8004c96 <__swsetup_r+0x7a>
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fd2f 	bl	80056f4 <__smakebuf_r>
 8004c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9a:	f013 0201 	ands.w	r2, r3, #1
 8004c9e:	d00a      	beq.n	8004cb6 <__swsetup_r+0x9a>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	60a2      	str	r2, [r4, #8]
 8004ca4:	6962      	ldr	r2, [r4, #20]
 8004ca6:	4252      	negs	r2, r2
 8004ca8:	61a2      	str	r2, [r4, #24]
 8004caa:	6922      	ldr	r2, [r4, #16]
 8004cac:	b942      	cbnz	r2, 8004cc0 <__swsetup_r+0xa4>
 8004cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cb2:	d1c5      	bne.n	8004c40 <__swsetup_r+0x24>
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	0799      	lsls	r1, r3, #30
 8004cb8:	bf58      	it	pl
 8004cba:	6962      	ldrpl	r2, [r4, #20]
 8004cbc:	60a2      	str	r2, [r4, #8]
 8004cbe:	e7f4      	b.n	8004caa <__swsetup_r+0x8e>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e7f7      	b.n	8004cb4 <__swsetup_r+0x98>
 8004cc4:	24000028 	.word	0x24000028

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_close_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d06      	ldr	r5, [pc, #24]	@ (8004cf4 <_close_r+0x1c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fc f8a4 	bl	8000e30 <_close>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_close_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_close_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	24000274 	.word	0x24000274

08004cf8 <_lseek_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	@ (8004d18 <_lseek_r+0x20>)
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	2200      	movs	r2, #0
 8004d04:	602a      	str	r2, [r5, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7fc f8b9 	bl	8000e7e <_lseek>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_lseek_r+0x1e>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_lseek_r+0x1e>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	24000274 	.word	0x24000274

08004d1c <_read_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	@ (8004d3c <_read_r+0x20>)
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fc f847 	bl	8000dbe <_read>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_read_r+0x1e>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_read_r+0x1e>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	24000274 	.word	0x24000274

08004d40 <_write_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	@ (8004d60 <_write_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc f852 	bl	8000df8 <_write>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_write_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_write_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	24000274 	.word	0x24000274

08004d64 <__errno>:
 8004d64:	4b01      	ldr	r3, [pc, #4]	@ (8004d6c <__errno+0x8>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	24000028 	.word	0x24000028

08004d70 <__libc_init_array>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4d0d      	ldr	r5, [pc, #52]	@ (8004da8 <__libc_init_array+0x38>)
 8004d74:	4c0d      	ldr	r4, [pc, #52]	@ (8004dac <__libc_init_array+0x3c>)
 8004d76:	1b64      	subs	r4, r4, r5
 8004d78:	10a4      	asrs	r4, r4, #2
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	42a6      	cmp	r6, r4
 8004d7e:	d109      	bne.n	8004d94 <__libc_init_array+0x24>
 8004d80:	4d0b      	ldr	r5, [pc, #44]	@ (8004db0 <__libc_init_array+0x40>)
 8004d82:	4c0c      	ldr	r4, [pc, #48]	@ (8004db4 <__libc_init_array+0x44>)
 8004d84:	f000 fd24 	bl	80057d0 <_init>
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	d105      	bne.n	8004d9e <__libc_init_array+0x2e>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d98:	4798      	blx	r3
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7ee      	b.n	8004d7c <__libc_init_array+0xc>
 8004d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da2:	4798      	blx	r3
 8004da4:	3601      	adds	r6, #1
 8004da6:	e7f2      	b.n	8004d8e <__libc_init_array+0x1e>
 8004da8:	08005a40 	.word	0x08005a40
 8004dac:	08005a40 	.word	0x08005a40
 8004db0:	08005a40 	.word	0x08005a40
 8004db4:	08005a44 	.word	0x08005a44

08004db8 <__retarget_lock_init_recursive>:
 8004db8:	4770      	bx	lr

08004dba <__retarget_lock_acquire_recursive>:
 8004dba:	4770      	bx	lr

08004dbc <__retarget_lock_release_recursive>:
 8004dbc:	4770      	bx	lr
	...

08004dc0 <_free_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d041      	beq.n	8004e4c <_free_r+0x8c>
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f0c      	subs	r4, r1, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	18e4      	addlt	r4, r4, r3
 8004dd4:	f000 f8e0 	bl	8004f98 <__malloc_lock>
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <_free_r+0x90>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	b933      	cbnz	r3, 8004dec <_free_r+0x2c>
 8004dde:	6063      	str	r3, [r4, #4]
 8004de0:	6014      	str	r4, [r2, #0]
 8004de2:	4628      	mov	r0, r5
 8004de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de8:	f000 b8dc 	b.w	8004fa4 <__malloc_unlock>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d908      	bls.n	8004e02 <_free_r+0x42>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	1821      	adds	r1, r4, r0
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf01      	itttt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	1809      	addeq	r1, r1, r0
 8004dfe:	6021      	streq	r1, [r4, #0]
 8004e00:	e7ed      	b.n	8004dde <_free_r+0x1e>
 8004e02:	461a      	mov	r2, r3
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b10b      	cbz	r3, 8004e0c <_free_r+0x4c>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d9fa      	bls.n	8004e02 <_free_r+0x42>
 8004e0c:	6811      	ldr	r1, [r2, #0]
 8004e0e:	1850      	adds	r0, r2, r1
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d10b      	bne.n	8004e2c <_free_r+0x6c>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4401      	add	r1, r0
 8004e18:	1850      	adds	r0, r2, r1
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	d1e0      	bne.n	8004de2 <_free_r+0x22>
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	6053      	str	r3, [r2, #4]
 8004e26:	4408      	add	r0, r1
 8004e28:	6010      	str	r0, [r2, #0]
 8004e2a:	e7da      	b.n	8004de2 <_free_r+0x22>
 8004e2c:	d902      	bls.n	8004e34 <_free_r+0x74>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	e7d6      	b.n	8004de2 <_free_r+0x22>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	1821      	adds	r1, r4, r0
 8004e38:	428b      	cmp	r3, r1
 8004e3a:	bf04      	itt	eq
 8004e3c:	6819      	ldreq	r1, [r3, #0]
 8004e3e:	685b      	ldreq	r3, [r3, #4]
 8004e40:	6063      	str	r3, [r4, #4]
 8004e42:	bf04      	itt	eq
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	6054      	str	r4, [r2, #4]
 8004e4a:	e7ca      	b.n	8004de2 <_free_r+0x22>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	24000280 	.word	0x24000280

08004e54 <sbrk_aligned>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4e0f      	ldr	r6, [pc, #60]	@ (8004e94 <sbrk_aligned+0x40>)
 8004e58:	460c      	mov	r4, r1
 8004e5a:	6831      	ldr	r1, [r6, #0]
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	b911      	cbnz	r1, 8004e66 <sbrk_aligned+0x12>
 8004e60:	f000 fca6 	bl	80057b0 <_sbrk_r>
 8004e64:	6030      	str	r0, [r6, #0]
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 fca1 	bl	80057b0 <_sbrk_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d103      	bne.n	8004e7a <sbrk_aligned+0x26>
 8004e72:	f04f 34ff 	mov.w	r4, #4294967295
 8004e76:	4620      	mov	r0, r4
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
 8004e7a:	1cc4      	adds	r4, r0, #3
 8004e7c:	f024 0403 	bic.w	r4, r4, #3
 8004e80:	42a0      	cmp	r0, r4
 8004e82:	d0f8      	beq.n	8004e76 <sbrk_aligned+0x22>
 8004e84:	1a21      	subs	r1, r4, r0
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 fc92 	bl	80057b0 <_sbrk_r>
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d1f2      	bne.n	8004e76 <sbrk_aligned+0x22>
 8004e90:	e7ef      	b.n	8004e72 <sbrk_aligned+0x1e>
 8004e92:	bf00      	nop
 8004e94:	2400027c 	.word	0x2400027c

08004e98 <_malloc_r>:
 8004e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e9c:	1ccd      	adds	r5, r1, #3
 8004e9e:	f025 0503 	bic.w	r5, r5, #3
 8004ea2:	3508      	adds	r5, #8
 8004ea4:	2d0c      	cmp	r5, #12
 8004ea6:	bf38      	it	cc
 8004ea8:	250c      	movcc	r5, #12
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	4606      	mov	r6, r0
 8004eae:	db01      	blt.n	8004eb4 <_malloc_r+0x1c>
 8004eb0:	42a9      	cmp	r1, r5
 8004eb2:	d904      	bls.n	8004ebe <_malloc_r+0x26>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f94 <_malloc_r+0xfc>
 8004ec2:	f000 f869 	bl	8004f98 <__malloc_lock>
 8004ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eca:	461c      	mov	r4, r3
 8004ecc:	bb44      	cbnz	r4, 8004f20 <_malloc_r+0x88>
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f7ff ffbf 	bl	8004e54 <sbrk_aligned>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	4604      	mov	r4, r0
 8004eda:	d158      	bne.n	8004f8e <_malloc_r+0xf6>
 8004edc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ee0:	4627      	mov	r7, r4
 8004ee2:	2f00      	cmp	r7, #0
 8004ee4:	d143      	bne.n	8004f6e <_malloc_r+0xd6>
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d04b      	beq.n	8004f82 <_malloc_r+0xea>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	4639      	mov	r1, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	eb04 0903 	add.w	r9, r4, r3
 8004ef4:	f000 fc5c 	bl	80057b0 <_sbrk_r>
 8004ef8:	4581      	cmp	r9, r0
 8004efa:	d142      	bne.n	8004f82 <_malloc_r+0xea>
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	1a6d      	subs	r5, r5, r1
 8004f00:	4629      	mov	r1, r5
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ffa6 	bl	8004e54 <sbrk_aligned>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d03a      	beq.n	8004f82 <_malloc_r+0xea>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	442b      	add	r3, r5
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	f8d8 3000 	ldr.w	r3, [r8]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	bb62      	cbnz	r2, 8004f74 <_malloc_r+0xdc>
 8004f1a:	f8c8 7000 	str.w	r7, [r8]
 8004f1e:	e00f      	b.n	8004f40 <_malloc_r+0xa8>
 8004f20:	6822      	ldr	r2, [r4, #0]
 8004f22:	1b52      	subs	r2, r2, r5
 8004f24:	d420      	bmi.n	8004f68 <_malloc_r+0xd0>
 8004f26:	2a0b      	cmp	r2, #11
 8004f28:	d917      	bls.n	8004f5a <_malloc_r+0xc2>
 8004f2a:	1961      	adds	r1, r4, r5
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	6025      	str	r5, [r4, #0]
 8004f30:	bf18      	it	ne
 8004f32:	6059      	strne	r1, [r3, #4]
 8004f34:	6863      	ldr	r3, [r4, #4]
 8004f36:	bf08      	it	eq
 8004f38:	f8c8 1000 	streq.w	r1, [r8]
 8004f3c:	5162      	str	r2, [r4, r5]
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	4630      	mov	r0, r6
 8004f42:	f000 f82f 	bl	8004fa4 <__malloc_unlock>
 8004f46:	f104 000b 	add.w	r0, r4, #11
 8004f4a:	1d23      	adds	r3, r4, #4
 8004f4c:	f020 0007 	bic.w	r0, r0, #7
 8004f50:	1ac2      	subs	r2, r0, r3
 8004f52:	bf1c      	itt	ne
 8004f54:	1a1b      	subne	r3, r3, r0
 8004f56:	50a3      	strne	r3, [r4, r2]
 8004f58:	e7af      	b.n	8004eba <_malloc_r+0x22>
 8004f5a:	6862      	ldr	r2, [r4, #4]
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	bf0c      	ite	eq
 8004f60:	f8c8 2000 	streq.w	r2, [r8]
 8004f64:	605a      	strne	r2, [r3, #4]
 8004f66:	e7eb      	b.n	8004f40 <_malloc_r+0xa8>
 8004f68:	4623      	mov	r3, r4
 8004f6a:	6864      	ldr	r4, [r4, #4]
 8004f6c:	e7ae      	b.n	8004ecc <_malloc_r+0x34>
 8004f6e:	463c      	mov	r4, r7
 8004f70:	687f      	ldr	r7, [r7, #4]
 8004f72:	e7b6      	b.n	8004ee2 <_malloc_r+0x4a>
 8004f74:	461a      	mov	r2, r3
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d1fb      	bne.n	8004f74 <_malloc_r+0xdc>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6053      	str	r3, [r2, #4]
 8004f80:	e7de      	b.n	8004f40 <_malloc_r+0xa8>
 8004f82:	230c      	movs	r3, #12
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 f80c 	bl	8004fa4 <__malloc_unlock>
 8004f8c:	e794      	b.n	8004eb8 <_malloc_r+0x20>
 8004f8e:	6005      	str	r5, [r0, #0]
 8004f90:	e7d6      	b.n	8004f40 <_malloc_r+0xa8>
 8004f92:	bf00      	nop
 8004f94:	24000280 	.word	0x24000280

08004f98 <__malloc_lock>:
 8004f98:	4801      	ldr	r0, [pc, #4]	@ (8004fa0 <__malloc_lock+0x8>)
 8004f9a:	f7ff bf0e 	b.w	8004dba <__retarget_lock_acquire_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	24000278 	.word	0x24000278

08004fa4 <__malloc_unlock>:
 8004fa4:	4801      	ldr	r0, [pc, #4]	@ (8004fac <__malloc_unlock+0x8>)
 8004fa6:	f7ff bf09 	b.w	8004dbc <__retarget_lock_release_recursive>
 8004faa:	bf00      	nop
 8004fac:	24000278 	.word	0x24000278

08004fb0 <__sfputc_r>:
 8004fb0:	6893      	ldr	r3, [r2, #8]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	b410      	push	{r4}
 8004fb8:	6093      	str	r3, [r2, #8]
 8004fba:	da08      	bge.n	8004fce <__sfputc_r+0x1e>
 8004fbc:	6994      	ldr	r4, [r2, #24]
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	db01      	blt.n	8004fc6 <__sfputc_r+0x16>
 8004fc2:	290a      	cmp	r1, #10
 8004fc4:	d103      	bne.n	8004fce <__sfputc_r+0x1e>
 8004fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fca:	f7ff bde8 	b.w	8004b9e <__swbuf_r>
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	1c58      	adds	r0, r3, #1
 8004fd2:	6010      	str	r0, [r2, #0]
 8004fd4:	7019      	strb	r1, [r3, #0]
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <__sfputs_r>:
 8004fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	18d5      	adds	r5, r2, r3
 8004fe8:	42ac      	cmp	r4, r5
 8004fea:	d101      	bne.n	8004ff0 <__sfputs_r+0x12>
 8004fec:	2000      	movs	r0, #0
 8004fee:	e007      	b.n	8005000 <__sfputs_r+0x22>
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	463a      	mov	r2, r7
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7ff ffda 	bl	8004fb0 <__sfputc_r>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d1f3      	bne.n	8004fe8 <__sfputs_r+0xa>
 8005000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005004 <_vfiprintf_r>:
 8005004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	460d      	mov	r5, r1
 800500a:	b09d      	sub	sp, #116	@ 0x74
 800500c:	4614      	mov	r4, r2
 800500e:	4698      	mov	r8, r3
 8005010:	4606      	mov	r6, r0
 8005012:	b118      	cbz	r0, 800501c <_vfiprintf_r+0x18>
 8005014:	6a03      	ldr	r3, [r0, #32]
 8005016:	b90b      	cbnz	r3, 800501c <_vfiprintf_r+0x18>
 8005018:	f7ff fcd8 	bl	80049cc <__sinit>
 800501c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800501e:	07d9      	lsls	r1, r3, #31
 8005020:	d405      	bmi.n	800502e <_vfiprintf_r+0x2a>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	059a      	lsls	r2, r3, #22
 8005026:	d402      	bmi.n	800502e <_vfiprintf_r+0x2a>
 8005028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800502a:	f7ff fec6 	bl	8004dba <__retarget_lock_acquire_recursive>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	d501      	bpl.n	8005038 <_vfiprintf_r+0x34>
 8005034:	692b      	ldr	r3, [r5, #16]
 8005036:	b99b      	cbnz	r3, 8005060 <_vfiprintf_r+0x5c>
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff fdee 	bl	8004c1c <__swsetup_r>
 8005040:	b170      	cbz	r0, 8005060 <_vfiprintf_r+0x5c>
 8005042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005044:	07dc      	lsls	r4, r3, #31
 8005046:	d504      	bpl.n	8005052 <_vfiprintf_r+0x4e>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	b01d      	add	sp, #116	@ 0x74
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	89ab      	ldrh	r3, [r5, #12]
 8005054:	0598      	lsls	r0, r3, #22
 8005056:	d4f7      	bmi.n	8005048 <_vfiprintf_r+0x44>
 8005058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505a:	f7ff feaf 	bl	8004dbc <__retarget_lock_release_recursive>
 800505e:	e7f3      	b.n	8005048 <_vfiprintf_r+0x44>
 8005060:	2300      	movs	r3, #0
 8005062:	9309      	str	r3, [sp, #36]	@ 0x24
 8005064:	2320      	movs	r3, #32
 8005066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800506a:	f8cd 800c 	str.w	r8, [sp, #12]
 800506e:	2330      	movs	r3, #48	@ 0x30
 8005070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005220 <_vfiprintf_r+0x21c>
 8005074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005078:	f04f 0901 	mov.w	r9, #1
 800507c:	4623      	mov	r3, r4
 800507e:	469a      	mov	sl, r3
 8005080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005084:	b10a      	cbz	r2, 800508a <_vfiprintf_r+0x86>
 8005086:	2a25      	cmp	r2, #37	@ 0x25
 8005088:	d1f9      	bne.n	800507e <_vfiprintf_r+0x7a>
 800508a:	ebba 0b04 	subs.w	fp, sl, r4
 800508e:	d00b      	beq.n	80050a8 <_vfiprintf_r+0xa4>
 8005090:	465b      	mov	r3, fp
 8005092:	4622      	mov	r2, r4
 8005094:	4629      	mov	r1, r5
 8005096:	4630      	mov	r0, r6
 8005098:	f7ff ffa1 	bl	8004fde <__sfputs_r>
 800509c:	3001      	adds	r0, #1
 800509e:	f000 80a7 	beq.w	80051f0 <_vfiprintf_r+0x1ec>
 80050a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050a4:	445a      	add	r2, fp
 80050a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050a8:	f89a 3000 	ldrb.w	r3, [sl]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 809f 	beq.w	80051f0 <_vfiprintf_r+0x1ec>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f04f 32ff 	mov.w	r2, #4294967295
 80050b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050bc:	f10a 0a01 	add.w	sl, sl, #1
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	9307      	str	r3, [sp, #28]
 80050c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80050ca:	4654      	mov	r4, sl
 80050cc:	2205      	movs	r2, #5
 80050ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d2:	4853      	ldr	r0, [pc, #332]	@ (8005220 <_vfiprintf_r+0x21c>)
 80050d4:	f7fb f91c 	bl	8000310 <memchr>
 80050d8:	9a04      	ldr	r2, [sp, #16]
 80050da:	b9d8      	cbnz	r0, 8005114 <_vfiprintf_r+0x110>
 80050dc:	06d1      	lsls	r1, r2, #27
 80050de:	bf44      	itt	mi
 80050e0:	2320      	movmi	r3, #32
 80050e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e6:	0713      	lsls	r3, r2, #28
 80050e8:	bf44      	itt	mi
 80050ea:	232b      	movmi	r3, #43	@ 0x2b
 80050ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f0:	f89a 3000 	ldrb.w	r3, [sl]
 80050f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f6:	d015      	beq.n	8005124 <_vfiprintf_r+0x120>
 80050f8:	9a07      	ldr	r2, [sp, #28]
 80050fa:	4654      	mov	r4, sl
 80050fc:	2000      	movs	r0, #0
 80050fe:	f04f 0c0a 	mov.w	ip, #10
 8005102:	4621      	mov	r1, r4
 8005104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005108:	3b30      	subs	r3, #48	@ 0x30
 800510a:	2b09      	cmp	r3, #9
 800510c:	d94b      	bls.n	80051a6 <_vfiprintf_r+0x1a2>
 800510e:	b1b0      	cbz	r0, 800513e <_vfiprintf_r+0x13a>
 8005110:	9207      	str	r2, [sp, #28]
 8005112:	e014      	b.n	800513e <_vfiprintf_r+0x13a>
 8005114:	eba0 0308 	sub.w	r3, r0, r8
 8005118:	fa09 f303 	lsl.w	r3, r9, r3
 800511c:	4313      	orrs	r3, r2
 800511e:	9304      	str	r3, [sp, #16]
 8005120:	46a2      	mov	sl, r4
 8005122:	e7d2      	b.n	80050ca <_vfiprintf_r+0xc6>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	1d19      	adds	r1, r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	9103      	str	r1, [sp, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfbb      	ittet	lt
 8005130:	425b      	neglt	r3, r3
 8005132:	f042 0202 	orrlt.w	r2, r2, #2
 8005136:	9307      	strge	r3, [sp, #28]
 8005138:	9307      	strlt	r3, [sp, #28]
 800513a:	bfb8      	it	lt
 800513c:	9204      	strlt	r2, [sp, #16]
 800513e:	7823      	ldrb	r3, [r4, #0]
 8005140:	2b2e      	cmp	r3, #46	@ 0x2e
 8005142:	d10a      	bne.n	800515a <_vfiprintf_r+0x156>
 8005144:	7863      	ldrb	r3, [r4, #1]
 8005146:	2b2a      	cmp	r3, #42	@ 0x2a
 8005148:	d132      	bne.n	80051b0 <_vfiprintf_r+0x1ac>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	1d1a      	adds	r2, r3, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	9203      	str	r2, [sp, #12]
 8005152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005156:	3402      	adds	r4, #2
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005230 <_vfiprintf_r+0x22c>
 800515e:	7821      	ldrb	r1, [r4, #0]
 8005160:	2203      	movs	r2, #3
 8005162:	4650      	mov	r0, sl
 8005164:	f7fb f8d4 	bl	8000310 <memchr>
 8005168:	b138      	cbz	r0, 800517a <_vfiprintf_r+0x176>
 800516a:	9b04      	ldr	r3, [sp, #16]
 800516c:	eba0 000a 	sub.w	r0, r0, sl
 8005170:	2240      	movs	r2, #64	@ 0x40
 8005172:	4082      	lsls	r2, r0
 8005174:	4313      	orrs	r3, r2
 8005176:	3401      	adds	r4, #1
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517e:	4829      	ldr	r0, [pc, #164]	@ (8005224 <_vfiprintf_r+0x220>)
 8005180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005184:	2206      	movs	r2, #6
 8005186:	f7fb f8c3 	bl	8000310 <memchr>
 800518a:	2800      	cmp	r0, #0
 800518c:	d03f      	beq.n	800520e <_vfiprintf_r+0x20a>
 800518e:	4b26      	ldr	r3, [pc, #152]	@ (8005228 <_vfiprintf_r+0x224>)
 8005190:	bb1b      	cbnz	r3, 80051da <_vfiprintf_r+0x1d6>
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	3307      	adds	r3, #7
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	3308      	adds	r3, #8
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a0:	443b      	add	r3, r7
 80051a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a4:	e76a      	b.n	800507c <_vfiprintf_r+0x78>
 80051a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051aa:	460c      	mov	r4, r1
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7a8      	b.n	8005102 <_vfiprintf_r+0xfe>
 80051b0:	2300      	movs	r3, #0
 80051b2:	3401      	adds	r4, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0c0a 	mov.w	ip, #10
 80051bc:	4620      	mov	r0, r4
 80051be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c2:	3a30      	subs	r2, #48	@ 0x30
 80051c4:	2a09      	cmp	r2, #9
 80051c6:	d903      	bls.n	80051d0 <_vfiprintf_r+0x1cc>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0c6      	beq.n	800515a <_vfiprintf_r+0x156>
 80051cc:	9105      	str	r1, [sp, #20]
 80051ce:	e7c4      	b.n	800515a <_vfiprintf_r+0x156>
 80051d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d4:	4604      	mov	r4, r0
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7f0      	b.n	80051bc <_vfiprintf_r+0x1b8>
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	462a      	mov	r2, r5
 80051e0:	4b12      	ldr	r3, [pc, #72]	@ (800522c <_vfiprintf_r+0x228>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	4630      	mov	r0, r6
 80051e6:	f3af 8000 	nop.w
 80051ea:	4607      	mov	r7, r0
 80051ec:	1c78      	adds	r0, r7, #1
 80051ee:	d1d6      	bne.n	800519e <_vfiprintf_r+0x19a>
 80051f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_vfiprintf_r+0x1fe>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	059a      	lsls	r2, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_vfiprintf_r+0x1fe>
 80051fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051fe:	f7ff fddd 	bl	8004dbc <__retarget_lock_release_recursive>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	065b      	lsls	r3, r3, #25
 8005206:	f53f af1f 	bmi.w	8005048 <_vfiprintf_r+0x44>
 800520a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800520c:	e71e      	b.n	800504c <_vfiprintf_r+0x48>
 800520e:	ab03      	add	r3, sp, #12
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	462a      	mov	r2, r5
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <_vfiprintf_r+0x228>)
 8005216:	a904      	add	r1, sp, #16
 8005218:	4630      	mov	r0, r6
 800521a:	f000 f879 	bl	8005310 <_printf_i>
 800521e:	e7e4      	b.n	80051ea <_vfiprintf_r+0x1e6>
 8005220:	08005a04 	.word	0x08005a04
 8005224:	08005a0e 	.word	0x08005a0e
 8005228:	00000000 	.word	0x00000000
 800522c:	08004fdf 	.word	0x08004fdf
 8005230:	08005a0a 	.word	0x08005a0a

08005234 <_printf_common>:
 8005234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	4616      	mov	r6, r2
 800523a:	4698      	mov	r8, r3
 800523c:	688a      	ldr	r2, [r1, #8]
 800523e:	690b      	ldr	r3, [r1, #16]
 8005240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005244:	4293      	cmp	r3, r2
 8005246:	bfb8      	it	lt
 8005248:	4613      	movlt	r3, r2
 800524a:	6033      	str	r3, [r6, #0]
 800524c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005250:	4607      	mov	r7, r0
 8005252:	460c      	mov	r4, r1
 8005254:	b10a      	cbz	r2, 800525a <_printf_common+0x26>
 8005256:	3301      	adds	r3, #1
 8005258:	6033      	str	r3, [r6, #0]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	0699      	lsls	r1, r3, #26
 800525e:	bf42      	ittt	mi
 8005260:	6833      	ldrmi	r3, [r6, #0]
 8005262:	3302      	addmi	r3, #2
 8005264:	6033      	strmi	r3, [r6, #0]
 8005266:	6825      	ldr	r5, [r4, #0]
 8005268:	f015 0506 	ands.w	r5, r5, #6
 800526c:	d106      	bne.n	800527c <_printf_common+0x48>
 800526e:	f104 0a19 	add.w	sl, r4, #25
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	6832      	ldr	r2, [r6, #0]
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	42ab      	cmp	r3, r5
 800527a:	dc26      	bgt.n	80052ca <_printf_common+0x96>
 800527c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	3b00      	subs	r3, #0
 8005284:	bf18      	it	ne
 8005286:	2301      	movne	r3, #1
 8005288:	0692      	lsls	r2, r2, #26
 800528a:	d42b      	bmi.n	80052e4 <_printf_common+0xb0>
 800528c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005290:	4641      	mov	r1, r8
 8005292:	4638      	mov	r0, r7
 8005294:	47c8      	blx	r9
 8005296:	3001      	adds	r0, #1
 8005298:	d01e      	beq.n	80052d8 <_printf_common+0xa4>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	f003 0306 	and.w	r3, r3, #6
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	bf02      	ittt	eq
 80052a6:	68e5      	ldreq	r5, [r4, #12]
 80052a8:	6833      	ldreq	r3, [r6, #0]
 80052aa:	1aed      	subeq	r5, r5, r3
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	bf0c      	ite	eq
 80052b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b4:	2500      	movne	r5, #0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bfc4      	itt	gt
 80052ba:	1a9b      	subgt	r3, r3, r2
 80052bc:	18ed      	addgt	r5, r5, r3
 80052be:	2600      	movs	r6, #0
 80052c0:	341a      	adds	r4, #26
 80052c2:	42b5      	cmp	r5, r6
 80052c4:	d11a      	bne.n	80052fc <_printf_common+0xc8>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e008      	b.n	80052dc <_printf_common+0xa8>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4652      	mov	r2, sl
 80052ce:	4641      	mov	r1, r8
 80052d0:	4638      	mov	r0, r7
 80052d2:	47c8      	blx	r9
 80052d4:	3001      	adds	r0, #1
 80052d6:	d103      	bne.n	80052e0 <_printf_common+0xac>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e0:	3501      	adds	r5, #1
 80052e2:	e7c6      	b.n	8005272 <_printf_common+0x3e>
 80052e4:	18e1      	adds	r1, r4, r3
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	2030      	movs	r0, #48	@ 0x30
 80052ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ee:	4422      	add	r2, r4
 80052f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052f8:	3302      	adds	r3, #2
 80052fa:	e7c7      	b.n	800528c <_printf_common+0x58>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4622      	mov	r2, r4
 8005300:	4641      	mov	r1, r8
 8005302:	4638      	mov	r0, r7
 8005304:	47c8      	blx	r9
 8005306:	3001      	adds	r0, #1
 8005308:	d0e6      	beq.n	80052d8 <_printf_common+0xa4>
 800530a:	3601      	adds	r6, #1
 800530c:	e7d9      	b.n	80052c2 <_printf_common+0x8e>
	...

08005310 <_printf_i>:
 8005310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	7e0f      	ldrb	r7, [r1, #24]
 8005316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005318:	2f78      	cmp	r7, #120	@ 0x78
 800531a:	4691      	mov	r9, r2
 800531c:	4680      	mov	r8, r0
 800531e:	460c      	mov	r4, r1
 8005320:	469a      	mov	sl, r3
 8005322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005326:	d807      	bhi.n	8005338 <_printf_i+0x28>
 8005328:	2f62      	cmp	r7, #98	@ 0x62
 800532a:	d80a      	bhi.n	8005342 <_printf_i+0x32>
 800532c:	2f00      	cmp	r7, #0
 800532e:	f000 80d2 	beq.w	80054d6 <_printf_i+0x1c6>
 8005332:	2f58      	cmp	r7, #88	@ 0x58
 8005334:	f000 80b9 	beq.w	80054aa <_printf_i+0x19a>
 8005338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800533c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005340:	e03a      	b.n	80053b8 <_printf_i+0xa8>
 8005342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005346:	2b15      	cmp	r3, #21
 8005348:	d8f6      	bhi.n	8005338 <_printf_i+0x28>
 800534a:	a101      	add	r1, pc, #4	@ (adr r1, 8005350 <_printf_i+0x40>)
 800534c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005350:	080053a9 	.word	0x080053a9
 8005354:	080053bd 	.word	0x080053bd
 8005358:	08005339 	.word	0x08005339
 800535c:	08005339 	.word	0x08005339
 8005360:	08005339 	.word	0x08005339
 8005364:	08005339 	.word	0x08005339
 8005368:	080053bd 	.word	0x080053bd
 800536c:	08005339 	.word	0x08005339
 8005370:	08005339 	.word	0x08005339
 8005374:	08005339 	.word	0x08005339
 8005378:	08005339 	.word	0x08005339
 800537c:	080054bd 	.word	0x080054bd
 8005380:	080053e7 	.word	0x080053e7
 8005384:	08005477 	.word	0x08005477
 8005388:	08005339 	.word	0x08005339
 800538c:	08005339 	.word	0x08005339
 8005390:	080054df 	.word	0x080054df
 8005394:	08005339 	.word	0x08005339
 8005398:	080053e7 	.word	0x080053e7
 800539c:	08005339 	.word	0x08005339
 80053a0:	08005339 	.word	0x08005339
 80053a4:	0800547f 	.word	0x0800547f
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6032      	str	r2, [r6, #0]
 80053b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053b8:	2301      	movs	r3, #1
 80053ba:	e09d      	b.n	80054f8 <_printf_i+0x1e8>
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	1d19      	adds	r1, r3, #4
 80053c2:	6031      	str	r1, [r6, #0]
 80053c4:	0606      	lsls	r6, r0, #24
 80053c6:	d501      	bpl.n	80053cc <_printf_i+0xbc>
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	e003      	b.n	80053d4 <_printf_i+0xc4>
 80053cc:	0645      	lsls	r5, r0, #25
 80053ce:	d5fb      	bpl.n	80053c8 <_printf_i+0xb8>
 80053d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	da03      	bge.n	80053e0 <_printf_i+0xd0>
 80053d8:	232d      	movs	r3, #45	@ 0x2d
 80053da:	426d      	negs	r5, r5
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e0:	4859      	ldr	r0, [pc, #356]	@ (8005548 <_printf_i+0x238>)
 80053e2:	230a      	movs	r3, #10
 80053e4:	e011      	b.n	800540a <_printf_i+0xfa>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	6833      	ldr	r3, [r6, #0]
 80053ea:	0608      	lsls	r0, r1, #24
 80053ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80053f0:	d402      	bmi.n	80053f8 <_printf_i+0xe8>
 80053f2:	0649      	lsls	r1, r1, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2ad      	uxthmi	r5, r5
 80053f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053fa:	4853      	ldr	r0, [pc, #332]	@ (8005548 <_printf_i+0x238>)
 80053fc:	6033      	str	r3, [r6, #0]
 80053fe:	bf14      	ite	ne
 8005400:	230a      	movne	r3, #10
 8005402:	2308      	moveq	r3, #8
 8005404:	2100      	movs	r1, #0
 8005406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800540a:	6866      	ldr	r6, [r4, #4]
 800540c:	60a6      	str	r6, [r4, #8]
 800540e:	2e00      	cmp	r6, #0
 8005410:	bfa2      	ittt	ge
 8005412:	6821      	ldrge	r1, [r4, #0]
 8005414:	f021 0104 	bicge.w	r1, r1, #4
 8005418:	6021      	strge	r1, [r4, #0]
 800541a:	b90d      	cbnz	r5, 8005420 <_printf_i+0x110>
 800541c:	2e00      	cmp	r6, #0
 800541e:	d04b      	beq.n	80054b8 <_printf_i+0x1a8>
 8005420:	4616      	mov	r6, r2
 8005422:	fbb5 f1f3 	udiv	r1, r5, r3
 8005426:	fb03 5711 	mls	r7, r3, r1, r5
 800542a:	5dc7      	ldrb	r7, [r0, r7]
 800542c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005430:	462f      	mov	r7, r5
 8005432:	42bb      	cmp	r3, r7
 8005434:	460d      	mov	r5, r1
 8005436:	d9f4      	bls.n	8005422 <_printf_i+0x112>
 8005438:	2b08      	cmp	r3, #8
 800543a:	d10b      	bne.n	8005454 <_printf_i+0x144>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	07df      	lsls	r7, r3, #31
 8005440:	d508      	bpl.n	8005454 <_printf_i+0x144>
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	6861      	ldr	r1, [r4, #4]
 8005446:	4299      	cmp	r1, r3
 8005448:	bfde      	ittt	le
 800544a:	2330      	movle	r3, #48	@ 0x30
 800544c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005454:	1b92      	subs	r2, r2, r6
 8005456:	6122      	str	r2, [r4, #16]
 8005458:	f8cd a000 	str.w	sl, [sp]
 800545c:	464b      	mov	r3, r9
 800545e:	aa03      	add	r2, sp, #12
 8005460:	4621      	mov	r1, r4
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff fee6 	bl	8005234 <_printf_common>
 8005468:	3001      	adds	r0, #1
 800546a:	d14a      	bne.n	8005502 <_printf_i+0x1f2>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	b004      	add	sp, #16
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f043 0320 	orr.w	r3, r3, #32
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	4833      	ldr	r0, [pc, #204]	@ (800554c <_printf_i+0x23c>)
 8005480:	2778      	movs	r7, #120	@ 0x78
 8005482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	6831      	ldr	r1, [r6, #0]
 800548a:	061f      	lsls	r7, r3, #24
 800548c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005490:	d402      	bmi.n	8005498 <_printf_i+0x188>
 8005492:	065f      	lsls	r7, r3, #25
 8005494:	bf48      	it	mi
 8005496:	b2ad      	uxthmi	r5, r5
 8005498:	6031      	str	r1, [r6, #0]
 800549a:	07d9      	lsls	r1, r3, #31
 800549c:	bf44      	itt	mi
 800549e:	f043 0320 	orrmi.w	r3, r3, #32
 80054a2:	6023      	strmi	r3, [r4, #0]
 80054a4:	b11d      	cbz	r5, 80054ae <_printf_i+0x19e>
 80054a6:	2310      	movs	r3, #16
 80054a8:	e7ac      	b.n	8005404 <_printf_i+0xf4>
 80054aa:	4827      	ldr	r0, [pc, #156]	@ (8005548 <_printf_i+0x238>)
 80054ac:	e7e9      	b.n	8005482 <_printf_i+0x172>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f023 0320 	bic.w	r3, r3, #32
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	e7f6      	b.n	80054a6 <_printf_i+0x196>
 80054b8:	4616      	mov	r6, r2
 80054ba:	e7bd      	b.n	8005438 <_printf_i+0x128>
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	6961      	ldr	r1, [r4, #20]
 80054c2:	1d18      	adds	r0, r3, #4
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	062e      	lsls	r6, r5, #24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	d501      	bpl.n	80054d0 <_printf_i+0x1c0>
 80054cc:	6019      	str	r1, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <_printf_i+0x1c6>
 80054d0:	0668      	lsls	r0, r5, #25
 80054d2:	d5fb      	bpl.n	80054cc <_printf_i+0x1bc>
 80054d4:	8019      	strh	r1, [r3, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	4616      	mov	r6, r2
 80054dc:	e7bc      	b.n	8005458 <_printf_i+0x148>
 80054de:	6833      	ldr	r3, [r6, #0]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	6032      	str	r2, [r6, #0]
 80054e4:	681e      	ldr	r6, [r3, #0]
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	2100      	movs	r1, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7fa ff10 	bl	8000310 <memchr>
 80054f0:	b108      	cbz	r0, 80054f6 <_printf_i+0x1e6>
 80054f2:	1b80      	subs	r0, r0, r6
 80054f4:	6060      	str	r0, [r4, #4]
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005500:	e7aa      	b.n	8005458 <_printf_i+0x148>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	47d0      	blx	sl
 800550c:	3001      	adds	r0, #1
 800550e:	d0ad      	beq.n	800546c <_printf_i+0x15c>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d413      	bmi.n	800553e <_printf_i+0x22e>
 8005516:	68e0      	ldr	r0, [r4, #12]
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	4298      	cmp	r0, r3
 800551c:	bfb8      	it	lt
 800551e:	4618      	movlt	r0, r3
 8005520:	e7a6      	b.n	8005470 <_printf_i+0x160>
 8005522:	2301      	movs	r3, #1
 8005524:	4632      	mov	r2, r6
 8005526:	4649      	mov	r1, r9
 8005528:	4640      	mov	r0, r8
 800552a:	47d0      	blx	sl
 800552c:	3001      	adds	r0, #1
 800552e:	d09d      	beq.n	800546c <_printf_i+0x15c>
 8005530:	3501      	adds	r5, #1
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	9903      	ldr	r1, [sp, #12]
 8005536:	1a5b      	subs	r3, r3, r1
 8005538:	42ab      	cmp	r3, r5
 800553a:	dcf2      	bgt.n	8005522 <_printf_i+0x212>
 800553c:	e7eb      	b.n	8005516 <_printf_i+0x206>
 800553e:	2500      	movs	r5, #0
 8005540:	f104 0619 	add.w	r6, r4, #25
 8005544:	e7f5      	b.n	8005532 <_printf_i+0x222>
 8005546:	bf00      	nop
 8005548:	08005a15 	.word	0x08005a15
 800554c:	08005a26 	.word	0x08005a26

08005550 <__sflush_r>:
 8005550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	0716      	lsls	r6, r2, #28
 800555a:	4605      	mov	r5, r0
 800555c:	460c      	mov	r4, r1
 800555e:	d454      	bmi.n	800560a <__sflush_r+0xba>
 8005560:	684b      	ldr	r3, [r1, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	dc02      	bgt.n	800556c <__sflush_r+0x1c>
 8005566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd48      	ble.n	80055fe <__sflush_r+0xae>
 800556c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800556e:	2e00      	cmp	r6, #0
 8005570:	d045      	beq.n	80055fe <__sflush_r+0xae>
 8005572:	2300      	movs	r3, #0
 8005574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005578:	682f      	ldr	r7, [r5, #0]
 800557a:	6a21      	ldr	r1, [r4, #32]
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	d030      	beq.n	80055e2 <__sflush_r+0x92>
 8005580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	0759      	lsls	r1, r3, #29
 8005586:	d505      	bpl.n	8005594 <__sflush_r+0x44>
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800558e:	b10b      	cbz	r3, 8005594 <__sflush_r+0x44>
 8005590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005598:	6a21      	ldr	r1, [r4, #32]
 800559a:	4628      	mov	r0, r5
 800559c:	47b0      	blx	r6
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	d106      	bne.n	80055b2 <__sflush_r+0x62>
 80055a4:	6829      	ldr	r1, [r5, #0]
 80055a6:	291d      	cmp	r1, #29
 80055a8:	d82b      	bhi.n	8005602 <__sflush_r+0xb2>
 80055aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005654 <__sflush_r+0x104>)
 80055ac:	410a      	asrs	r2, r1
 80055ae:	07d6      	lsls	r6, r2, #31
 80055b0:	d427      	bmi.n	8005602 <__sflush_r+0xb2>
 80055b2:	2200      	movs	r2, #0
 80055b4:	6062      	str	r2, [r4, #4]
 80055b6:	04d9      	lsls	r1, r3, #19
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	6022      	str	r2, [r4, #0]
 80055bc:	d504      	bpl.n	80055c8 <__sflush_r+0x78>
 80055be:	1c42      	adds	r2, r0, #1
 80055c0:	d101      	bne.n	80055c6 <__sflush_r+0x76>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	b903      	cbnz	r3, 80055c8 <__sflush_r+0x78>
 80055c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80055c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ca:	602f      	str	r7, [r5, #0]
 80055cc:	b1b9      	cbz	r1, 80055fe <__sflush_r+0xae>
 80055ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055d2:	4299      	cmp	r1, r3
 80055d4:	d002      	beq.n	80055dc <__sflush_r+0x8c>
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7ff fbf2 	bl	8004dc0 <_free_r>
 80055dc:	2300      	movs	r3, #0
 80055de:	6363      	str	r3, [r4, #52]	@ 0x34
 80055e0:	e00d      	b.n	80055fe <__sflush_r+0xae>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b0      	blx	r6
 80055e8:	4602      	mov	r2, r0
 80055ea:	1c50      	adds	r0, r2, #1
 80055ec:	d1c9      	bne.n	8005582 <__sflush_r+0x32>
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0c6      	beq.n	8005582 <__sflush_r+0x32>
 80055f4:	2b1d      	cmp	r3, #29
 80055f6:	d001      	beq.n	80055fc <__sflush_r+0xac>
 80055f8:	2b16      	cmp	r3, #22
 80055fa:	d11e      	bne.n	800563a <__sflush_r+0xea>
 80055fc:	602f      	str	r7, [r5, #0]
 80055fe:	2000      	movs	r0, #0
 8005600:	e022      	b.n	8005648 <__sflush_r+0xf8>
 8005602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005606:	b21b      	sxth	r3, r3
 8005608:	e01b      	b.n	8005642 <__sflush_r+0xf2>
 800560a:	690f      	ldr	r7, [r1, #16]
 800560c:	2f00      	cmp	r7, #0
 800560e:	d0f6      	beq.n	80055fe <__sflush_r+0xae>
 8005610:	0793      	lsls	r3, r2, #30
 8005612:	680e      	ldr	r6, [r1, #0]
 8005614:	bf08      	it	eq
 8005616:	694b      	ldreq	r3, [r1, #20]
 8005618:	600f      	str	r7, [r1, #0]
 800561a:	bf18      	it	ne
 800561c:	2300      	movne	r3, #0
 800561e:	eba6 0807 	sub.w	r8, r6, r7
 8005622:	608b      	str	r3, [r1, #8]
 8005624:	f1b8 0f00 	cmp.w	r8, #0
 8005628:	dde9      	ble.n	80055fe <__sflush_r+0xae>
 800562a:	6a21      	ldr	r1, [r4, #32]
 800562c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800562e:	4643      	mov	r3, r8
 8005630:	463a      	mov	r2, r7
 8005632:	4628      	mov	r0, r5
 8005634:	47b0      	blx	r6
 8005636:	2800      	cmp	r0, #0
 8005638:	dc08      	bgt.n	800564c <__sflush_r+0xfc>
 800563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	4407      	add	r7, r0
 800564e:	eba8 0800 	sub.w	r8, r8, r0
 8005652:	e7e7      	b.n	8005624 <__sflush_r+0xd4>
 8005654:	dfbffffe 	.word	0xdfbffffe

08005658 <_fflush_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	4605      	mov	r5, r0
 800565e:	460c      	mov	r4, r1
 8005660:	b913      	cbnz	r3, 8005668 <_fflush_r+0x10>
 8005662:	2500      	movs	r5, #0
 8005664:	4628      	mov	r0, r5
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	b118      	cbz	r0, 8005672 <_fflush_r+0x1a>
 800566a:	6a03      	ldr	r3, [r0, #32]
 800566c:	b90b      	cbnz	r3, 8005672 <_fflush_r+0x1a>
 800566e:	f7ff f9ad 	bl	80049cc <__sinit>
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f3      	beq.n	8005662 <_fflush_r+0xa>
 800567a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800567c:	07d0      	lsls	r0, r2, #31
 800567e:	d404      	bmi.n	800568a <_fflush_r+0x32>
 8005680:	0599      	lsls	r1, r3, #22
 8005682:	d402      	bmi.n	800568a <_fflush_r+0x32>
 8005684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005686:	f7ff fb98 	bl	8004dba <__retarget_lock_acquire_recursive>
 800568a:	4628      	mov	r0, r5
 800568c:	4621      	mov	r1, r4
 800568e:	f7ff ff5f 	bl	8005550 <__sflush_r>
 8005692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005694:	07da      	lsls	r2, r3, #31
 8005696:	4605      	mov	r5, r0
 8005698:	d4e4      	bmi.n	8005664 <_fflush_r+0xc>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	059b      	lsls	r3, r3, #22
 800569e:	d4e1      	bmi.n	8005664 <_fflush_r+0xc>
 80056a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056a2:	f7ff fb8b 	bl	8004dbc <__retarget_lock_release_recursive>
 80056a6:	e7dd      	b.n	8005664 <_fflush_r+0xc>

080056a8 <__swhatbuf_r>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	460c      	mov	r4, r1
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	2900      	cmp	r1, #0
 80056b2:	b096      	sub	sp, #88	@ 0x58
 80056b4:	4615      	mov	r5, r2
 80056b6:	461e      	mov	r6, r3
 80056b8:	da0d      	bge.n	80056d6 <__swhatbuf_r+0x2e>
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056c0:	f04f 0100 	mov.w	r1, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2340      	movne	r3, #64	@ 0x40
 80056c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056cc:	2000      	movs	r0, #0
 80056ce:	6031      	str	r1, [r6, #0]
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	b016      	add	sp, #88	@ 0x58
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	466a      	mov	r2, sp
 80056d8:	f000 f848 	bl	800576c <_fstat_r>
 80056dc:	2800      	cmp	r0, #0
 80056de:	dbec      	blt.n	80056ba <__swhatbuf_r+0x12>
 80056e0:	9901      	ldr	r1, [sp, #4]
 80056e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056ea:	4259      	negs	r1, r3
 80056ec:	4159      	adcs	r1, r3
 80056ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056f2:	e7eb      	b.n	80056cc <__swhatbuf_r+0x24>

080056f4 <__smakebuf_r>:
 80056f4:	898b      	ldrh	r3, [r1, #12]
 80056f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f8:	079d      	lsls	r5, r3, #30
 80056fa:	4606      	mov	r6, r0
 80056fc:	460c      	mov	r4, r1
 80056fe:	d507      	bpl.n	8005710 <__smakebuf_r+0x1c>
 8005700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	2301      	movs	r3, #1
 800570a:	6163      	str	r3, [r4, #20]
 800570c:	b003      	add	sp, #12
 800570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005710:	ab01      	add	r3, sp, #4
 8005712:	466a      	mov	r2, sp
 8005714:	f7ff ffc8 	bl	80056a8 <__swhatbuf_r>
 8005718:	9f00      	ldr	r7, [sp, #0]
 800571a:	4605      	mov	r5, r0
 800571c:	4639      	mov	r1, r7
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff fbba 	bl	8004e98 <_malloc_r>
 8005724:	b948      	cbnz	r0, 800573a <__smakebuf_r+0x46>
 8005726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572a:	059a      	lsls	r2, r3, #22
 800572c:	d4ee      	bmi.n	800570c <__smakebuf_r+0x18>
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	e7e2      	b.n	8005700 <__smakebuf_r+0xc>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	6020      	str	r0, [r4, #0]
 800573e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800574a:	b15b      	cbz	r3, 8005764 <__smakebuf_r+0x70>
 800574c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f81d 	bl	8005790 <_isatty_r>
 8005756:	b128      	cbz	r0, 8005764 <__smakebuf_r+0x70>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	431d      	orrs	r5, r3
 8005768:	81a5      	strh	r5, [r4, #12]
 800576a:	e7cf      	b.n	800570c <__smakebuf_r+0x18>

0800576c <_fstat_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	@ (800578c <_fstat_r+0x20>)
 8005770:	2300      	movs	r3, #0
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	f7fb fb65 	bl	8000e48 <_fstat>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	d102      	bne.n	8005788 <_fstat_r+0x1c>
 8005782:	682b      	ldr	r3, [r5, #0]
 8005784:	b103      	cbz	r3, 8005788 <_fstat_r+0x1c>
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	24000274 	.word	0x24000274

08005790 <_isatty_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d06      	ldr	r5, [pc, #24]	@ (80057ac <_isatty_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fb fb64 	bl	8000e68 <_isatty>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_isatty_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_isatty_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	24000274 	.word	0x24000274

080057b0 <_sbrk_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	@ (80057cc <_sbrk_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fb fb6c 	bl	8000e98 <_sbrk>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_sbrk_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_sbrk_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	24000274 	.word	0x24000274

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
